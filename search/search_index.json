{"config":{"lang":["en","ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Hello","text":"<p>\ud83d\udcac\u8fd9\u91cc\u662f\u67d0\u5170 | Enl_Z\u7684\u7b14\u8bb0\u672c\uff0c\u6709\u4e00\u4e9b\u8bfe\u7a0b\u7b14\u8bb0\u6216\u8005\u5b66\u4e60\u8bb0\u5f55\uff1b</p> <p>\ud83d\udcac\u5176\u4f59\u8f83\u6742\u7684\u5185\u5bb9\uff08\u8bf8\u5982\u5b66\u4e60\u603b\u7ed3\u4e00\u7c7b\u7684\uff09\u6b22\u8fce\u5927\u5bb6\u5230\u6211\u7684Blog</p> <p>Abstract</p> <p>\u56e0\u4e3a\u8bb0\u6027\u4e0d\u597d\uff0c\u7b14\u8bb0\u5185\u5bb9\u6574\u7406\u8f83\u4e3a\u7e41\u7410\u3002 \u800c\u4e14\u80fd\u529b\u6709\u9650\uff0c\u5927\u5676\u9009\u62e9\u6027\u770b\u770b\u53ed~</p>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"Perface","text":"<ul> <li>clock()\uff1a\u6355\u6349\u4ece\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u5230clock()\u88ab\u8c03\u7528\u6240\u8017\u8d39\u7684\u65f6\u95f4\u3002</li> <li>\u8fd9\u4e2a\u65f6\u95f4\u5355\u4f4d\u662fclock tick\uff0c\u5373\u201d\u65f6\u949f\u6253\u70b9\u201c\u3002</li> <li>\u5e38\u6570CLK_TCK\uff1a\u673a\u5668\u65f6\u949f\u6bcf\u79d2\u6240\u8d70\u7684\u65f6\u949f\u6253\u70b9\u6570\u3002<pre><code> clock_t start, stop;\n /* clock_t \u662f clock()\u51fd\u6570\u8fd4\u56de\u7684\u53d8\u91cf\u7c7b\u578b */\n double duration;\n /* \u8bb0\u5f55\u88ab\u6d4b\u51fd\u6570\u8fd0\u884c\u65f6\u95f4\uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d */\n int main()\n {/* \u4e0d\u5728\u6d4b\u8bd5\u8303\u56f4\u5185\u7684\u51c6\u5907\u5de5\u4f5c\u653e\u5728clock()\u8c03\u7528\u4e4b\u524d */\n    start = clock();    /* \u5f00\u59cb\u8ba1\u65f6 */\n    MyFunction();\n    stop = clock();\n    duration = ((double)(stop - start))/CLK_TCK;\n    /* \u5176\u4ed6\u4e0d\u5728\u6d4b\u8bd5\u8303\u56f4\u7684\u5904\u7406\u5199\u5728\u540e\u9762\uff0c\u4f8b\u5982\u8f93\u51faduration\u7684\u503c */\n    return 0;\n }\n</code></pre> </li> </ul>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#-","title":"\u7b80\u4ecb-&gt;\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784","text":""},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_1","title":"\u6570\u636e\u5bf9\u8c61\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u7ec4\u7ec7\u65b9\u5f0f","text":""},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_2","title":"\u903b\u8f91\u7ed3\u6784","text":"<ul> <li>\u4e00\u5bf9\u4e00\u7684\u7ed3\u6784\uff0c\u53eb\u505a\u201d\u7ebf\u6027\u7ed3\u6784\u201c</li> <li>\u4e00\u5bf9\u591a\u7684\u903b\u8f91\u7ed3\u6784\uff0c\u53eb\u505a\u201d\u6811\u578b\u7ed3\u6784\u201c</li> <li>\u591a\u5bf9\u591a\u7684\u590d\u6742\u5173\u7cfb\u7f51\uff0c\u8fd9\u4e2a\u5173\u7cfb\u7f51\u53eb\u505a\u201d\u56fe\u201c</li> </ul>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_3","title":"\u7269\u7406\u5b58\u50a8\u7ed3\u6784\uff08\u5982\u6570\u7ec4\u5f62\u5f0f\u3001\u94fe\u8868\u5f62\u5f0f\u2026\u2026","text":"<p>Note</p> <p>\u63cf\u8ff0\u6570\u636e\u7ed3\u6784</p>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#abstract-data-type-adt","title":"\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff08Abstract Data Type\uff09| ADT","text":"<ol> <li>\u6570\u636e\u7c7b\u578b<ol> <li>\u6570\u636e\u5bf9\u8c61\u96c6</li> <li>\u6570\u636e\u96c6\u5408\u76f8\u5173\u8054\u7684\u64cd\u4f5c\u96c6</li> </ol> </li> <li>\u62bd\u8c61\uff1a\u63cf\u8ff0\u6570\u636e\u7c7b\u578b\u7684\u65b9\u6cd5\u4e0d\u4f9d\u8d56\u4e8e\u5177\u4f53\u5b9e\u73b0<ol> <li>\u4e0e\u5b58\u653e\u548c\u6570\u636e\u7684\u673a\u5668\u65e0\u5173</li> <li>\u4e0e\u6570\u636e\u5b58\u50a8\u7684\u7269\u7406\u7ed3\u6784\u65e0\u5173</li> <li>\u4e0e\u5b9e\u73b0\u64cd\u4f5c\u7684\u7b97\u6cd5\u548c\u7f16\u7a0b\u8bed\u8a00\u5747\u65e0\u5173</li> </ol> </li> </ol> <ul> <li>\u53ea\u63cf\u8ff0\u6570\u636e\u5bf9\u8c61\u96c6\u548c\u76f8\u5173\u64cd\u4f5c\u96c6\u201d\u662f\u4ec0\u4e48\u201c\uff0c\u5e76\u4e0d\u6d89\u53ca\u201d\u5982\u4f55\u505a\u5230\u201c\u7684\u95ee\u9898</li> <li>\u5176\u4e2d\u7684\u62bd\u8c61\u53ef\u4ee5\u4ece\u5982\u4e0b\u770b<ul> <li>e.g\uff1aElementType\u662f\u901a\u7528\u6570\u636e\u7c7b\u578b\uff08\u62bd\u8c61)\uff0c\u9700\u8981double \uff0c\u5728\u524d\u9762define\u5373\u53ef</li> <li>e.g\uff1a\u77e9\u9635\u662f\u7528\u4e8c\u7ef4\u6570\u7ec4\u3001\u4e00\u7ef4\u6570\u7ec4\u8fd8\u662f\u5341\u5b57\u94fe\u8868\u5b9e\u73b0\u7684\u90fd\u4e0d\u91cd\u8981\uff0c\u53ea\u662f\u5b9e\u73b0\u4e00\u4e2a\u77e9\u9635</li> <li>e.g\uff1aMatrix Add\u4e2d\u4e0d\u5728\u4e4e\u6309\u884c\u52a0\u8fd8\u662f\u6309\u5217\u52a0\uff0c\u7528\u4ec0\u4e48\u8bed\u8a00\u5b9e\u73b0\u90fd\u4e0d\u5728\u4e4e</li> </ul> </li> </ul> <p>\u62bd\u8c61\u7684\u597d\u5904-&gt;\u4e00\u65b9\u9762\u662f\u63d0\u9ad8\u7a0b\u5e8f\u7684\u590d\u7528\u6027\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u8ba9\u6211\u4eec\u4fa7\u91cd\u53bb\u4e86\u89e3\u7a0b\u5e8f\u7684\u903b\u8f91\u7ed3\u6784</p>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_4","title":"\u7b97\u6cd5\u5206\u6790","text":""},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_5","title":"\u5b9a\u4e49","text":""},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#algorithm","title":"\u7b97\u6cd5\uff08Algorithm\uff09","text":"<ol> <li>\u4e00\u4e2a\u6709\u9650\u6307\u4ee4\u96c6</li> <li>\u63a5\u53d7\u4e00\u4e9b\u8f93\u5165\uff08\u6709\u4e9b\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u8f93\u5165\uff09</li> <li>\u4ea7\u751f\u8f93\u51fa</li> <li>\u4e00\u5b9a\u5728\u6709\u9650\u6b65\u9aa4\u4e4b\u540e\u7ec8\u6b62</li> <li>\u6bcf\u4e00\u6761\u6307\u4ee4\u5fc5\u987b<ol> <li>\u6709\u5145\u5206\u660e\u786e\u7684\u76ee\u6807\uff0c\u4e0d\u53ef\u4ee5\u4ea7\u751f\u6b67\u4e49</li> <li>\u8ba1\u7b97\u673a\u80fd\u5904\u7406\u7684\u8303\u56f4\u4e4b\u5185</li> <li>\u63cf\u8ff0\u5e94\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u4e00\u79cd\u8ba1\u7b97\u673a\u8bed\u8a00\u53ca\u5177\u4f53\u7684\u5b9e\u73b0\u624b\u6bb5</li> </ol> </li> </ol>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_6","title":"\u8861\u91cf\u7b97\u6cd5\u7684\u4e24\u4e2a\u6307\u6807","text":""},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#sn","title":"\u7a7a\u95f4\u590d\u6742\u5ea6S(n)","text":"<p>\u6839\u636e\u7b97\u6cd5\u5199\u6210\u7684\u7a0b\u5e8f\u5728\u6267\u884c\u65f6\u5360\u7528\u5b58\u50a8\u5355\u5143\u7684\u957f\u5ea6\u3002\u8fd9\u4e2a\u957f\u5ea6\u5f80\u5f80\u4e0e\u8f93\u5165\u6570\u636e\u7684\u89c4\u6a21\u6709\u5173\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\u7684\u7b97\u6cd5\u53ef\u80fd\u5bfc\u81f4\u4f7f\u7528\u7684\u5185\u5b58\u8d85\u9650\uff0c\u9020\u6210\u7a0b\u5e8f\u975e\u6b63\u5e38\u4e2d\u65ad\u3002</p>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#tn","title":"\u65f6\u95f4\u590d\u6742\u5ea6T(n)","text":"<p>\u6839\u636e\u7b97\u6cd5\u5199\u6210\u7684\u7a0b\u5e8f\u5728\u6267\u884c\u65f6\u8017\u8d39\u65f6\u95f4\u7684\u957f\u5ea6\u3002\u8fd9\u4e2a\u957f\u5ea6\u5f80\u5f80\u4e5f\u4e0e\u8f93\u5165\u6570\u636e\u7684\u89c4\u6a21\u6709\u5173\u3002</p>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_7","title":"\u590d\u6742\u5ea6\u7684\u6e10\u8fdb\u8868\u793a\u6cd5","text":"<ol> <li>\\(T(n) =  O  (f(n))\\) \u8868\u793a\u5b58\u5728\u5e38\u6570 \\(C&gt;0, n_0 &gt; 0\\), \u4f7f\u5f97\u5f53 \\(n \\ge  n_0\\) \u65f6\u6709 \\(T(n) \\le C\u00d7f(n)\\)</li> <li>\\(T(n) =\\Omega(g(n))\\) \u8868\u793a\u5b58\u5728\u5e38\u6570 \\(C&gt;0\uff0cn_0&gt;0\\), \u4f7f\u5f97\u5f53 \\(n&gt;=n0\\) \u65f6\u6709 \\(T(n) \\ge C\u00d7g(n)\\)</li> <li>\\(T(n) =\\Theta(h(n))\\) \u8868\u793a\u540c\u65f6\u6709 \\(T(n) = O(h(n))\\) \u548c \\(T(n) = \\Omega(h(n))\\)</li> </ol>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#tips","title":"TIPs","text":"<ol> <li>\u82e5\u6709\u4e24\u6bb5\u7b97\u6cd5\u5206\u522b\u6709\u590d\u6742\u5ea6 \\(T_1(n) = O(f_1(n))\u548cT_2(n) = O(f_2(n))\\)\uff0c\u5219<ol> <li>\\(T_1(n) + T_2(n) = max(O(f_1(n)), O(f_2(n)))\\) \u8868\u793a\u4e24\u4e2a\u7b97\u6cd5\u62fc\u63a5\u8d77\u6765</li> <li>\\(T_1(n) \\times T_2(n) = O(f_1(n) \\times f_2(n))\\) \u8868\u793a\u4e24\u4e2a\u7b97\u6cd5\u5d4c\u5957\u8d77\u6765</li> </ol> </li> <li>\u82e5 \\(T(n)\\) \u662f\u5173\u4e8en\u7684k\u9636\u591a\u9879\u5f0f\uff0c\u90a3\u4e48 \\(T(n)= \\Theta (n^k)\\)</li> <li>\u4e00\u4e2afor\u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7b49\u4e8e\u5faa\u73af\u6b21\u6570\u4e58\u4ee5\u5faa\u73af\u4f53\u4ee3\u7801\u7684\u590d\u6742\u5ea6</li> <li>if-else\u7ed3\u6784\u7684\u590d\u6742\u5ea6\u53d6\u51b3\u4e8eif\u7684\u6761\u4ef6\u5224\u65ad\u590d\u6742\u5ea6\u548c\u4e24\u4e2a\u5206\u652f\u90e8\u5206\u7684\u590d\u6742\u5ea6\uff0c\u603b\u4f53\u590d\u6742\u5ea6\u53d6\u4e09\u8005\u4e2d\u6700\u5927</li> </ol>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#checking-your-analysis","title":"Checking Your Analysis","text":"<ol> <li> <p>Method 1</p> <ol> <li>When \\(T(N) = O(N)\\), check if $T(2N)/T(N)\\approx 2 $</li> <li>When \\(T(N) = O(N^2)\\), check if $T(2N)/T(N)\\approx 4 $</li> <li>When \\(T(N) = O(N^3)\\), check if $T(2N)/T(N)\\approx 8 $</li> <li>\u00b7\u00b7\u00b7</li> </ol> </li> <li> <p>Method 2</p> <ol> <li>When \\(T(N) = O(f(N))\\), check if \\(\\lim\\limits_{N\\rightarrow\\infty}\\frac{T(N)}{f(N)} \\approx Constant\\)</li> </ol> </li> </ol> <p>Info</p> <p>\u4e00\u4e2a\u5206\u6790\u590d\u6742\u5ea6\u7684\u65b9\u6cd5</p>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#master","title":"\u4e3b\u5b9a\u7406 | Master","text":""},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_8","title":"\u4ecb\u7ecd","text":"<p>Master\u5b9a\u7406\uff0c\u53c8\u79f0\u4e3b\u5b9a\u7406\uff0c\u7528\u4e8e\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\uff08\u5e38\u7528\u4e8e\u9012\u5f52\u8c03\u7528\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff09</p>"},{"location":"Course/FDS/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_9","title":"\u7528\u6cd5","text":"<p>\u9012\u5f52\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5f62\u5982\uff1a</p> <ol> <li>\\(T(n) = O(1), n = 1\\)</li> <li>\\(T(n) = aT(\\frac{n}{b}) + f(n) , n &gt; 1\\)</li> </ol> <p>\u5176\u4e2d\uff0c\\(a \\ge 1; b &gt; 1 ;\\)\\(f(n)\\) \u8868\u793a\u4e0d\u53c2\u4e0e\u9012\u5f52\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6, \u89c4\u5b9a \\(C_{crit}=log_ba\\)</p> <p>\u7b2c\u4e8c\u6761\u516c\u5f0f\u8868\u793a\uff1a\u5c06\u4e00\u4e2a\u89c4\u6a21\u4e3an\u7684\u95ee\u9898\u5206\u4e3a \\(a\\) \u4e2a\u89c4\u6a21\u4e3a \\(\\frac{n}{b}\\) \u5b50\u95ee\u9898\uff0c\u6bcf\u6b21\u9012\u5f52\u5c06\u5e26\u6765 \\(f(n)\\) \u7684\u989d\u5916\u8ba1\u7b97\uff0c\u7136\u540e\u901a\u8fc7\u5bf9\u8fd9 \\(a\\) \u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u7684\u7efc\u5408\uff0c\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3</p> <p>\u90a3\u4e48\u6709\uff1a</p> <ol> <li> <p>\u5f53\\(f(n) = O(n^c)\\)\uff0c\u4e14\\(c &lt; C_{crit}\\)\u65f6\u6709\uff1a \\(T(n) = \\Theta(n^{C_{crit}})\\)</p> <p>eg\uff1a \\(T(n) = 8T(\\frac{n}{2}) + 1000n^2\\) \u6b64\u65f6\\(a=8, b=2, f(n)=1000n^2\\) \\(c=2&lt;3=log_ba=C_{crit}\\) \u6545 \\(T(n)=\\Theta(n^3)\\)</p> </li> <li> <p>\u5f53\\(f(n)=O(n^c)\\), \u4e14\\(c &gt; C_{crit}\\)\u65f6\u6709\uff1a\\(T(n)=\\Theta(f(n))\\)</p> </li> </ol> <p>e.g. \\(T(n) = 2T(\\frac{n}{2}) + n^2\\) \u6b64\u65f6\\(a=2, b=2, f(n)=n^2\\) \\(c=2 &gt; 1=log_ba=C_{crit}\\) \u6545\\(T(n)=\\Theta(n^2)\\)</p> <ol> <li>\u5f53\\(f(n)=O(n^c)\\), \u4e14\\(c=C_{crit}\\)\u65f6\uff1a\\(T(n)=\\Theta(n^clog~n)\\)</li> <li>\u82e5\u5b58\u5728\u975e\u8d1f\u6574\u6570\\(k\\)\uff0c\u4f7f\u5f97\\(f(n)=\\Theta(n^{C_{crit}}log_kn)\\)\uff0c\u90a3\u4e48\\(T(n)=\\Theta(n^{C_{crit}}log_{k+1}n)\\)</li> </ol> <p>\u53c2\u8003\uff1a 1. \u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5 - \u4ee3\u7956\u534e - \u535a\u5ba2\u56ed&lt;&gt; 2. Master\u5b9a\u7406\u5b66\u4e60\u7b14\u8bb0 - water_mi - \u535a\u5ba2\u56ed</p>"},{"location":"Course/System/Lec01_Introduction/","title":"Introduction","text":"<ul> <li>Introduction<ul> <li>Interrupts and Traps</li> <li>Interrupt Handling</li> <li>Interrupt-drive I/O Cycle</li> <li>I/O: from System Call to Devices, and Back</li> <li>Direct Memory Access | DMA</li> <li>Storage Structure</li> <li>Storage Hierarchy<ul> <li>Performance of Storages</li> </ul> </li> <li>Caching</li> <li>MUltiprocessor Systems<ul> <li>Symmetric Multiprocessing Architecture</li> <li>NUMA</li> <li>Clustered Systems</li> <li>Distributed Systems</li> <li>Special-Purpose Systems</li> <li>Dual-mode operation**</li> <li>Transition between Modes</li> <li>Timer</li> <li>Process | \u8fdb\u7a0b<ul> <li>Resource Management: Process Management</li> <li>Process Management Activities</li> </ul> </li> <li>Thread | \u7ebf\u7a0b<ul> <li>From Process to Thread</li> </ul> </li> <li>Resource Management: Memory Management | \u5185\u5b58\u7ba1\u7406</li> <li>Resource Management: File Systems | \u6587\u4ef6\u7cfb\u7edf</li> <li>Resource Management: I/O System Management</li> <li>Separate Policy and Mechanism</li> <li>Virtualization</li> </ul> </li> <li>Three pieces\u4e2d\u7684Introduction<ul> <li>What happens when a program runs?</li> <li>All about Virtualization</li> <li>Virtualizing The CPU</li> <li>Virtualizing Memory</li> <li>Concurrency | \u5e76\u53d1</li> <li>I/O</li> </ul> </li> </ul> </li> </ul> <p>Introduction\u57fa\u672c\u662f\u7cfb\u7edf\u2161\u4e2d\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u90e8\u5206\u8bfe\u4e0a\u8981\u8bb2\u7684\u5185\u5bb9</p>"},{"location":"Course/System/Lec01_Introduction/#interrupts-and-traps","title":"Interrupts and Traps","text":"<ul> <li>Interrupt transfers control to the interrupt service routine </li> <li> <p>interrupt vector: a table containing addresses of all the service routines</p> </li> <li> <p>incoming interrupts are disabled while serving another interrupt to prevent a lost interrupt</p> </li> <li> <p>interrupt handler must save the (interrupted) execution states</p> </li> <li> <p>A trap is a software-generated interrupt, caused either by an error or a user request</p> </li> </ul> <p>error-&gt;\u6bd4\u5982\u9664\u6cd5\u6307\u4ee4\u88ab\u9664\u6570\u662f0\uff0cuser request-&gt;\u7528\u6237\u663e\u5f0f\u4ea7\u751f\u7684trap\u6bd4\u5982\u7cfb\u7edf\u8c03\u7528\uff0csvc\u6307\u4ee4\u7b49</p> <ul> <li> <p>an interrupt is asynchronous; a trap is synchronous</p> </li> <li> <p>e.g., system call, divided-by-zero exception, general protection exception\u2026</p> </li> <li> <p>Operating systems are usually interrupt-driven(\u6709\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u76f8\u5e94I/O\u4e2d\u65ad\u7b49\u7b49)</p> </li> </ul> <p>\u7528\u6237\u6001\u7684\u7a0b\u5e8f\u4e0d\u5141\u8bb8\u76f4\u63a5\u64cd\u63a7\u78c1\u76d8\u63a7\u5236\u5668\uff0c\u4f46\u53c8\u9700\u8981\u8bfb\u53d6\u5176\u4e2d\u7684\u6587\u4ef6\uff0c\u4f1a\u901a\u8fc7\u8fd0\u884c\u5728\u7279\u6743\u6001\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u64cd\u4f5c\uff08\u7cfb\u7edf\u8c03\u7528\uff09</p>"},{"location":"Course/System/Lec01_Introduction/#interrupt-handling","title":"Interrupt Handling","text":"<ul> <li> <p>Operating system preserves the execution state of the CPU</p> </li> <li> <p>save registers and the program counter (PC)</p> <p>\u4fdd\u5b58\u4e0a\u4e0b\u6587\u2014\u2014\u5bc4\u5b58\u5668\u548cPC\uff08\u4fdd\u5b58\u5230\u5185\u5b58\uff09</p> </li> <li> <p>OS determines which device caused the interrupt</p> </li> </ul> <ol> <li> <p>polling </p> <p>polling\u65b9\u5f0f\u7684\u4e2d\u65ad\uff0c\u4e0d\u8bba\u4ec0\u4e48\u7c7b\u578b\u4e2d\u65ad\u90fd\u4f1a\u5747\u4e3a\u8df3\u8f6c\u5230\u4e00\u4e2a\u7edf\u4e00\u7684\u5165\u53e3\uff0c\u7136\u540e\u7531\u8f6f\u4ef6\u53bb\u67e5\u8be2\u5bc4\u5b58\u5668\u4ece\u800c\u77e5\u9053\u4e2d\u65ad\u7684\u6765\u6e90</p> </li> <li> <p>vectored interrupt system</p> <p>\u786c\u4ef6\u5df2\u7ecf\u56fa\u5b9a\u597d\uff08\u533a\u5206\u597d\u4e2d\u65ad\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u8f6f\u4ef6\u518d\u53bb\u67e5\u8be2\uff09\uff0c\u4f1a\u76f4\u63a5\u8df3\u8f6c\u5230\u5bf9\u5e94\u5730\u5740</p> </li> </ol> <ul> <li>OS handles the interrupt by calling the device\u2019s driver\uff08\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff09</li> </ul> <p>\u5b8f\u5185\u6838\u7684\u91cd\u8981\u7ec4\u4ef6\u3002\u800c\u5bf9\u4e8e\u5fae\u5185\u6838\uff0c\u5f80\u5f80\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u653e\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u8303\u56f4\u5916\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u5e38\u5c06\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u7684\u5927\u90e8\u5206\u4ee3\u7801\u79fb\u5230\u7528\u6237\u6001\u3002</p> <ul> <li>OS restores the CPU execution to the saved state</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#interrupt-drive-io-cycle","title":"Interrupt-drive I/O Cycle","text":"<p>to be continued</p> <p></p> <ul> <li><code>device driver initiates I/O</code>\u662f\u901a\u8fc7<code>MMIO</code>|<code>Memory Map I/O</code>\u7684\u65b9\u5f0f\uff0c\u5b9e\u9645\u662f\u901a\u8fc7<code>STORE</code>\u6307\u4ee4\u53bb\u64cd\u4f5c\u5916\u8bbe\u7684\u4e2d\u65ad\u63a7\u5236\u5668\u7684\u5730\u5740\uff1b</li> <li>\u56e0\u4e3ainitiates I/O\uff0c\u5199\u78c1\u76d8\u662f\u5f88\u6162\u7684\u8fc7\u7a0b\uff0cCPU\u4e0d\u4f1a\u4e00\u76f4\u7b49\u5230I/O\u8bf7\u6c42\u5b8c\u6210\uff0c\u5f53\u78c1\u76d8\u5199\u5b8c\u540e\u4f1a\u6709\u56fe\u4e2d<code>4</code>\u4ee5Interrupt\u7684\u5f62\u5f0f\u544a\u8bc9CPU\uff08\u4e2d\u65ad\u63a7\u5236\u5668\u786c\u8fde\u7ebf\u7684\u65b9\u5f0f\uff09</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#io-from-system-call-to-devices-and-back","title":"I/O: from System Call to Devices, and Back","text":"<ul> <li>A program uses a system call to access system resources</li> <li>e.g., files, network</li> <li> <p>Operating system converts it to device access and issues I/O requests</p> </li> <li> <p>I/O requests are sent to the device driver, then to the controller</p> </li> <li> <p>e.g., read disk blocks, send/receive packets\u2026</p> </li> <li> <p>OS puts the program to wait (synchronous I/O) or returns to it without waiting (asynchronous I/O)</p> </li> <li> <p>OS may switches to another program when the requester is waiting</p> <p>\u5373\u4f7f\u662f\u540c\u6b65I/O, CPU\u4e5f\u4e0d\u662f\u76f2\u76ee\u7b49\u5f85\u72b6\u6001\u3002\u67d0\u4e00\u8fdb\u7a0b\u963b\u585e\u65f6\uff0cCPU\u53ef\u4ee5\u8c03\u5ea6\u53e6\u4e00\u8fdb\u7a0b</p> </li> <li> <p>I/O completes and the controller interrupts the OS</p> </li> <li> <p>OS processes the I/O, and then wakes up the program (synchronous I/O) or send its a signal (asynchronous I/O)</p> </li> </ul> <p>\u4e00\u79cd\u81ea\u4e0a\u800c\u4e0b\uff0c\u4e00\u79cd\u81ea\u4e0b\u800c\u4e0a</p>"},{"location":"Course/System/Lec01_Introduction/#direct-memory-access-dma","title":"Direct Memory Access | DMA","text":"<ul> <li>DMA is used for high-speed I/O devices able to transmit information at close to memory speeds </li> <li> <p>e.g., Ethernet, hard disk, cd rom\u2026</p> </li> <li> <p>Device driver sends an I/O descriptor the controller</p> </li> <li> <p>I/O descriptor: operation type (e.g., send/receive), memory address\u2026</p> </li> <li> <p>The controller transfers blocks of data between its local buffer and main memory without CPU intervention(\u63d0\u9ad8\u6548\u7387)</p> </li> </ul> <p>CPU\u4f1a\u544a\u8bc9\u663e\u5361\u9700\u8981\u7684\u6570\u636e\u8d77\u59cb\u5730\u5740\u5728\u54ea\uff0c\u6709\u591a\u957f\uff0c\u968f\u540e\u7531DMA\u642c\u8fd0\u6570\u636e\u3002\u642c\u8fd0\u7ed3\u675f\u4f1a\u901a\u8fc7\u786c\u4e2d\u65ad\u7684\u65b9\u5f0f\u544a\u8bc9CPU</p> <ul> <li>only one interrupt is generated when whole I/O request completes</li> </ul> <p>\u78c1\u76d8\u63a7\u5236\u5668\u5206\u4e3a\u5e38\u89c1\u7684HDD\u548cSSD</p>"},{"location":"Course/System/Lec01_Introduction/#storage-structure","title":"Storage Structure","text":"<ul> <li>Main memory: the only large storage that CPU can directly access</li> <li> <p>random access, and typically volatile</p> </li> <li> <p>Secondary storage: large nonvolatile storage capacity</p> </li> <li> <p>Magnetic disks are most common second-storage devices (HDD)\uff08\u7cfb\u7edf\u2162\uff09</p> <ul> <li>rigid metal or glass platters covered with magnetic recording material </li> </ul> </li> <li> <p>disk surface is logically divided into tracks and sectors</p> </li> <li> <p>disk controller determines the interaction between OS and the device</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#storage-hierarchy","title":"Storage Hierarchy","text":"<ul> <li>Storage systems can be organized in hierarchy</li> <li>speed</li> <li>cost</li> <li>volatility</li> </ul> <ul> <li>Caching: copying information into faster storage system</li> <li>main memory can be viewed as a cache for secondary storage</li> <li>CPU has a cache for main memory</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#performance-of-storages","title":"Performance of Storages","text":"Level 1 2 3 4 Name register cache main memory disk storage Typical size &lt; 1 KB &gt; 16 MB &gt; 16 GB &gt; 100 GB Implementation technology custom memory with multiple ports, CMOS on-chip or off-chip CMOS SRAM CMOS DRAM magnetic disk Access time(ns) 0.25-0.5 0.5-25 80-250 5,000.000 Bandwidth(MB/sec) 20,000-100,000 5000-10,000 1000-5000 20-150 Managed by compiler hardware operating system operating system Backed by cache main memory disk CD or tape"},{"location":"Course/System/Lec01_Introduction/#caching","title":"Caching","text":"<ul> <li>Caching is an important principle, performed at many levels</li> <li>e.g., in hardware, operating system, user program\u2026</li> <li>Caching: data in use copied from slower to faster storage temporarily</li> <li> <p>faster storage (cache) is checked first to determine if data is there</p> </li> <li> <p>if it is, data is used directly from the cache (fast)</p> </li> <li> <p>if not, data is first copied to cache and used there</p> </li> <li>Cache is usually smaller than storage being cached</li> <li>Cache management is an important design problem</li> <li>e.g., cache size and replacement policy</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#multiprocessor-systems","title":"MUltiprocessor Systems","text":"<ul> <li> <p>Most old systems have one single general-purpose processor</p> </li> <li> <p>e.g., smartphone, PC, server, mainframe</p> </li> <li> <p>most systems also have special-purpose processors as well</p> </li> <li> <p>Multiprocessor systems have grown in use and importance</p> </li> <li> <p>also known as parallel systems, tightly-coupled systems</p> </li> <li> <p>advantages: increased throughput, economy of scale, increased reliability \u2013 graceful degradation or fault tolerance</p> </li> <li> <p>two types: asymmetric multiprocessing and symmetric multiprocessing (SMP)</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#symmetric-multiprocessing-architecture","title":"Symmetric Multiprocessing Architecture","text":"<p>\u5404CPU\u6709\u540c\u7b49\u5730\u4f4d</p> <p></p>"},{"location":"Course/System/Lec01_Introduction/#numa","title":"NUMA","text":"<ul> <li>Non-Uniform Memory Access System</li> <li>Access local memory is fast, scale well</li> </ul> <p>\u6bcf\u4e2aCPU\u6709\u81ea\u5df1\u7684memory\uff0c\u4f46\u6240\u6709\u7684memory\u662f\u7edf\u4e00\u7f16\u5236\u7684\uff0c\u5373CPU\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709memory</p> <p></p>"},{"location":"Course/System/Lec01_Introduction/#clustered-systems","title":"Clustered Systems","text":"<ul> <li>Multiple systems work together through high-speed network</li> <li> <p>usually sharing storage via a storage-area network (SAN)</p> </li> <li> <p>Clusters provide a high-availability service that can survive failures</p> </li> <li>asymmetric clustering has one machine in hot-standby mode</li> <li> <p>symmetric clustering has multiple nodes running applications, monitoring each other</p> </li> <li> <p>Some clusters are designed for high-performance computing (HPC)</p> </li> <li>applications must be written to use parallelization</li> </ul> <p></p>"},{"location":"Course/System/Lec01_Introduction/#distributed-systems","title":"Distributed Systems","text":"<ul> <li> <p>A collection of separate, possibly heterogeneous, systems inter-connected through networks</p> </li> <li> <p>Network OS allows systems to exchange messages</p> </li> <li> <p>A distributed system creates the illusion of a single system</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#special-purpose-systems","title":"Special-Purpose Systems","text":"<ul> <li>Real-time embedded systems most prevalent form of computers</li> <li>vary considerably</li> <li>use special purpose (limited purpose) real-time OS</li> </ul> <p>\u8f6f\u5b9e\u65f6\uff1a\u4e0d\u4e25\u683c\u5728\u56fa\u5b9a\u65f6\u95f4\u5b8c\u6210\uff0c\u786c\u5b9e\u65f6\uff08\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u65e0\u5d4c\u5957\uff09\uff1a\u4e25\u683c\u6309\u7167\u8981\u6c42\u5728\u56fa\u5b9a\u65f6\u95f4\u5b8c\u6210\uff08\u4e0d\u591a\u4e0d\u5c11\uff09</p> <ul> <li>Multimedia systems</li> <li> <p>streams of data must be delivered according to time restrictions</p> </li> <li> <p>Handheld systems</p> </li> <li> <p>e.g., PDAs, smart phones</p> </li> <li> <p>limited CPU (?), memory(?), and power</p> </li> <li> <p>used to use reduced feature OS (?)</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#dual-mode-operation","title":"Dual-mode operation**","text":"<ul> <li>Operating system is usually interrupt-driven </li> <li> <p>Efficiency, regain control (timer interrupt)</p> </li> <li> <p>Dual-mode operation allows OS to protect itself and other system components</p> </li> <li> <p>user mode and kernel mode (or other names)</p> </li> <li> <p>a mode bit distinguishes when CPU is running user code or kernel code</p> </li> <li> <p>some instructions designated as privileged, only executable in kernel</p> </li> <li> <p>system call changes mode to kernel, return from call resets it to user</p> </li> </ul> <ol> <li> <p>\u5206\u4e3a\u4e24\u4e2a\u6a21\u5f0f\u662f\u4e3a\u4e86\u9694\u79bb\uff0c\u9632\u6b62\u7528\u6237\u6001\u7a0b\u5e8f\u53bb\u5e72\u6270\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u6570\u636e\u6216\u6570\u636e\u7ed3\u6784\u3002</p> </li> <li> <p>\u5e38\u7528MMU\u90e8\u4ef6\uff08Memory Management Unit | \u5185\u5b58\u7ba1\u7406\u5355\u5143\uff09\u6765\u6307\u5b9a\u5f53CPU\u8fd0\u884c\u5728\u7279\u6743\u6001\u65f6\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u5728\u7528\u6237\u6001\u4e0b\u53ea\u80fd\u8bbf\u95ee\u6709\u9650\u7a7a\u95f4\u8fbe\u5230\u4e8c\u8005\u7684\u9694\u79bb</p> </li> <li>\u90e8\u5206\u6307\u4ee4\u5fc5\u987b\u5728\u7279\u6743\u6001\u4e0b\u8fd0\u884c\uff0c\u6bd4\u5982\u5173\u95ed\u4e2d\u65ad\uff0c\u6253\u5f00\u4e2d\u65ad\u3001\u914d\u7f6eMMU\u7684\u6307\u4ee4</li> </ol>"},{"location":"Course/System/Lec01_Introduction/#transition-between-modes","title":"Transition between Modes","text":"<ul> <li>System calls, exception, interrupts cause transitions between kernel/user modes</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#timer","title":"Timer","text":"<ul> <li> <p>Timer used to prevent infinite loop or process hogging resources</p> </li> <li> <p>to enable a timer, set the hardware to interrupt after some period </p> </li> <li> <p>OS sets up a timer before scheduling process to regain control</p> <ul> <li> <p>the timer for scheduling is usually periodical(e.g., 250HZ)</p> </li> <li> <p>tickless kernel: on-demand timer interrupts(Linux)</p> </li> </ul> </li> </ul> <p>\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u6700\u5c0f\u5355\u5143\uff0c\u7ebf\u7a0b\u662f\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u5143</p>"},{"location":"Course/System/Lec01_Introduction/#process","title":"Process | \u8fdb\u7a0b","text":"<p>Process is the unit of resource allocation</p>"},{"location":"Course/System/Lec01_Introduction/#resource-management-process-management","title":"Resource Management: Process Management","text":"<ul> <li> <p>A process is a program in execution</p> </li> <li> <p>program is a passive entity, process is an active entity</p> </li> <li> <p>a system has many processes running concurrently</p> </li> </ul> <p>\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u662f\u9694\u79bb\u7684\uff0c\u5373\u4f7f\u662f\u540c\u4e00\u4e2aprogram\u52a0\u8f7d\u7684\u8fdb\u7a0b</p> <ul> <li> <p>Process needs resources to accomplish its task</p> </li> <li> <p>OS reclaims all reusable resources upon process termination</p> </li> <li> <p>e.g., CPU, memory, I/O, files, initialization data</p> </li> <li> <p>\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u6700\u5c0f\u5355\u5143\uff0c\u7ebf\u7a0b\u662f\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u5143</p> </li> </ul> <p>\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4f1a\u7ba1\u7406\u5206\u914d\u7ed9\u6bcf\u4e00\u4e2a\u5185\u6838\u7684CPU\u8d44\u6e90\u3001memory\u8d44\u6e90\u3001I/O\u8d44\u6e90\u2026\u2026\u662f\u901a\u8fc7\u5206\u65f6\u590d\u7528\u7684\u65b9\u5f0f\uff0c\u65f6\u95f4\u7247\u8f6e\u8f6c\uff0c\u6bcf\u4e00\u4e2aprocess\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u5c31\u5f00\u59cb\u6839\u636e\u4f18\u5148\u7ea7\u8c03\u5ea6</p>"},{"location":"Course/System/Lec01_Introduction/#process-management-activities","title":"Process Management Activities","text":"<ul> <li> <p>Process creation and termination | \u521b\u5efa\u548c\u4e2d\u6b62</p> </li> <li> <p>Processes suspension and resumption | \u6682\u505c\u548c\u6062\u590d</p> </li> <li> <p>Process synchronization primitives | \u540c\u6b65</p> </li> <li> <p>Process communication primitives | \u901a\u4fe1</p> </li> <li> <p>Deadlock handling | \u6b7b\u9501</p> </li> </ul> <p>\u5728\u786c\u4ef6\u5c42\u9762\uff0c\u4e0d\u540c\u7684<code>cpu core</code>\u4e0a\u6709\u4e0d\u540c\u7684<code>register set | \u5bc4\u5b58\u5668\u96c6\u5408</code>\uff1b</p> <p>\u540c\u65f6\uff0c\u4e0d\u540c<code>cpu core</code>\u4e0a\u4e2d\u65ad\u4e5f\u662f\u5355\u72ec\u7684\uff0c\u5373\u6bcf\u4e2acore\u90fd\u53ef\u4ee5\u54cd\u5e94\u4efb\u4f55\u6743\u9650\u5185\u7684\u4e2d\u65ad\u3002</p>          \u8003 \u8bd5 &amp; \u8003 \u7814 \u91cd \u70b9\uff1a\u8fdb \u7a0b \u72b6 \u6001 \u7684 \u5207 \u6362               \u8be6\u7ec6\u72b6\u6001\u5207\u6362\u540e\u8bae      <p></p>"},{"location":"Course/System/Lec01_Introduction/#thread","title":"Thread | \u7ebf\u7a0b","text":""},{"location":"Course/System/Lec01_Introduction/#from-process-to-thread","title":"From Process to Thread","text":"<ul> <li> <p>Single-threaded process has one program counter </p> </li> <li> <p>program counter specifies location of next instruction to execute</p> </li> <li> <p>processor executes instructions sequentially, one at a time, until completion</p> </li> </ul> <p>\u7ebf\u7a0b\u4e4b\u95f4\u662f\u4e0d\u9694\u79bb\u7684</p> <ul> <li> <p>Multi-threaded process has one program counter per thread</p> </li> <li> <p>Quiz: What are the benefits of using thread instead of process?</p> </li> </ul> <p>\u4e0d\u540c\u7684\u8fdb\u7a0b\u95f4\u8981\u5171\u4eab\u6570\u636e\uff0c\u5982\u679c\u662f\u7ebf\u7a0b\u95f4\u5171\u4eab\uff0c\u90a3\u6570\u636e\u4f1a\u5f88\u5e9e\u5927\uff1b</p> <p>\u5f15\u5165\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u53ef\u4ee5\u88ab\u8c03\u5ea6\uff0c\u53ea\u9700\u8981load/store\u518d\u5b9e\u73b0\u540c\u6b65\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5171\u4eab\u3002</p> <ul> <li>\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u4e86memory\u3001global data\u3001heap\uff1b\u4e0d\u5171\u4eabstack</li> <li>\u6bcf\u4e2a\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684\u6808\u548cPC</li> <li>\u7ebf\u7a0b\u548c\u7ebf\u7a0b\u7684\u6808\u4e0d\u662f\u9694\u79bb\u7684\uff0c\u662f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#resource-management-memory-management","title":"Resource Management: Memory Management | \u5185\u5b58\u7ba1\u7406","text":"<ul> <li> <p>Memory is the main storage directly accessible to CPU </p> </li> <li> <p>data needs to be kept in memory before and after processing</p> </li> <li> <p>all instructions should be in memory in order to execute</p> </li> <li> <p>Memory management determines what is in memory to optimize CPU utilization and response time, provides a virtual view of memory for programmer</p> </li> <li> <p>Memory management activities:</p> </li> <li> <p>keeping track of which parts of memory are being used and by whom</p> </li> <li> <p>deciding which processes and data to move into and out of memory</p> </li> <li> <p>allocating and deallocating memory space as needed</p> </li> </ul> <p>\u7ba1\u7406CPU\uff0c\u7ba1\u7406Memory\uff0c\u505a\u597d\u540c\u6b65\u5360\u53bb\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u5927\u90e8\u5206\u5de5\u4f5c</p>"},{"location":"Course/System/Lec01_Introduction/#resource-management-file-systems","title":"Resource Management: File Systems | \u6587\u4ef6\u7cfb\u7edf","text":"<ul> <li> <p>\u4ecb\u7ecd\u8f83\u5c11,\u7cfb\u7edf\u2162</p> </li> <li> <p>\u5c06\u5e73\u65f6\u6240\u4f7f\u7528\u7684\u53ef\u89c6\u5316\u7684\u6587\u4ef6\u8def\u5f84\u6620\u5c04\u5230\u7269\u7406\u5b58\u50a8\u4ecb\u8d28\u4e0a</p> </li> </ul> <ul> <li> <p>OS provides a uniform, logical view of data storage</p> </li> <li> <p>file is a logical storage unit that abstracts physical properties</p> <ul> <li> <p>files are usually organized into directories(\u76ee\u5f55)</p> </li> <li> <p>access control determines who can access the file</p> </li> </ul> </li> <li> <p>File system management activities:</p> </li> <li> <p>creating and deleting files and directories</p> </li> <li> <p>primitives to manipulate files and directories</p> </li> <li> <p>mapping files onto secondary storage</p> </li> <li> <p>backup files onto stable (non-volatile) storage media</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#resource-management-io-system-management","title":"Resource Management: I/O System Management","text":"<p>\u5e2e\u52a9\u7528\u6237\u6001\u7a0b\u5e8f\u548c\u5916\u8bbe\u6253\u4ea4\u9053</p> <ul> <li> <p>I/O subsystem hides peculiarities of hardware devices from the user</p> </li> <li> <p>I/O subsystem is responsible for:</p> </li> <li> <p>manage I/O memory</p> <ul> <li> <p>buffering: to store data temporarily while it is being transferred</p> </li> <li> <p>caching: to store parts of data in faster storage for performance</p> </li> <li> <p>spooling: the overlapping of output of one job with input of other jobs</p> </li> </ul> </li> <li> <p>OS May provide general device-driver interfaces(\u6bcf\u4e00\u7c7b\u8bbe\u5907\u90fd\u6709\u5bf9\u5e94\u7684\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f)</p> </li> <li> <p>good for programmers: object-oriented design pattern</p> </li> <li> <p>bad from the security perspective: function pointers are heavily used</p> </li> </ul> <p></p>"},{"location":"Course/System/Lec01_Introduction/#separate-policy-and-mechanism","title":"Separate Policy and Mechanism","text":"<ul> <li>Mechanism(\u673a\u5236): how question about a system | \u600e\u4e48\u5b9e\u73b0</li> <li>How does an operating system performs a context switch</li> </ul> <p>\u4e0d\u540c\u7684\u8c03\u5ea6\u5668\u5b9e\u73b0\u4e0d\u540c\u7684Policy</p> <ul> <li>Policy(\u7b56\u7565): which question </li> <li> <p>Which process should the process to be switched</p> </li> <li> <p>Any other examples about mechanism &amp; policy?</p> </li> <li> <p>Advantages &amp; Disadvantages</p> </li> <li>Advantages of separation:<ul> <li>\u589e\u52a0\u6574\u4e2a\u7684\u7075\u6d3b\u6027.</li> </ul> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#virtualization","title":"Virtualization","text":"<ul> <li>Abstract the hardware of a single computer (CPU/Memory/IO \u2026) into different environments</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#three-piecesintroduction","title":"Three pieces\u4e2d\u7684Introduction","text":""},{"location":"Course/System/Lec01_Introduction/#what-happens-when-a-program-runs","title":"What happens when a program runs?","text":"<ul> <li>Execute instructions (obviously)</li> <li> <p>fetch, decode, and execute</p> </li> <li> <p>Others things are happening in the backend</p> </li> <li> <p>make the program to run</p> </li> <li> <p>allow many programs to use/share memory</p> </li> <li> <p>allow may programs to interact with devices</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#all-about-virtualization","title":"All about Virtualization","text":"<ul> <li> <p>Virtualization</p> </li> <li> <p>OS transforms the physical resources into easy-to-use virtual form</p> </li> <li> <p>Interaction: system calls - interfaces between program and OS</p> </li> <li> <p>Managing: resources manager</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#virtualizing-the-cpu","title":"Virtualizing The CPU","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/time.h&gt;\n#include &lt;assert.h&gt;\n#include \"common.h\"\nint main(int argc, char *argv[])\n{\nif(argc != 2)\n{\nfprintf(stderr, \"usage: cpu &lt;string&gt;\\n\");\nexit(1);\n}\nchar *str = argv[1];\nwhile(1)\n{\nSpin(1);\nprintf(\"%s\\n\", str);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System/Lec01_Introduction/#virtualizing-memory","title":"Virtualizing Memory","text":"<pre><code>#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include \"common.h\"\nint main(int argc, char *argv[])\n{\nint *p = malloc(sizeof(int));\nassert(p != NULL);\nprintf(\"(%d) memory address of p: %08x\\n\", getpid(), (unsigned) p);\n/* getpid\u7cfb\u7edf\u8c03\u7528,\u6253\u5370\u5f53\u524d\u8fd0\u884c\u7a0b\u5e8f\u5bf9\u5e94\u7684\u8fdb\u7a0b\u53f7 */\n*p = 0;\nwhile(1)\n{\nSpin(1);\n*p = *p + 1;\nprintf(\"(%d) p: %d\\n\", getpid(), *p);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System/Lec01_Introduction/#concurrency","title":"Concurrency | \u5e76\u53d1","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include\"common.h\"\nvolatile int counter = 0;\nint loops;\nvoid *worker(void *arg) {\nint i;\nfor(i = 0; i &lt; loops; i++) {\ncounter++;\n}\nreturn NULL;\n}\nint main(int argc, char *argv[])\n{\nif(argc != 2)\n{\nfprintf(stderr, \"usage: threads &lt;value&gt;\\n\");\nexit(1);\n}\nloops = atoi(argv[1]);\npthread_t p1, p2;\nprintf(\"Initial value : %d\\n\", counter);\nPthread_create(&amp;p1, NULL, worker, NULL);\nPthread_create(&amp;p2, NULL, worker, NULL);\nPthread_join(p1, NULL);\nPthread_join(p2, NULL);\nprintf(\"Final value : %d\\n\", counter);\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System/Lec01_Introduction/#io","title":"I/O","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/types.h&gt;\nint main(int argc, char *argv[])\n{\nint fd = open(\"/tmp/file\", O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU);\nassert(fd &gt; -1);\nintrc = write(fd, \"hello world\\n\", 13);\nassert(rc == 13);\nclose(fd);\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System/Perface/","title":"Perface","text":"<p>Abstract</p> <p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u2161\u662fZJU\u8ba1\u7b97\u673a\u7cfb\u7edf\u7cfb\u5217\u8bfe\u7a0b\u4e4b\u4e00\uff0c\u5305\u62ec\u8ba1\u7ec4\u540e\u534a\u90e8\u5206\u548c\u64cd\u4f5c\u7cfb\u7edf\u524d\u534a\u90e8\u5206\u5185\u5bb9</p>"}]}