{"config":{"lang":["ja"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"Hello","text":"<p>\ud83d\udcac\u8fd9\u91cc\u662f\u67d0\u5170 | Enl_Z\u7684\u7b14\u8bb0\u672c\uff0c\u6709\u4e00\u4e9b\u8bfe\u7a0b\u7b14\u8bb0\u6216\u8005\u5b66\u4e60\u8bb0\u5f55\uff1b</p> <p>\ud83d\udcac\u5176\u4f59\u8f83\u6742\u7684\u5185\u5bb9\uff08\u8bf8\u5982\u5b66\u4e60\u603b\u7ed3\u4e00\u7c7b\u7684\uff09\u6b22\u8fce\u5927\u5bb6\u5230\u6211\u7684Blog</p> <p>Info</p> <p>\u56e0\u4e3a\u8bb0\u6027\u4e0d\u597d\uff0c\u7b14\u8bb0\u5185\u5bb9\u6574\u7406\u8f83\u4e3a\u7e41\u7410\u3002 \u800c\u4e14\u80fd\u529b\u6709\u9650\uff0c\u5927\u5676\u9009\u62e9\u6027\u770b\u770b\u53ed~</p> <p>Warning</p> <p>\u7f51\u7ad9\u8fd8\u6ca1\u5b8c\u5168\u5b8c\u5584\uff0c\u4f1a\u51fa\u73b0\u90e8\u5206\u6e32\u67d3\u9519\u8bef</p>"},{"location":"Course/FDS/","title":"Perface","text":"<p>Abstract</p> <p>ZJU\u201cFDS(\u6570\u636e\u7ed3\u6784\u57fa\u7840)\u201c\u8bfe\u7a0b\u76f8\u5173\u7b14\u8bb0</p> <p>To Be Continued</p>"},{"location":"Course/FDS/Lec01/","title":"\u7b97\u6cd5\u5206\u6790\u548c\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":""},{"location":"Course/FDS/Lec01/#perface","title":"Perface","text":"<ul> <li>clock()\uff1a\u6355\u6349\u4ece\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u5230clock()\u88ab\u8c03\u7528\u6240\u8017\u8d39\u7684\u65f6\u95f4\u3002</li> <li>\u8fd9\u4e2a\u65f6\u95f4\u5355\u4f4d\u662fclock tick\uff0c\u5373\u201d\u65f6\u949f\u6253\u70b9\u201c\u3002</li> <li>\u5e38\u6570CLK_TCK\uff1a\u673a\u5668\u65f6\u949f\u6bcf\u79d2\u6240\u8d70\u7684\u65f6\u949f\u6253\u70b9\u6570\u3002</li> </ul> Note <pre><code>      clock_t start, stop;\n/* clock_t \u662f clock()\u51fd\u6570\u8fd4\u56de\u7684\u53d8\u91cf\u7c7b\u578b */\ndouble duration;\n/* \u8bb0\u5f55\u88ab\u6d4b\u51fd\u6570\u8fd0\u884c\u65f6\u95f4\uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d */\nint main()\n{/* \u4e0d\u5728\u6d4b\u8bd5\u8303\u56f4\u5185\u7684\u51c6\u5907\u5de5\u4f5c\u653e\u5728clock()\u8c03\u7528\u4e4b\u524d */\nstart = clock();    /* \u5f00\u59cb\u8ba1\u65f6 */\nMyFunction();\nstop = clock();\nduration = ((double)(stop - start))/CLK_TCK;\n/* \u5176\u4ed6\u4e0d\u5728\u6d4b\u8bd5\u8303\u56f4\u7684\u5904\u7406\u5199\u5728\u540e\u9762\uff0c\u4f8b\u5982\u8f93\u51faduration\u7684\u503c */\nreturn 0;\n}\n</code></pre>"},{"location":"Course/FDS/Lec01/#-","title":"\u7b80\u4ecb-&gt;\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784","text":""},{"location":"Course/FDS/Lec01/#_2","title":"\u6570\u636e\u5bf9\u8c61\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u7ec4\u7ec7\u65b9\u5f0f","text":""},{"location":"Course/FDS/Lec01/#_3","title":"\u903b\u8f91\u7ed3\u6784","text":"<ul> <li>\u4e00\u5bf9\u4e00\u7684\u7ed3\u6784\uff0c\u53eb\u505a\u201d\u7ebf\u6027\u7ed3\u6784\u201c</li> <li>\u4e00\u5bf9\u591a\u7684\u903b\u8f91\u7ed3\u6784\uff0c\u53eb\u505a\u201d\u6811\u578b\u7ed3\u6784\u201c</li> <li>\u591a\u5bf9\u591a\u7684\u590d\u6742\u5173\u7cfb\u7f51\uff0c\u8fd9\u4e2a\u5173\u7cfb\u7f51\u53eb\u505a\u201d\u56fe\u201c</li> </ul>"},{"location":"Course/FDS/Lec01/#_4","title":"\u7269\u7406\u5b58\u50a8\u7ed3\u6784\uff08\u5982\u6570\u7ec4\u5f62\u5f0f\u3001\u94fe\u8868\u5f62\u5f0f\u2026\u2026","text":"<p>Note</p> <p>\u63cf\u8ff0\u6570\u636e\u7ed3\u6784</p>"},{"location":"Course/FDS/Lec01/#abstract-data-type-adt","title":"\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff08Abstract Data Type\uff09| ADT","text":"<ol> <li>\u6570\u636e\u7c7b\u578b<ol> <li>\u6570\u636e\u5bf9\u8c61\u96c6</li> <li>\u6570\u636e\u96c6\u5408\u76f8\u5173\u8054\u7684\u64cd\u4f5c\u96c6</li> </ol> </li> <li>\u62bd\u8c61\uff1a\u63cf\u8ff0\u6570\u636e\u7c7b\u578b\u7684\u65b9\u6cd5\u4e0d\u4f9d\u8d56\u4e8e\u5177\u4f53\u5b9e\u73b0<ol> <li>\u4e0e\u5b58\u653e\u548c\u6570\u636e\u7684\u673a\u5668\u65e0\u5173</li> <li>\u4e0e\u6570\u636e\u5b58\u50a8\u7684\u7269\u7406\u7ed3\u6784\u65e0\u5173</li> <li>\u4e0e\u5b9e\u73b0\u64cd\u4f5c\u7684\u7b97\u6cd5\u548c\u7f16\u7a0b\u8bed\u8a00\u5747\u65e0\u5173</li> </ol> </li> </ol> <ul> <li>\u53ea\u63cf\u8ff0\u6570\u636e\u5bf9\u8c61\u96c6\u548c\u76f8\u5173\u64cd\u4f5c\u96c6\u201d\u662f\u4ec0\u4e48\u201c\uff0c\u5e76\u4e0d\u6d89\u53ca\u201d\u5982\u4f55\u505a\u5230\u201c\u7684\u95ee\u9898</li> <li>\u5176\u4e2d\u7684\u62bd\u8c61\u53ef\u4ee5\u4ece\u5982\u4e0b\u770b<ul> <li>e.g\uff1aElementType\u662f\u901a\u7528\u6570\u636e\u7c7b\u578b\uff08\u62bd\u8c61)\uff0c\u9700\u8981double \uff0c\u5728\u524d\u9762define\u5373\u53ef</li> <li>e.g\uff1a\u77e9\u9635\u662f\u7528\u4e8c\u7ef4\u6570\u7ec4\u3001\u4e00\u7ef4\u6570\u7ec4\u8fd8\u662f\u5341\u5b57\u94fe\u8868\u5b9e\u73b0\u7684\u90fd\u4e0d\u91cd\u8981\uff0c\u53ea\u662f\u5b9e\u73b0\u4e00\u4e2a\u77e9\u9635</li> <li>e.g\uff1aMatrix Add\u4e2d\u4e0d\u5728\u4e4e\u6309\u884c\u52a0\u8fd8\u662f\u6309\u5217\u52a0\uff0c\u7528\u4ec0\u4e48\u8bed\u8a00\u5b9e\u73b0\u90fd\u4e0d\u5728\u4e4e</li> </ul> </li> </ul> <p>\u62bd\u8c61\u7684\u597d\u5904-&gt;\u4e00\u65b9\u9762\u662f\u63d0\u9ad8\u7a0b\u5e8f\u7684\u590d\u7528\u6027\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u8ba9\u6211\u4eec\u4fa7\u91cd\u53bb\u4e86\u89e3\u7a0b\u5e8f\u7684\u903b\u8f91\u7ed3\u6784</p>"},{"location":"Course/FDS/Lec01/#_5","title":"\u7b97\u6cd5\u5206\u6790","text":""},{"location":"Course/FDS/Lec01/#_6","title":"\u5b9a\u4e49","text":""},{"location":"Course/FDS/Lec01/#algorithm","title":"\u7b97\u6cd5\uff08Algorithm\uff09","text":"<ol> <li>\u4e00\u4e2a\u6709\u9650\u6307\u4ee4\u96c6</li> <li>\u63a5\u53d7\u4e00\u4e9b\u8f93\u5165\uff08\u6709\u4e9b\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u8f93\u5165\uff09</li> <li>\u4ea7\u751f\u8f93\u51fa</li> <li>\u4e00\u5b9a\u5728\u6709\u9650\u6b65\u9aa4\u4e4b\u540e\u7ec8\u6b62</li> <li>\u6bcf\u4e00\u6761\u6307\u4ee4\u5fc5\u987b<ol> <li>\u6709\u5145\u5206\u660e\u786e\u7684\u76ee\u6807\uff0c\u4e0d\u53ef\u4ee5\u4ea7\u751f\u6b67\u4e49</li> <li>\u8ba1\u7b97\u673a\u80fd\u5904\u7406\u7684\u8303\u56f4\u4e4b\u5185</li> <li>\u63cf\u8ff0\u5e94\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u4e00\u79cd\u8ba1\u7b97\u673a\u8bed\u8a00\u53ca\u5177\u4f53\u7684\u5b9e\u73b0\u624b\u6bb5</li> </ol> </li> </ol>"},{"location":"Course/FDS/Lec01/#_7","title":"\u8861\u91cf\u7b97\u6cd5\u7684\u4e24\u4e2a\u6307\u6807","text":""},{"location":"Course/FDS/Lec01/#sn","title":"\u7a7a\u95f4\u590d\u6742\u5ea6S(n)","text":"<p>\u6839\u636e\u7b97\u6cd5\u5199\u6210\u7684\u7a0b\u5e8f\u5728\u6267\u884c\u65f6 \u5360\u7528\u5b58\u50a8\u5355\u5143\u7684\u957f\u5ea6 \u3002\u8fd9\u4e2a\u957f\u5ea6\u5f80\u5f80\u4e0e\u8f93\u5165\u6570\u636e\u7684\u89c4\u6a21\u6709\u5173\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\u7684\u7b97\u6cd5\u53ef\u80fd\u5bfc\u81f4\u4f7f\u7528\u7684\u5185\u5b58\u8d85\u9650\uff0c\u9020\u6210\u7a0b\u5e8f\u975e\u6b63\u5e38\u4e2d\u65ad\u3002</p>"},{"location":"Course/FDS/Lec01/#tn","title":"\u65f6\u95f4\u590d\u6742\u5ea6T(n)","text":"<p>\u6839\u636e\u7b97\u6cd5\u5199\u6210\u7684\u7a0b\u5e8f\u5728\u6267\u884c\u65f6 \u8017\u8d39\u65f6\u95f4\u7684\u957f\u5ea6 \u3002\u8fd9\u4e2a\u957f\u5ea6\u5f80\u5f80\u4e5f\u4e0e\u8f93\u5165\u6570\u636e\u7684\u89c4\u6a21\u6709\u5173\u3002</p>"},{"location":"Course/FDS/Lec01/#_8","title":"\u590d\u6742\u5ea6\u7684\u6e10\u8fdb\u8868\u793a\u6cd5","text":"<ol> <li> <p>\\(T(n) =  O  (f(n))\\) \u8868\u793a\u5b58\u5728\u5e38\u6570 \\(C&gt;0, n_0 &gt; 0\\), \u4f7f\u5f97\u5f53 \\(n \\ge  n_0\\) \u65f6\u6709 \\(T(n) \\le C\u00d7f(n)\\)</p> </li> <li> <p>\\(T(n) =\\Omega(g(n))\\) \u8868\u793a\u5b58\u5728\u5e38\u6570 \\(C&gt;0\uff0cn_0&gt;0\\), \u4f7f\u5f97\u5f53 \\(n \\ge n_0\\) \u65f6\u6709 \\(T(n) \\ge C\u00d7g(n)\\)</p> </li> <li> <p>\\(T(n) =\\Theta(h(n))\\) \u8868\u793a\u540c\u65f6\u6709 \\(T(n) = O(h(n))\\) \u548c \\(T(n) = \\Omega(h(n))\\)</p> </li> </ol>"},{"location":"Course/FDS/Lec01/#tips","title":"TIPs","text":"<ol> <li> <p>\u82e5\u6709\u4e24\u6bb5\u7b97\u6cd5\u5206\u522b\u6709\u590d\u6742\u5ea6 \\(T_1(n) = O(f_1(n))\u548cT_2(n) = O(f_2(n))\\)\uff0c\u5219</p> <ol> <li> <p>\\(T_1(n) + T_2(n) = max(O(f_1(n)), O(f_2(n)))\\) \u8868\u793a\u4e24\u4e2a\u7b97\u6cd5\u62fc\u63a5\u8d77\u6765</p> </li> <li> <p>\\(T_1(n) \\times T_2(n) = O(f_1(n) \\times f_2(n))\\) \u8868\u793a\u4e24\u4e2a\u7b97\u6cd5\u5d4c\u5957\u8d77\u6765</p> </li> </ol> </li> <li> <p>\u82e5 \\(T(n)\\) \u662f\u5173\u4e8en\u7684k\u9636\u591a\u9879\u5f0f\uff0c\u90a3\u4e48 \\(T(n)= \\Theta (n^k)\\)</p> </li> <li> <p>\u4e00\u4e2afor\u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7b49\u4e8e\u5faa\u73af\u6b21\u6570\u4e58\u4ee5\u5faa\u73af\u4f53\u4ee3\u7801\u7684\u590d\u6742\u5ea6</p> </li> <li> <p>if-else\u7ed3\u6784\u7684\u590d\u6742\u5ea6\u53d6\u51b3\u4e8eif\u7684\u6761\u4ef6\u5224\u65ad\u590d\u6742\u5ea6\u548c\u4e24\u4e2a\u5206\u652f\u90e8\u5206\u7684\u590d\u6742\u5ea6\uff0c\u603b\u4f53\u590d\u6742\u5ea6\u53d6\u4e09\u8005\u4e2d\u6700\u5927</p> </li> </ol>"},{"location":"Course/FDS/Lec01/#checking-your-analysis","title":"Checking Your Analysis","text":"<ol> <li> <p>Method 1</p> <ol> <li> <p>When \\(T(N) = O(N)\\), check if \\(T(2N)/T(N)\\approx 2\\) </p> </li> <li> <p>When \\(T(N) = O(N^2)\\), check if \\(T(2N)/T(N)\\approx 4\\) </p> </li> <li> <p>When \\(T(N) = O(N^3)\\), check if \\(T(2N)/T(N)\\approx 8\\) </p> </li> <li> <p>\u00b7\u00b7\u00b7</p> </li> </ol> </li> <li> <p>Method 2</p> <ol> <li>When \\(T(N) = O(f(N))\\), check if \\(\\lim\\limits_{N\\rightarrow\\infty}\\frac{T(N)}{f(N)} \\approx Constant\\)</li> </ol> </li> </ol> <p>Info</p> <p>\u4e00\u4e2a\u5206\u6790\u590d\u6742\u5ea6\u7684\u65b9\u6cd5</p>"},{"location":"Course/FDS/Lec01/#master","title":"\u4e3b\u5b9a\u7406 | Master","text":""},{"location":"Course/FDS/Lec01/#_9","title":"\u4ecb\u7ecd","text":"<p>Master\u5b9a\u7406\uff0c\u53c8\u79f0\u4e3b\u5b9a\u7406\uff0c\u7528\u4e8e\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\uff08\u5e38\u7528\u4e8e\u9012\u5f52\u8c03\u7528\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff09</p>"},{"location":"Course/FDS/Lec01/#_10","title":"\u7528\u6cd5","text":"<p>\u9012\u5f52\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5f62\u5982\uff1a</p> <ol> <li> <p>\\(T(n) = O(1), n = 1\\)</p> </li> <li> <p>\\(T(n) = aT(\\frac{n}{b}) + f(n) , n &gt; 1\\)</p> </li> </ol> <p>\u5176\u4e2d\uff0c\\(a \\ge 1; b &gt; 1 ;\\)\\(f(n)\\) \u8868\u793a\u4e0d\u53c2\u4e0e\u9012\u5f52\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6, \u89c4\u5b9a \\(C_{crit}=log_ba\\)</p> <p>\u7b2c\u4e8c\u6761\u516c\u5f0f\u8868\u793a\uff1a\u5c06\u4e00\u4e2a\u89c4\u6a21\u4e3an\u7684\u95ee\u9898\u5206\u4e3a \\(a\\) \u4e2a\u89c4\u6a21\u4e3a \\(\\frac{n}{b}\\) \u5b50\u95ee\u9898\uff0c\u6bcf\u6b21\u9012\u5f52\u5c06\u5e26\u6765 \\(f(n)\\) \u7684\u989d\u5916\u8ba1\u7b97\uff0c\u7136\u540e\u901a\u8fc7\u5bf9\u8fd9 \\(a\\) \u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u7684\u7efc\u5408\uff0c\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3</p> <p>\u90a3\u4e48\u6709\uff1a</p> <ol> <li>\u5f53\\(f(n) = O(n^c)\\)\uff0c\u4e14\\(c &lt; C_{crit}\\)\u65f6\u6709\uff1a \\(T(n) = \\Theta(n^{C_{crit}})\\)</li> </ol> Example <p>\\(T(n) = 8T(\\frac{n}{2}) + 1000n^2\\)</p> <p>\u6b64\u65f6\\(a=8, b=2, f(n)=1000n^2\\)</p> <p>\\(c=2&lt;3=log_ba=C_{crit}\\)</p> <p>\u6545 \\(T(n)=\\Theta(n^3)\\)</p> <ol> <li>\u5f53\\(f(n)=O(n^c)\\), \u4e14\\(c &gt; C_{crit}\\)\u65f6\u6709\uff1a\\(T(n)=\\Theta(f(n))\\)</li> </ol> Example <p>\\(T(n) = 2T(\\frac{n}{2}) + n^2\\)</p> <p>\u6b64\u65f6\\(a=2, b=2, f(n)=n^2\\)</p> <p>\\(c=2 &gt; 1=log_ba=C_{crit}\\)</p> <p>\u6545\\(T(n)=\\Theta(n^2)\\)</p> <ol> <li> <p>\u5f53\\(f(n)=O(n^c)\\), \u4e14\\(c=C_{crit}\\)\u65f6\uff1a\\(T(n)=\\Theta(n^clog~n)\\)</p> </li> <li> <p>\u82e5\u5b58\u5728\u975e\u8d1f\u6574\u6570\\(k\\)\uff0c\u4f7f\u5f97\\(f(n)=\\Theta(n^{C_{crit}}log_kn)\\)\uff0c\u90a3\u4e48\\(T(n)=\\Theta(n^{C_{crit}}log_{k+1}n)\\)</p> </li> </ol> Quote <ol> <li>\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5 - \u4ee3\u7956\u534e - \u535a\u5ba2\u56ed</li> <li>Master\u5b9a\u7406\u5b66\u4e60\u7b14\u8bb0 - water_mi - \u535a\u5ba2\u56ed</li> </ol>"},{"location":"Course/FDS/Lec02/","title":"\u7ebf\u6027\u8868&amp;\u6808&amp;\u961f\u5217","text":""},{"location":"Course/FDS/Lec02/#lists","title":"\u7ebf\u6027\u8868 | Lists","text":""},{"location":"Course/FDS/Lec02/#_2","title":"\u7ebf\u6027\u8868\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u63cf\u8ff0","text":"<ol> <li><code>\u7c7b\u578b\u540d\u79f0</code> : \u7ebf\u6027\u8868 | List</li> <li><code>\u6570\u636e\u5bf9\u8c61\u96c6</code> :  \u7ebf\u6027\u8868\u662fn( \\(\\ge\\) 20)\u4e2a\u5143\u7d20\u6784\u6210\u7684\u6709\u5e8f\u5e8f\u5217</li> <li><code>\u64cd\u4f5c\u96c6</code> : \u7ebf\u6027\u8868 L \\(\\epsilon\\) List\uff0c\u6574\u6570 i \u8868\u793a\u4f4d\u7f6e\uff0c\u5143\u7d20 X \\(\\epsilon\\) ElementType.</li> </ol>"},{"location":"Course/FDS/Lec02/#_3","title":"\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u5b9e\u73b0","text":""},{"location":"Course/FDS/Lec02/#_4","title":"\u7ebf\u6027\u8868\u7684\u6570\u7ec4\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u4e3b\u8981\u64cd\u4f5c\u5b9e\u73b0</li> </ul> \u521d\u59cb\u5316(\u5efa\u7acb\u7a7a\u7684\u987a\u5e8f\u8868) <pre><code>List MakeEmpty()\n{\nList Ptrl;\nPtrl = (List)malloc(sizeof(struct LNode));\nPtrl-&gt;Last = -1;\nreturn Ptrl;\n}\n</code></pre> \u67e5\u627e <pre><code>int Find(ElementType X, List Ptrl)\n{\nint i = 0;\nwhile(i &lt;= Ptrl-&gt;Last &amp;&amp; Ptrl-&gt;Data[i] != X)\n{\ni++;\n}\nif(i &gt; Ptrl-&gt;Last)\nreturn -1;\nelse\nreturn i;\n}\n</code></pre> \u5728\u7b2ci(1 &lt;= i &lt;= n+1)\u4e2a\u4f4d\u7f6e\u4e0a\u63d2\u5165\u65b0\u5143\u7d20X <pre><code>void Insert(ElementType X, int i, List L)\n{\nint j;\nif(Ptrl-&gt;Last == MAXSIZE-1)\n{\nprintf(\"\u8868\u6ee1\");\nreturn ;\n}\nif(i &lt; 1 || i &gt; Ptrl-&gt;Last+2 )\n{\nprintf(\"\u4f4d\u7f6e\u4e0d\u5408\u6cd5\");\nreturn;\n}\nfor(j = Ptrl-&gt;Last; j &gt;= i - 1; j--)\n{\nPtrl-&gt;Data[j+1] = Ptrl-&gt;Data[j];\n}\nPtrl-&gt;Data[i-1] = X;\nPtrl-&gt;Last++;\nreturn;   }\n</code></pre> \u5220\u9664 <pre><code>void Delete( int i, List Ptrl )\n{\nint j;\nif(i &lt; 1 || i &gt; Ptrl-&gt;Last+1)\n{\nprintf(\"\u4e0d\u5b58\u5728\");\nreturn;\n}\nfor(j = i; i &lt;= Ptrl-&gt;Last; j++)\n{\nPtrl-&gt;Data[j-1] = Ptrl-&gt;Data[j];\n}\nPtrl-&gt;Last--;\nreturn E;\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_5","title":"\u7ebf\u6027\u8868\u7684\u94fe\u8868\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u4e0d\u8981\u6c42\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u7269\u7406\u4e0a\u4e5f\u76f8\u90bb</li> <li>\u901a\u8fc7\u4fee\u6539\u201d\u94fe\u201c\u5efa\u7acb\u8d77\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u903b\u8f91\u5173\u7cfb</li> </ul> <p>Tip</p> <p>\u63d2\u5165\u3001\u5220\u9664\u4e0d\u9700\u8981\u79fb\u52a8\u6570\u636e\u5143\u7d20\uff0c\u53ea\u9700\u8981\u4fee\u6539\u201d\u94fe\u201c</p> \u94fe\u8868\u7ed3\u6784 <pre><code>typedef struct LNode *List;\nstruct LNode{\nElementType Data;\nList Next;\n};\nstruct LNode L;\nList Ptrl;\n</code></pre> <ul> <li>\u4e3b\u8981\u64cd\u4f5c:</li> </ul> \u6c42\u8868\u957f <pre><code>int Length(List Ptrl)\n{\nList p = Ptrl;\nint j = 0;\nwhile(p)\n{\np = p-&gt;Next;\nj ++;\n}\nreturn j;\n}\n</code></pre> \u67e5\u627e <pre><code>/*\uff081\uff09\u6309\u5e8f\u53f7\u67e5\u627e*/\nList FindKth(int K, List Ptrl)\n{\nList p = Ptrl;\nwhile(p != NULL &amp;&amp; i &lt; k)\n{\np = p-&gt;Next;\ni++;\n}\nif(i == K)\nreturn p;\nelse\nreturn NULL;\n}\n/*\uff082\uff09\u6309\u503c\u67e5\u627e*/\nList Find(ElementType X, List Ptrl)\n{\nList p = Ptrl;\nwhile(p != NULL &amp;&amp; p-&gt;Data != X)\n{\np = p-&gt;Next;\n}\nreturn p;\n}\n</code></pre> \u5728\u7b2ci-1(1 &lt;= i &lt;= n+1)\u4e2a\u8282\u70b9\u540e\u63d2\u5165\u4e00\u4e2a\u503c\u4e3aX\u7684\u65b0\u8282\u70b9 <pre><code>List Insert(ElementType X, List Ptrl)\n{\nList p, s;\nif(i == 1)\n{\ns = (List)malloc(sizeof(struct LNode));\ns-&gt;Data = X;\ns-&gt;Next = Ptrl;\nreturn s;\n}\np = Findkth(i-1, Ptrl);\nif(p == NULL)\n{\nprintf(\"\u53c2\u6570i\u9519\u8bef\");\nreturn NULL;\n}\nelse\n{\ns = (List)malloc(sizeof(struct LNode));\ns-&gt;Data = X;\ns-&gt;Next = p-&gt;Next;\np-&gt;Next = s;\nreturn Ptrl;\n}\n}\n</code></pre> \u5220\u9664\u7b2ci\u4e2a\u8282\u70b9\uff081 &lt;= i &lt;= n\uff09 <pre><code>List Delete(int i, List Ptrl)\n{\nList p, s;\nif(i == 1)\n{\ns = Ptrl;\nif( Ptrl != NULL)\nPtrl = Ptrl-&gt;Next;\nelse\nreturn NULL;\nfree(s);\nreturn Ptrl;\n}\np = FindKth(i-1, Ptrl);\nif( p == NULL)\n{\nprintf(\"\u7b2c%d\u4e2a\u8282\u70b9\u4e0d\u5b58\u5728\"\uff0ci-1);\nreturn NULL;\n}\nelse if(p-&gt;Next == NULL)\n{\nprintf(\"\u7b2c%d\u4e2a\u8282\u70b9\u4e0d\u5b58\u5728\"\uff0ci);\nreturn NULL;\n}\nelse\n{\ns = p-&gt;Next;\np-&gt;Next = s-&gt;Next;\nfree(s);\nreturn Ptrl;\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_6","title":"\u5e7f\u4e49\u8868","text":"<ul> <li>\u5e7f\u4e49\u8868\u662f\u7ebf\u6027\u8868\u7684\u63a8\u5e7f</li> <li>\u5bf9\u4e8e\u7ebf\u6027\u8868\u6765\u8bf4\uff0cn \u4e2a\u5143\u7d20\u90fd\u662f\u57fa\u672c\u7684\u5355\u5143\u7d20</li> <li>\u5e7f\u4e49\u8868\u4e2d\uff0c\u8fd9\u4e9b\u5143\u7d20\u4e0d\u4ec5\u53ef\u4ee5\u662f\u5355\u5143\u7d20\u8fd8\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u5e7f\u4e49\u8868</li> </ul> \u5e7f\u4e49\u8868\u7ed3\u6784 <pre><code>typedef struct GNode *Glist;\nstruct GNode{\nint Tag;    /* \u6807\u5fd7\u57df\uff0c0\u8868\u793a\u8282\u70b9\u662f\u5355\u5143\u7d20\uff0c1\u8868\u793a\u662f\u5e7f\u4e49\u8868*/\nunion{      /* \u5b50\u8868\u6307\u9488\u57dfSublist\u4e0e\u5355\u5143\u7d20\u6570\u636e\u57dfData\u590d\u7528\uff0c\u5373\u5171\u7528\u5b58\u50a8\u7a7a\u95f4*/\nElementType Data;\nGList SubList;\n}URegion;\nGList Next; /* \u6307\u5411\u540e\u7ee7\u8282\u70b9 */\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_7","title":"\u591a\u91cd\u94fe\u8868","text":"<p>Note</p> <p>\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u53ef\u80fd\u540c\u65f6\u96b6\u5c5e\u4e8e\u591a\u4e2a\u94fe</p> <ul> <li>\u591a\u91cd\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6307\u9488\u57df\u4f1a\u6709\u591a\u4e2a\uff0c\u5982\u524d\u9762\u7684\u4f8b\u5b50\u5305\u542b\u4e86Next\u548cSublist\u4e24\u4e2a\u6307\u9488\u57df\uff1b</li> <li>\u4f46\u5305\u542b\u4e24\u4e2a\u6307\u9488\u57df\u7684\u94fe\u8868\u5e76\u4e0d\u4e00\u5b9a\u662f\u591a\u91cd\u94fe\u8868\uff0c\u6bd4\u5982\u53cc\u5411\u94fe\u8868</li> </ul> <p>Note</p> <ul> <li>\u7528\u4e00\u4e2a\u6807\u8bc6\u57dfTag\u6765\u533a\u5206\u5934\u8282\u70b9\u548c\u975e0\u5143\u7d20\u8282\u70b9:</li> <li>\u5934\u8282\u70b9\u7684\u6807\u8bc6\u503c\u4e3a\u201cHead\u201d\uff0c\u77e9\u9635\u975e0\u5143\u7d20\u8282\u70b9\u7684\u6807\u8bc6\u503c\u4e3a\u201cTerm\u201d </li> </ul> \u7ebf\u6027\u8868\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u987a\u5e8f\u8868 <pre><code>typedef int Position;\ntypedef struct LNode *List;\nstruct LNode {\nElementType Data[MAXSIZE];\nPosition Last;\n};\n/* \u521d\u59cb\u5316 */\nList MakeEmpty()\n{\nList L;\nL = (List)malloc(sizeof(struct LNode));\nL-&gt;Last = -1;\nreturn L;\n}\n/* \u67e5\u627e */\n#define ERROR -1\nPosition Find( List L, ElementType X )\n{\nPosition i = 0;\nwhile( i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i]!= X )\ni++;\nif ( i &gt; L-&gt;Last )  return ERROR; /* \u5982\u679c\u6ca1\u627e\u5230\uff0c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f */\nelse  return i;  /* \u627e\u5230\u540e\u8fd4\u56de\u7684\u662f\u5b58\u50a8\u4f4d\u7f6e */\n}\n/* \u63d2\u5165 */\n/*\u6ce8\u610f:\u5728\u63d2\u5165\u4f4d\u7f6e\u53c2\u6570P\u4e0a\u4e0e\u8bfe\u7a0b\u89c6\u9891\u6709\u6240\u4e0d\u540c\uff0c\u8bfe\u7a0b\u89c6\u9891\u4e2di\u662f\u5e8f\u5217\u4f4d\u5e8f\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u8fd9\u91ccP\u662f\u5b58\u50a8\u4e0b\u6807\u4f4d\u7f6e\uff08\u4ece0\u5f00\u59cb\uff09\uff0c\u4e24\u8005\u5dee1*/\nbool Insert( List L, ElementType X, Position P ) { /* \u5728L\u7684\u6307\u5b9a\u4f4d\u7f6eP\u524d\u63d2\u5165\u4e00\u4e2a\u65b0\u5143\u7d20X */\nPosition i;\nif ( L-&gt;Last == MAXSIZE-1) {\n/* \u8868\u7a7a\u95f4\u5df2\u6ee1\uff0c\u4e0d\u80fd\u63d2\u5165 */\nprintf(\"\u8868\u6ee1\"); return false; }  if ( P&lt;0 || P&gt;L-&gt;Last+1 ) { /* \u68c0\u67e5\u63d2\u5165\u4f4d\u7f6e\u7684\u5408\u6cd5\u6027 */\nprintf(\"\u4f4d\u7f6e\u4e0d\u5408\u6cd5\");\nreturn false; } for( i=L-&gt;Last; i&gt;=P; i-- )\nL-&gt;Data[i+1] = L-&gt;Data[i]; /* \u5c06\u4f4d\u7f6eP\u53ca\u4ee5\u540e\u7684\u5143\u7d20\u987a\u5e8f\u5411\u540e\u79fb\u52a8 */\nL-&gt;Data[P] = X;  /* \u65b0\u5143\u7d20\u63d2\u5165 */\nL-&gt;Last++;       /* Last\u4ecd\u6307\u5411\u6700\u540e\u5143\u7d20 */\nreturn true; } /* \u5220\u9664 */\n/*\u6ce8\u610f:\u5728\u5220\u9664\u4f4d\u7f6e\u53c2\u6570P\u4e0a\u4e0e\u8bfe\u7a0b\u89c6\u9891\u6709\u6240\u4e0d\u540c\uff0c\u8bfe\u7a0b\u89c6\u9891\u4e2di\u662f\u5e8f\u5217\u4f4d\u5e8f\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u8fd9\u91ccP\u662f\u5b58\u50a8\u4e0b\u6807\u4f4d\u7f6e\uff08\u4ece0\u5f00\u59cb\uff09\uff0c\u4e24\u8005\u5dee1*/\nbool Delete( List L, Position P )\n{ /* \u4eceL\u4e2d\u5220\u9664\u6307\u5b9a\u4f4d\u7f6eP\u7684\u5143\u7d20 */\nPosition i;\nif( P&lt;0 || P&gt;L-&gt;Last ) { /* \u68c0\u67e5\u7a7a\u8868\u53ca\u5220\u9664\u4f4d\u7f6e\u7684\u5408\u6cd5\u6027 */\nprintf(\"\u4f4d\u7f6e%d\u4e0d\u5b58\u5728\u5143\u7d20\", P ); return false; }\nfor( i=P+1; i&lt;=L-&gt;Last; i++ )\nL-&gt;Data[i-1] = L-&gt;Data[i]; /* \u5c06\u4f4d\u7f6eP+1\u53ca\u4ee5\u540e\u7684\u5143\u7d20\u987a\u5e8f\u5411\u524d\u79fb\u52a8 */\nL-&gt;Last--; /* Last\u4ecd\u6307\u5411\u6700\u540e\u5143\u7d20 */\nreturn true;   }\n</code></pre> \u7ebf\u6027\u8868\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u94fe\u5f0f\u8868 <pre><code>typedef struct LNode *PtrToLNode;\nstruct LNode {\nElementType Data;\nPtrToLNode Next;\n};\ntypedef PtrToLNode Position;\ntypedef PtrToLNode List;\n/* \u67e5\u627e */\n#define ERROR NULL\nPosition Find( List L, ElementType X )\n{\nPosition p = L; /* p\u6307\u5411L\u7684\u7b2c1\u4e2a\u8282\u70b9 */\nwhile ( p &amp;&amp; p-&gt;Data!=X )\np = p-&gt;Next;\n/* \u4e0b\u5217\u8bed\u53e5\u53ef\u4ee5\u7528 return p; \u66ff\u6362 */\nif ( p )\nreturn p;\nelse\nreturn ERROR;\n}\n/* \u5e26\u5934\u8282\u70b9\u7684\u63d2\u5165 */\n/*\u6ce8\u610f:\u5728\u63d2\u5165\u4f4d\u7f6e\u53c2\u6570P\u4e0a\u4e0e\u8bfe\u7a0b\u89c6\u9891\u6709\u6240\u4e0d\u540c\uff0c\u8bfe\u7a0b\u89c6\u9891\u4e2di\u662f\u5e8f\u5217\u4f4d\u5e8f\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u8fd9\u91ccP\u662f\u94fe\u8868\u8282\u70b9\u6307\u9488\uff0c\u5728P\u4e4b\u524d\u63d2\u5165\u65b0\u8282\u70b9 */\nbool Insert( List L, ElementType X, Position P )\n{ /* \u8fd9\u91cc\u9ed8\u8ba4L\u6709\u5934\u8282\u70b9 */\nPosition tmp, pre;\n/* \u67e5\u627eP\u7684\u524d\u4e00\u4e2a\u8282\u70b9 */        for ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            if ( pre==NULL ) { /* P\u6240\u6307\u7684\u8282\u70b9\u4e0d\u5728L\u4e2d */\nprintf(\"\u63d2\u5165\u4f4d\u7f6e\u53c2\u6570\u9519\u8bef\\n\");\nreturn false;\n}\nelse { /* \u627e\u5230\u4e86P\u7684\u524d\u4e00\u4e2a\u8282\u70b9pre */\n/* \u5728P\u524d\u63d2\u5165\u65b0\u8282\u70b9 */\ntmp = (Position)malloc(sizeof(struct LNode)); /* \u7533\u8bf7\u3001\u586b\u88c5\u8282\u70b9 */\ntmp-&gt;Data = X; tmp-&gt;Next = P;\npre-&gt;Next = tmp;\nreturn true;\n}\n}\n/* \u5e26\u5934\u8282\u70b9\u7684\u5220\u9664 */\n/*\u6ce8\u610f:\u5728\u5220\u9664\u4f4d\u7f6e\u53c2\u6570P\u4e0a\u4e0e\u8bfe\u7a0b\u89c6\u9891\u6709\u6240\u4e0d\u540c\uff0c\u8bfe\u7a0b\u89c6\u9891\u4e2di\u662f\u5e8f\u5217\u4f4d\u5e8f\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u8fd9\u91ccP\u662f\u62df\u5220\u9664\u8282\u70b9\u6307\u9488 */\nbool Delete( List L, Position P )\n{ /* \u8fd9\u91cc\u9ed8\u8ba4L\u6709\u5934\u8282\u70b9 */\nPosition pre;\n/* \u67e5\u627eP\u7684\u524d\u4e00\u4e2a\u8282\u70b9 */        for ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            if ( pre==NULL || P==NULL) { /* P\u6240\u6307\u7684\u8282\u70b9\u4e0d\u5728L\u4e2d */\nprintf(\"\u5220\u9664\u4f4d\u7f6e\u53c2\u6570\u9519\u8bef\\n\");\nreturn false;\n}\nelse { /* \u627e\u5230\u4e86P\u7684\u524d\u4e00\u4e2a\u8282\u70b9pre */\n/* \u5c06P\u4f4d\u7f6e\u7684\u8282\u70b9\u5220\u9664 */\npre-&gt;Next = P-&gt;Next;\nfree(P);\nreturn true;\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#stacks","title":"\u6808 | Stacks","text":""},{"location":"Course/FDS/Lec02/#_8","title":"\u5806\u6808\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u63cf\u8ff0","text":"<ul> <li>\u7c7b\u578b\u540d\u79f0 : \u5806\u6808(Stack)</li> <li>\u6570\u636e\u5bf9\u8c61\u96c6 : \u4e00\u4e2a\u67090\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u7684\u6709\u7a77\u7ebf\u6027\u8868</li> <li>\u64cd\u4f5c\u96c6 : \u957f\u5ea6\u4e3aMaxSize\u7684\u5806\u6808S \\(\\in\\) Stack\uff0c\u5806\u6808\u5143\u7d20item \\(\\in\\) ElementType</li> </ul> <p>Note</p> <ol> <li>Stack CreateStack( int MaxSize ): \u751f\u6210\u7a7a\u5806\u6808\uff0c\u5176\u6700\u5927\u957f\u5ea6\u4e3aMaxSize</li> <li>int IsFull( Stack S, int MaxSize ): \u5224\u65ad\u5806\u6808S\u662f\u5426\u5df2\u6ee1</li> <li>void Push( Stack S, ElementType item ): \u5c06\u5143\u7d20item\u538b\u5165\u5806\u6808</li> <li>int IsEmpty( Stack S ): \u5224\u65ad\u5806\u6808S\u662f\u5426\u4e3a\u7a7a</li> <li>ElementType Pop( Stack S ): \u5220\u9664\u5e76\u8fd4\u56de\u6808\u9876\u5143\u7d20</li> </ol>"},{"location":"Course/FDS/Lec02/#_9","title":"\u6808\u7684\u987a\u5e8f\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u6808\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u901a\u5e38\u7531\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u8bb0\u5f55\u6808\u9876\u5143\u7d20\u4f4d\u7f6e\u7684\u53d8\u91cf\u7ec4\u6210</li> </ul> \u5806\u6808\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u987a\u5e8f\u5b58\u50a8 <pre><code>typedef int Position;\nstruct SNode {\nElementType *Data; /* \u5b58\u50a8\u5143\u7d20\u7684\u6570\u7ec4 */\nPosition Top;      /* \u6808\u9876\u6307\u9488 */\nint MaxSize;       /* \u5806\u6808\u6700\u5927\u5bb9\u91cf */\n};\ntypedef struct SNode *Stack;\nStack CreateStack( int MaxSize )\n{\nStack S = (Stack)malloc(sizeof(struct SNode));\nS-&gt;Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));\nS-&gt;Top = -1;\nS-&gt;MaxSize = MaxSize;\nreturn S;\n}\nbool IsFull( Stack S )\n{\nreturn (S-&gt;Top == S-&gt;MaxSize-1);\n}\nbool Push( Stack S, ElementType X )\n{\nif ( IsFull(S) ) {\nprintf(\"\u5806\u6808\u6ee1\");\nreturn false;\n}\nelse {\nS-&gt;Data[++(S-&gt;Top)] = X;\nreturn true;\n}\n}\nbool IsEmpty( Stack S )\n{\nreturn (S-&gt;Top == -1);\n}\nElementType Pop( Stack S )\n{\nif ( IsEmpty(S) ) {\nprintf(\"\u5806\u6808\u7a7a\");\nreturn ERROR; /* ERROR\u662fElementType\u7684\u7279\u6b8a\u503c\uff0c\u6807\u5fd7\u9519\u8bef */\n}\nelse return ( S-&gt;Data[(S-&gt;Top)--] );\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_10","title":"\u5806\u6808\u7684\u94fe\u5f0f\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u6808\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u53eb\u505a\u94fe\u6808\u3002\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u53ea\u80fd\u5728\u94fe\u6808\u7684\u6808\u9876\u8fdb\u884c <p>\u7528\u94fe\u8868\u7684\u5934\u505a\u6808\u7684Top\uff0c\u5355\u5411\u94fe\u8868\u7684\u94fe\u5c3e\u4e0d\u53ef\u505aTop</p> </li> </ul> \u5806\u6808\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u94fe\u5f0f\u5b58\u50a8 <pre><code>typedef struct SNode *PtrToSNode;\nstruct SNode {\nElementType Data;\nPtrToSNode Next;\n};\ntypedef PtrToSNode Stack;\nStack CreateStack( ) { /* \u6784\u5efa\u4e00\u4e2a\u5806\u6808\u7684\u5934\u8282\u70b9\uff0c\u8fd4\u56de\u8be5\u8282\u70b9\u6307\u9488 */\nStack S;\nS = (Stack)malloc(sizeof(struct SNode));\nS-&gt;Next = NULL;\nreturn S;\n}\nbool IsEmpty ( Stack S )\n{ /* \u5224\u65ad\u5806\u6808S\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u662f\u8fd4\u56detrue\uff1b\u5426\u5219\u8fd4\u56defalse */\nreturn ( S-&gt;Next == NULL );\n}\nbool Push( Stack S, ElementType X )\n{ /* \u5c06\u5143\u7d20X\u538b\u5165\u5806\u6808S */\nPtrToSNode TmpCell;\nTmpCell = (PtrToSNode)malloc(sizeof(struct SNode));\nTmpCell-&gt;Data = X;\nTmpCell-&gt;Next = S-&gt;Next;\nS-&gt;Next = TmpCell;\nreturn true;\n}\nElementType Pop( Stack S )  { /* \u5220\u9664\u5e76\u8fd4\u56de\u5806\u6808S\u7684\u6808\u9876\u5143\u7d20 */\nPtrToSNode FirstCell;\nElementType TopElem;\nif( IsEmpty(S) ) {\nprintf(\"\u5806\u6808\u7a7a\"); return ERROR;\n}\nelse {\nFirstCell = S-&gt;Next; TopElem = FirstCell-&gt;Data;\nS-&gt;Next = FirstCell-&gt;Next;\nfree(FirstCell);\nreturn TopElem;\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_11","title":"\u5806\u6808\u5e94\u7528\uff1a\u8868\u8fbe\u5f0f\u6c42\u503c","text":""},{"location":"Course/FDS/Lec02/#_12","title":"\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c","text":"<p>\u57fa\u672c\u7b56\u7565 \uff1a \u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f(\u540e\u7f00\u8868\u8fbe\u5f0f)\uff0c\u7136\u540e\u6c42\u503c</p>"},{"location":"Course/FDS/Lec02/#_13","title":"\u4e2d\u7f00\u8868\u8fbe\u5f0f\u5982\u4f55\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f","text":"<p>\u4ece\u5934\u5230\u5c3e\u8bfb\u53d6\u4e2d\u7f00\u8868\u8fbe\u5f0f\u7684\u6bcf\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u4e0d\u540c\u5bf9\u8c61\u6309\u4e0d\u540c\u60c5\u51b5\u5904\u7406</p> <ol> <li>\u8fd0\u7b97\u6570\uff1a\u76f4\u63a5\u8f93\u51fa</li> <li>\u5de6\u62ec\u53f7\uff1a\u538b\u5165\u5806\u6808</li> <li>\u53f3\u62ec\u53f7\uff1a\u5c06\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u5f39\u51fa\u5e76\u8f93\u51fa\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\uff08\u51fa\u6808\uff0c\u4e0d\u8f93\u51fa\uff09\uff1b</li> <li>\u8fd0\u7b97\u7b26<ol> <li>\u82e5\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u5219\u628a\u5b83\u5165\u6808</li> <li>\u82e5\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u5219\u5c06\u6808\u9876\u8fd0\u7b97\u7b26\u5f39\u51fa\u5e76\u8f93\u51fa\uff1b\u518d\u6bd4\u8f83\u65b0\u7684\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u76f4\u5230\u8be5\u8fd0\u7b97\u7b26\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u4e3a\u6b62\uff0c\u7136\u540e\u5c06\u8be5\u8fd0\u7b97\u7b26\u5165\u6808</li> </ol> </li> <li>\u82e5\u5404\u5bf9\u8c61\u5904\u7406\u5b8c\u6bd5\uff0c\u5219\u5c06\u5806\u6808\u4e2d\u5b58\u7559\u7684\u8fd0\u7b97\u7b26\u4e00\u5e76\u8f93\u51fa</li> </ol>"},{"location":"Course/FDS/Lec02/#queues","title":"\u961f\u5217 | Queues","text":"<p>Abstract</p> <p>\u961f\u5217\uff1a\u5177\u6709\u4e00\u5b9a\u64cd\u4f5c\u7ea6\u675f\u7684\u7ebf\u6027\u8868(\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff1a\u53ea\u80fd\u5728\u4e00\u6bb5\u63d2\u5165\uff0c\u800c\u5728\u53e6\u4e00\u7aef\u5220\u9664) 1. \u6570\u636e\u63d2\u5165\uff1a\u5165\u961f\u5217 2. \u6570\u636e\u5220\u9664\uff1a\u51fa\u961f\u5217 3. \u5148\u6765\u5148\u670d\u52a1 4. \u5148\u8fdb\u5148\u51fa</p>"},{"location":"Course/FDS/Lec02/#_14","title":"\u961f\u5217\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u63cf\u8ff0","text":"<ul> <li>\u7c7b\u578b\u540d\u79f0 : \u961f\u5217(Queue)</li> <li>\u6570\u636e\u5bf9\u8c61\u96c6 : \u4e00\u4e2a\u67090\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u7684\u6709\u7a77\u7ebf\u6027\u8868</li> <li>\u64cd\u4f5c\u96c6 : \u957f\u5ea6\u4e3aMaxSize\u7684\u961f\u5217Q \\(\\in\\) Queue\uff0c\u961f\u5217\u5143\u7d20item \\(\\in\\) ElementType</li> </ul> <p>Note</p> <ol> <li>Queue CreateQueue( int MaxSize ): \u751f\u6210\u957f\u5ea6\u4e3aMaxSize\u7684\u7a7a\u961f\u5217</li> <li>int IsFullQ( Queue Q, int MaxSize ): \u5224\u65ad\u961f\u5217Q\u662f\u5426\u5df2\u6ee1</li> <li>void AddQ( Queue Q, ElementType item ): \u5c06\u6570\u636e\u5143\u7d20item\u63d2\u5165\u961f\u5217Q\u4e2d</li> <li>int IsEmptyQ( Queue Q ): \u5224\u65ad\u961f\u5217Q\u662f\u5426\u4e3a\u7a7a</li> <li>ElementType DeleteQ( Queue Q ): \u5c06\u961f\u5934\u6570\u636e\u5143\u7d20\u4ece\u961f\u5217\u4e2d\u5220\u9664\u5e76\u8fd4\u56de</li> </ol>"},{"location":"Course/FDS/Lec02/#_15","title":"\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u901a\u5e38\u7528\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u8bb0\u5f55\u961f\u5217\u5934\u5143\u7d20\u4f4d\u7f6e\u7684\u53d8\u91cffront\u4ee5\u53ca\u4e00\u4e2a\u8bb0\u5f55\u961f\u5217\u5c3e\u5143\u7d20\u4f4d\u7f6e\u7684\u53d8\u91cfrear\u7ec4\u6210</li> </ul>"},{"location":"Course/FDS/Lec02/#_16","title":"\u4e00\u7ef4\u6570\u7ec4\u961f\u5217","text":""},{"location":"Course/FDS/Lec02/#_17","title":"\u987a\u73af\u961f\u5217","text":"<p> \u5224\u65ad\u987a\u73af\u961f\u5217\u7a7a\u548c\u6ee1\u53ef\u4ee5\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6848 1. \u4f7f\u7528\u989d\u5916\u6807\u8bb0\uff1aSize\u6216\u8005Tag\u57df 2. \u4ec5\u4f7f\u7528n-1\u4e2a\u6570\u7ec4\u7a7a\u95f4(Front == Rear\u65f6\u4e3a\u7a7a)</p> \u961f\u5217\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u987a\u5e8f\u5b58\u50a8 <pre><code>typedef int Position;\nstruct QNode {\nElementType *Data;     /* \u5b58\u50a8\u5143\u7d20\u7684\u6570\u7ec4 */\nPosition Front, Rear;  /* \u961f\u5217\u7684\u5934\u3001\u5c3e\u6307\u9488 */\nint MaxSize;           /* \u961f\u5217\u6700\u5927\u5bb9\u91cf */\n};\ntypedef struct QNode *Queue;\nQueue CreateQueue( int MaxSize )\n{\nQueue Q = (Queue)malloc(sizeof(struct QNode));\nQ-&gt;Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));\nQ-&gt;Front = Q-&gt;Rear = 0;\nQ-&gt;MaxSize = MaxSize;\nreturn Q;\n}\nbool IsFull( Queue Q )\n{\nreturn ((Q-&gt;Rear+1)%Q-&gt;MaxSize == Q-&gt;Front);\n}\nbool AddQ( Queue Q, ElementType X )\n{\nif ( IsFull(Q) ) {\nprintf(\"\u961f\u5217\u6ee1\");\nreturn false;\n}\nelse {\nQ-&gt;Rear = (Q-&gt;Rear+1)%Q-&gt;MaxSize;\nQ-&gt;Data[Q-&gt;Rear] = X;\nreturn true;\n}\n}\nbool IsEmpty( Queue Q )\n{\nreturn (Q-&gt;Front == Q-&gt;Rear);\n}\nElementType DeleteQ( Queue Q )\n{\nif ( IsEmpty(Q) ) { printf(\"\u961f\u5217\u7a7a\");\nreturn ERROR;\n}\nelse  {\nQ-&gt;Front =(Q-&gt;Front+1)%Q-&gt;MaxSize;\nreturn  Q-&gt;Data[Q-&gt;Front];\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_18","title":"\u961f\u5217\u7684\u94fe\u8868\u5b58\u50a8\u5b9e\u73b0","text":"\u961f\u5217\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u94fe\u5f0f\u5b58\u50a8 <pre><code>typedef struct Node *PtrToNode;\nstruct Node { /* \u961f\u5217\u4e2d\u7684\u8282\u70b9 */\nElementType Data;\nPtrToNode Next;\n};\ntypedef PtrToNode Position;\nstruct QNode {\nPosition Front, Rear;  /* \u961f\u5217\u7684\u5934\u3001\u5c3e\u6307\u9488 */\nint MaxSize;           /* \u961f\u5217\u6700\u5927\u5bb9\u91cf */\n};\ntypedef struct QNode *Queue;\nbool IsEmpty( Queue Q )\n{\nreturn ( Q-&gt;Front == NULL);\n}\nElementType DeleteQ( Queue Q )\n{\nPosition FrontCell; ElementType FrontElem;\nif  ( IsEmpty(Q) ) {\nprintf(\"\u961f\u5217\u7a7a\");\nreturn ERROR;\n}\nelse {\nFrontCell = Q-&gt;Front;\nif ( Q-&gt;Front == Q-&gt;Rear ) /* \u82e5\u961f\u5217\u53ea\u6709\u4e00\u4e2a\u5143\u7d20 */\nQ-&gt;Front = Q-&gt;Rear = NULL; /* \u5220\u9664\u540e\u961f\u5217\u7f6e\u4e3a\u7a7a */\nelse                     Q-&gt;Front = Q-&gt;Front-&gt;Next;\nFrontElem = FrontCell-&gt;Data;\nfree( FrontCell );  /* \u91ca\u653e\u88ab\u5220\u9664\u8282\u70b9\u7a7a\u95f4  */\nreturn  FrontElem;\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/","title":"\u6811 | Tree","text":""},{"location":"Course/FDS/Lec03/#_1","title":"\u6811\u7684\u5b9a\u4e49","text":"<ul> <li>\u6811\uff1an(n \\(\\ge\\) 20)\u4e2a\u8282\u70b9\u6784\u6210\u7684\u6709\u9650\u96c6\u5408\uff1b</li> <li>\u5f53n = 0\u65f6\uff0c\u79f0\u4e3a\u7a7a\u6811\uff1b</li> <li>\u5bf9\u4e8e\u4efb\u4e00\u68f5\u975e\u7a7a\u6811(n \\(&gt;\\) 0)\uff0c\u5b83\u5177\u5907\u4ee5\u4e0b\u6027\u8d28\uff1a</li> <li>\u6811\u4e2d\u6709\u4e00\u4e2a\u79f0\u4e3a\u201c\u6839\u201d\u7684\u7279\u6b8a\u8282\u70b9\uff0c\u7528r\u8868\u793a\uff1b</li> <li>\u5176\u4f59\u8282\u70b9\u53ef\u5206\u4e3am(m \\(&gt;\\) 0)\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u6709\u9650\u96c6 T1 , T2 , \u00b7\u00b7\u00b7, Tm , \u5176\u4e2d\u6bcf\u4e2a\u96c6\u5408\u672c\u8eab\u53c8\u662f\u4e00\u68f5\u6811\uff0c\u79f0\u4e3a\u539f\u6765\u6811\u7684\u201c\u5b50\u6811\u201d</li> </ul>"},{"location":"Course/FDS/Lec03/#_2","title":"\u4e00\u4e9b\u57fa\u672c\u672f\u8bed","text":"<ol> <li>\u8282\u70b9\u7684\u5ea6(Degree): \u8282\u70b9\u7684\u5b50\u6811\u4e2a\u6570</li> <li>\u6811\u7684\u5ea6\uff1a\u6811\u7684\u6240\u6709\u8282\u70b9\u4e2d\u6700\u5927\u7684\u5ea6\u6570</li> <li>\u53f6\u8282\u70b9(Leaf): \u5ea6\u4e3a0\u7684\u8282\u70b9</li> <li>\u7236\u8282\u70b9(Parent): \u6709\u5b50\u6811\u7684\u8282\u70b9\u662f\u5176\u5b50\u6811\u7684\u6839\u8282\u70b9\u7684\u7236\u8282\u70b9</li> <li>\u5b50\u8282\u70b9(Child): \u82e5A\u8282\u70b9\u662fB\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5219\u79f0B\u8282\u70b9\u662fA\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff1b\u5b50\u8282\u70b9\u4e5f\u79f0\u5b69\u5b50\u8282\u70b9</li> <li>\u5144\u5f1f\u8282\u70b9(Sibiling): \u5177\u6709\u540c\u4e00\u7236\u8282\u70b9\u7684\u5404\u8282\u70b9\u5f7c\u6b64\u662f\u5144\u5f1f\u8282\u70b9</li> <li>\u8def\u5f84\u548c\u8def\u5f84\u957f\u5ea6\uff1a\u4ece\u8282\u70b9 n1 \u5230 nk \u7684\u8def\u5f84\u4e3a\u4e00\u4e2a\u8282\u70b9\u5e8f\u5217 n1 , n2 ,\u00b7\u00b7\u00b7, nk , ni \u662f ni+1 \u7684\u7236\u8282\u70b9\u3002\u8def\u5f84\u6240\u5305\u542b\u8fb9\u7684\u4e2a\u6570\u4e3a\u8def\u5f84\u7684\u957f\u5ea6</li> <li>\u7956\u5148\u8282\u70b9(Ancestor): \u6cbf\u6811\u6839\u5230\u67d0\u4e00\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u3002</li> <li>\u5b50\u5b59\u8282\u70b9(Descendant): \u67d0\u4e00\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u5b59\u3002</li> <li>\u8282\u70b9\u7684\u5c42\u6b21(Level): \u89c4\u5b9a\u6839\u8282\u70b9\u57281\u5c42\uff0c\u5176\u4ed6\u4efb\u4e00\u8282\u70b9\u7684\u5c42\u6570\u662f\u5176\u7236\u8282\u70b9\u7684\u5c42\u6570\u52a01</li> <li>\u6811\u7684\u6df1\u5ea6(Depth): \u6811\u4e2d\u6240\u6709\u8282\u70b9\u4e2d\u6700\u5927\u5c42\u6b21\u662f\u8fd9\u68f5\u6811\u7684\u6df1\u5ea6</li> </ol> Quote"},{"location":"Course/FDS/Lec03/#_3","title":"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":"<ul> <li>\u4e8c\u53c9\u6811(binary tree): \u901a\u5e38\u6307\u6709\u6839\u4e8c\u53c9\u6811\u3002\u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u6811\u3002\u901a\u5e38\u5c06\u5b50\u8282\u70b9\u786e\u5b9a\u4e00\u4e2a\u987a\u5e8f\uff0c\u79f0\u5de6\u5b50\u8282\u70b9\u548c\u53f3\u5b50\u8282\u70b9</li> <li>\u7279\u6b8a\u4e8c\u53c9\u6811<ol> <li>\u5b8c\u6574\u4e8c\u53c9\u6811(full/proper binary tree): \u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5747\u4e3a0\u62162\u4e2a \\(\\(leaves = nodes-\\frac{nodes-1}{degree}\\)\\) </li> <li>\u5b8c\u7f8e\u4e8c\u53c9\u6811(\u5373\u6ee1\u4e8c\u53c9\u6811\uff0cperfect binary tree): \u6240\u6709\u53f6\u8282\u70b9\u6df1\u5ea6\u5747\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u2014\u2014\u6df1\u5ea6\u4e3ak(k \\(\\ge\\) -1)\u4e14\u6709 2k+1 - 1 \u4e2a\u8282\u70b9</li> <li>\u5b8c\u5168\u4e8c\u53c9\u6811(complete binary tree): \u4ec5\u6700\u6df1\u4e24\u5c42\u8282\u70b9\u7684\u5ea6\u53ef\u4ee5\u5c0f\u4e8e2\uff0c\u4e14\u6700\u6df1\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u8fde\u7eed\u4f4d\u7f6e\u4e0a || \u6240\u6709\u8282\u70b9\u7684\u7f16\u53f7\u90fd\u4e0e\u6ee1\u4e8c\u53c9\u6811\u4e2d\u7684\u7f16\u53f7\u76f8\u540c\u7684\u4e8c\u53c9\u6811</li> <li>\u659c\u4e8c\u53c9\u6811(skewed binary tree): \u6ca1\u6709\u4efb\u4f55\u5de6/\u53f3\u8282\u70b9\u7684\u6811\uff0c\u79f0\u4e3a\u53f3/\u5de6\u659c\u4e8c\u53c9\u6811</li> </ol> </li> </ul>"},{"location":"Course/FDS/Lec03/#_4","title":"\u4e8c\u53c9\u6811\u7684\u51e0\u4e2a\u91cd\u8981\u6027\u8d28","text":"<ol> <li>\u4e00\u4e2a\u4e8c\u53c9\u6811\u7b2ci\u5c42\u7684\u6700\u5927\u8282\u70b9\u6570\u4e3a: 2i-1 , i \\(\\ge\\) 1</li> <li>\u6df1\u5ea6\u4e3ak\u7684\u4e8c\u53c9\u6811\u6709\u6700\u5927\u8282\u70b9\u603b\u6570\u4e3a: 2k - 1 , k \\(\\ge\\) 1</li> <li>\u5bf9\u4efb\u4f55\u975e\u7a7a\u4e8c\u53c9\u6811\uff0c\u82e5 n0 \u8868\u793a\u53f6\u8282\u70b9\u7684\u4e2a\u6570\u3001n2 \u662f\u5ea6\u4e3a2\u7684\u975e\u53f6\u8282\u70b9\u4e2a\u6570\uff0c\u90a3\u4e48\u4e24\u8005\u6ee1\u8db3\u5173\u7cfb n0 = n2 + 1</li> </ol>"},{"location":"Course/FDS/Lec03/#_5","title":"\u4e8c\u53c9\u6811\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<ul> <li>\u7c7b\u578b\u540d\u79f0 : \u4e8c\u53c9\u6811</li> <li> <p>\u6570\u636e\u5bf9\u8c61\u96c6 : \u4e00\u4e2a\u6709\u7a77\u7684\u8282\u70b9\u96c6\u5408\u3002\u82e5\u4e0d\u4e3a\u7a7a\uff0c\u5219\u7531\u6839\u8282\u70b9\u548c\u5176\u5de6\u3001\u53f3\u4e8c\u53c9\u5b50\u6811\u7ec4\u6210</p> </li> <li> <p>\u64cd\u4f5c\u96c6 : BT \\(\\in\\) BinTree\uff0cItem \\(\\in\\) ElementType, \u91cd\u8981\u64cd\u4f5c\u6709\uff1a</p> </li> </ul> <p>Note</p> <ol> <li>Boolean IsEmpty( BinTree BT ): \u5224\u65adBT\u662f\u5426\u4e3a\u7a7a</li> <li>void Traversal( BinTree BT ): \u904d\u5386\uff0c\u6309\u67d0\u987a\u5e8f\u8bbf\u95ee\u6bcf\u4e2a\u8282\u70b9</li> <li>BinTree CreateBinTree( ): \u521b\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811</li> </ol>"},{"location":"Course/FDS/Lec03/#_6","title":"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"Course/FDS/Lec03/#_7","title":"\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784","text":"<ol> <li>\u5b8c\u5168\u4e8c\u53c9\u6811: \u4ece\u4e0a\u5230\u4e0b\u3001\u4ece\u5de6\u81f3\u53f3\u987a\u5e8f\u5b58\u50a8n\u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u7236\u5b50\u5173\u7cfb\uff1b</li> </ol> <p>Example</p> <p>  \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9\u6570: \\(n_0 = \\frac{n+1}{2}\\)         1. \u5f53n\u4e3a\u5076\u6570\u65f6\uff0c\\(n_0 = \\frac{n}{2}\\)         2. \u5f53n\u4e3a\u5947\u6570\u65f6\uff0c\\(n_0 = \\frac{n+1}{2}\\)</p> <ul> <li>\u975e\u6839\u8282\u70b9(\u5e8f\u53f7i &gt; 1)\u7684\u7236\u8282\u70b9\u7684\u5e8f\u53f7\u662f $\\lfloor \\frac{i}{2} \\rfloor $ (\u4e0d\u8d85\u8fc7 i/2 \u7684\u6700\u5927\u6574\u6570)\uff1b<ul> <li>\u8282\u70b9(\u5e8f\u53f7\u4e3ai)\u7684\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u5e8f\u53f7\u662f 2i (2i \\(\\le\\) n\uff0c\u5426\u5219\u6ca1\u6709\u5de6\u5b69\u5b50)</li> <li>\u8282\u70b9(\u5e8f\u53f7\u4e3ai)\u7684\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u5e8f\u53f7\u662f 2i+1 (2i+1 \\(\\le\\) n\uff0c\u5426\u5219\u6ca1\u6709\u53f3\u5b69\u5b50)</li> </ul> </li> </ul> <ol> <li>\u4e00\u822c\u4e8c\u53c9\u6811: \u4e5f\u53ef\u4ee5\u91c7\u7528\u4e0a\u8ff0\u7ed3\u6784\uff0c\u4f46\u4f1a\u9020\u6210\u7a7a\u95f4\u6d6a\u8d39</li> </ol> Example <p></p> <ul> <li>\u94fe\u8868\u5b58\u50a8(\u6bcf\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u53ef\u4ee5\u5982\u4e0b\u8868\u793a)</li> </ul> <p>Note</p> <pre><code>    typedef struct TreeNode *BinTree;\ntypedef BinTree Position;\nstruct TreeNode{\nElementType Data;\nBinTree Left;\nBinTree Right;\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#_8","title":"\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":""},{"location":"Course/FDS/Lec03/#preorder","title":"\u5148\u5e8f\u904d\u5386 | PreOrder","text":"<ul> <li>\u904d\u5386\u8fc7\u7a0b<ol> <li>\u8bbf\u95ee\u6839\u8282\u70b9</li> <li>\u5148\u5e8f\u904d\u5386\u5de6\u5b50\u6811</li> <li>\u5148\u5e8f\u904d\u5386\u53f3\u5b50\u6811</li> </ol> Example <p> print\u7684\u987a\u5e8f \\(\\Rightarrow\\) A B D F E C G H I</p> </li> </ul> \u9012\u5f52\u7b97\u6cd5 <pre><code>  void PreOrderTraversal( BinTree BT)\n{\nif( BT ){\nprintf(\"%d\", BT-&gt;Data);\nPreOrderTraversal(BT-&gt;Left);\nPreOrderTraversal(BT-&gt;Right);\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#inorder","title":"\u4e2d\u5e8f\u904d\u5386 | InOrder","text":"<ul> <li>\u904d\u5386\u8fc7\u7a0b<ol> <li>\u4e2d\u5e8f\u904d\u5386\u5176\u5de6\u5b50\u6811</li> <li>\u8bbf\u95ee\u6839\u8282\u70b9</li> <li>\u4e2d\u5e8f\u904d\u5386\u5176\u53f3\u5b50\u6811</li> </ol> Example <p> print\u7684\u987a\u5e8f \\(\\Rightarrow\\) D B E F A G H C I</p> </li> </ul> \u9012\u5f52\u7b97\u6cd5 <pre><code>  void InOrderTraversal( BInTree BT)\n{\nif( BT ){\nPreOrderTraversal(BT-&gt;Left);\nprintf(\"%d\", BT-&gt;Data);\nPreOrderTraversal(BT-&gt;Right);\n}\n}\n</code></pre> \u975e\u9012\u5f52\u7b97\u6cd5 <pre><code>  void InOrderTraversal(BinTree BT)\n{\nBinTree T = BT;\nStack S = CreatStack(MaxSize);    /*\u521b\u5efa\u5e76\u521d\u59cb\u5316\u5806\u6808S*/\nwhile(T || !IsEmpty(S))\n{\nwhile(T)                  /*\u4e00\u76f4\u5411\u5de6\u5e76\u5c06\u6cbf\u9014\u8282\u70b9\u538b\u5165\u5806\u6808*/\n{\nPush(S, T);\nT = T-&gt;Left;\n}\nif(!IsEmpty(S))\n{\nT = Pop(S);               /*\u8282\u70b9\u5f39\u51fa\u5806\u6808*/\nprintf(\"%5d\", T-&gt;Data);   /*\uff08\u8bbf\u95ee\uff09\u6253\u5370\u8282\u70b9*/\nT = T-&gt;Right;         /*\u8f6c\u5411\u53f3\u5b50\u6811*/\n}\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#postorder","title":"\u540e\u5e8f\u904d\u5386 | PostOrder","text":"<ul> <li>\u904d\u5386\u8fc7\u7a0b<ol> <li>\u540e\u5e8f\u904d\u5386\u5176\u5de6\u5b50\u6811</li> <li>\u540e\u5e8f\u904d\u5386\u5176\u53f3\u5b50\u6811</li> <li>\u8bbf\u95ee\u6839\u8282\u70b9</li> </ol> Example <p> print\u7684\u987a\u5e8f \\(\\Rightarrow\\) D E F B H G I C A</p> </li> </ul> \u9012\u5f52\u7b97\u6cd5 <pre><code>  void PostOrderTraversal( BInTree BT)\n{\nif( BT ){\nPreOrderTraversal(BT-&gt;Left);\nPreOrderTraversal(BT-&gt;Right);\nprintf(\"%d\", BT-&gt;Data);\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#levelorder","title":"\u5c42\u5e8f\u904d\u5386 | LevelOrder","text":"<ul> <li>\u5c42\u5e8f\u57fa\u672c\u8fc7\u7a0b:<ol> <li>\u6839\u8282\u70b9\u5165\u961f</li> <li>\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20</li> <li>\u8bbf\u95ee\u8be5\u5143\u7d20\u6240\u6307\u8282\u70b9</li> <li>\u82e5\u8be5\u5143\u7d20\u6240\u6307\u8282\u70b9\u7684\u5de6\u3001\u53f3\u5b69\u5b50\u8282\u70b9\u975e\u7a7a\uff0c\u5219\u5c06\u5176\u5de6\u3001\u53f3\u5b69\u5b50\u7684\u6307\u9488\u5165\u961f</li> </ol> </li> </ul> \u5c42\u5e8f\u904d\u5386\u7684\u961f\u5217\u5b9e\u73b0 <pre><code>void LevelOrderTraversal(BinTree BT)\n{\nQueue Q;\nBinTree T;\nif(!BT) return;             /*\u82e5\u662f\u7a7a\u6811\u5219\u76f4\u63a5\u8fd4\u56de*/\nQ = CreatQueue(MaxSize);    /*\u521b\u5efa\u5e76\u521d\u59cb\u5316\u961f\u5217Q*/\nAddQ(Q, BT);\nwhile(!IsEmptyQ(Q))\n{\nT = DeleteQ(Q);\nprintf(\"%d\\n\", T-&gt;Data);    /*\u8bbf\u95ee\u53d6\u51fa\u961f\u5217\u7684\u8282\u70b9*/\nif(T-&gt;Left)     AddQ(Q, T-&gt;Left);\nif(T-&gt;Right)\nAddQ(Q, T-&gt;Right);\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#_9","title":"\u5efa\u6811\u53ca\u540c\u6784\u5224\u522b","text":""},{"location":"Course/FDS/Lec03/#_10","title":"\u4e8c\u53c9\u6811\u8868\u793a","text":"<ul> <li>\u7ed3\u6784\u6570\u7ec4\u8868\u793a\u4e8c\u53c9\u6811: \u9759\u6001\u94fe\u8868</li> </ul> code \u4e8c\u53c9\u6811\u8868\u793a<pre><code>#define MaxTree 10\n#define ElementType char\n#define Tree int\n#define Null -1\nstruct TreeNode\n{\nElementType Element;\nTree Left;\nTree Right;\n}T1[MaxTree], T2[MaxTree];\n</code></pre>"},{"location":"Course/FDS/Lec03/#_11","title":"\u7a0b\u5e8f\u6846\u67b6\u642d\u5efa","text":"Pseudocode: main_function<pre><code>    int main()\n{\n\u5efa\u4e8c\u53c9\u68111;\n\u5efa\u4e8c\u53c9\u68112;\n\u5224\u65ad\u662f\u5426\u540c\u6784\u5e76\u8f93\u51fa;\nreturn 0;\n}\n</code></pre> code <p>main<pre><code>int main()\n{\nTree R1, R2;\nR1 = BuildTree(T1);\nR2 = BuildTree(T2);\nif(Isomorphic(R1, R2))\nprintf(\"Yes\\n\");\nelse\nprintf(\"No\\n\");\nreturn 0;\n}\n</code></pre> BuildTree<pre><code>Tree BulidTree(struct TreeNode T[])\n{\n\u2026\u2026\nscanf(\"%d\\n\", &amp;N);\nif(N)\n{\nfor(i=0; i&lt;N; i++)\n{\nscanf(\"%c %c %C\\n\", &amp;T[i].Element, &amp;cl, &amp;cr);\nif(cl != '-')\n{\nT[i].Left = cl-'0';\ncheck[T[i].Left] = 1;\n}\nelse\n{\nT[i].Left = Null;\nT[i].Right = cr-'0';\ncheck[T[i].Right] = 1;\n}\nfor(i=0; i&lt;N; i++)\nif(!check[i]) break;\nRoot = i;\n}\n}\nreturn Root;\n}\n</code></pre> \u5224\u65ad\u540c\u6784<pre><code>int Isomorphic(Tree R1, Tree R2)\n{\nif((R1==Null) &amp;&amp; (R2==Null))\nreturn 1;\nif(((R1==Null) &amp;&amp; (R2!=Null)) || ((R1!=Null) &amp;&amp; (R2==Null)))\nreturn 0;\nif(T1[R1].Element != T2[R2].Element)\nreturn 0;\nif((T1[R1].Left == Null) &amp;&amp; (T2[R2].Left == Null))\nreturn Isomorphic(T1[R1].Right, T2[R2].Right);\nif(((T1[R1].Left != Null) &amp;&amp; (T2[R2].Left != Null))&amp;&amp;\n((T1[T1[R1].Left].Element) == (T2[T2[R2].Left].Element)))\nreturn (Isomorphic(T1[R1].Left,T2[R2].Left ) &amp;&amp;\nIsomorphic(T1[R1].Right,T2[R2].Right ));\nelse\nreturn (Isomorphic(T1[R1].Left,T2[R2].Right ) &amp;&amp;\nIsomorphic(T1[R1].Right,T2[R2].Left ));\n}\n</code></pre></p>"},{"location":"Course/FDS/Lec03/#binary-search-treebst","title":"\u4e8c\u53c9\u641c\u7d22\u6811 | Binary Search Tree(BST)","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e5f\u79f0\u4e8c\u53c9\u6392\u5e8f\u6811\u6216\u4e8c\u53c9\u67e5\u627e\u6811</p> <ul> <li>\u4e00\u68f5\u4e8c\u53c9\u6811\u53ef\u4ee5\u4e3a\u7a7a\uff1b\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a<ol> <li>\u975e\u7a7a\u5de6\u5b50\u6811\u7684\u6240\u6709\u952e\u503c\u5c0f\u4e8e\u5176\u6839\u8282\u70b9\u7684\u952e\u503c</li> <li>\u975e\u7a7a\u53f3\u5b50\u6811\u7684\u6240\u6709\u952e\u503c\u5927\u4e8e\u5176\u6839\u8282\u70b9\u7684\u952e\u503c</li> <li>\u5de6\u3001\u53f3\u5b50\u6811\u90fd\u662f\u4e8c\u53c9\u641c\u7d22\u6811</li> </ol> </li> </ul>"},{"location":"Course/FDS/Lec03/#bst","title":"BST\u7684\u7279\u522b\u51fd\u6570","text":""},{"location":"Course/FDS/Lec03/#find","title":"Find()","text":"<p>\u4eceBST\u4e2d\u67e5\u627e\u5143\u7d20 X, \u8fd4\u56de\u5176\u6240\u5728\u8282\u70b9\u7684\u5730\u5740</p> <ol> <li>\u67e5\u627e\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5982\u679c\u6811\u4e3a\u7a7a\uff0c\u8fd4\u56de NULL</li> <li>\u82e5\u641c\u7d22\u6811\u975e\u7a7a\uff0c\u5219\u5c06\u6839\u8282\u70b9\u5173\u952e\u5b57\u548c X \u8fdb\u884c\u6bd4\u8f83\uff0c\u5e76\u8fdb\u884c\u4e0d\u540c\u5904\u7406:<ol> <li>\u82e5 X \u5c0f\u4e8e\u6839\u8282\u70b9\u952e\u503c\uff0c\u53ea\u9700\u5728\u5de6\u5b50\u6811\u4e2d\u7ee7\u7eed\u641c\u7d22</li> <li>\u82e5\u5927\u4e8e\uff0c\u5219\u5728\u53f3\u5b50\u6811\u4e2d\u7ee7\u7eed\u641c\u7d20</li> <li>\u82e5\u76f8\u7b49\uff0c\u641c\u7d22\u5b8c\u6210\uff0c\u8fd4\u56de\u6307\u5411\u6b64\u8282\u70b9\u7684\u6307\u9488</li> </ol> </li> </ol> code <p><pre><code>Position Find( ElementType X, BinTree BST )\n{\nif( !BST)   return NULL;\nif( X &gt; BST-&gt;Data )\nreturn Find( X, BST-&gt;Right );   /*\u5c3e\u9012\u5f52*/\nelse if( X &lt; BST-&gt;Data)\nreturn Find( X, BST-&gt;Left );    /*\u5c3e\u9012\u5f52*/\nelse\nreturn BST;\n}\n</code></pre> \u7531\u4e8e\u975e\u9012\u5f52\u51fd\u6570\u6267\u884c\u6548\u7387\u9ad8\uff0c\u53ef\u5c06\u201c\u5c3e\u9012\u5f52\u201d\u51fd\u6570\u6539\u4e3a\u8fed\u4ee3\u51fd\u6570 <pre><code>Position IterFind( ElementType X, BinTree BST)\n{\nwhile( BST )\n{\nif( X &gt; BST-&gt;Data )\nBST = BST-&gt;Right;\nelse if( X &lt; BST-&gt;Data )\nBST = BST-&gt;Left;\nelse\nreturn BST;\n}\nreturn NULL;\n}\n</code></pre></p>"},{"location":"Course/FDS/Lec03/#findmin","title":"FindMin()","text":"<ul> <li>\u4eceBST\u4e2d\u67e5\u627e\u5e76\u8fd4\u56de\u6700\u5c0f\u5143\u7d20\u6240\u5728\u8282\u70b9\u7684\u5730\u5740</li> <li>\u6700\u5c0f\u5143\u7d20\u4e00\u5b9a\u5728\u6811\u7684\u6700\u5de6\u5206\u652f\u7684\u7aef\u8282\u70b9\u4e0a</li> </ul> <pre><code>Position FindMin( BinTree BST)\n{\nif( !BST )\nreturn NULL;\nelse if( !BST-&gt;Left)\nreturn BST;\nelse\nreturn FindMin( BST-&gt;Left );\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#findmax","title":"FindMax()","text":"<ul> <li>\u4ece\u4e8c\u53c9\u641c\u7d22\u6811BST\u4e2d\u67e5\u627e\u5e76\u8fd4\u56de\u6700\u5927\u5143\u7d20\u6240\u5728\u8282\u70b9\u7684\u5730\u5740</li> <li>\u6700\u5927\u5143\u7d20\u4e00\u5b9a\u5728\u6811\u7684\u6700\u53f3\u5206\u652f\u7684\u7aef\u8282\u70b9\u4e0a</li> </ul> <pre><code>Position FindMax( BinTree BST)\n{\nif( BST )\nwhile(BST-&gt;Right)\nBST = BST-&gt;Right;\nreturn BST;\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#insert","title":"Insert()","text":"<ul> <li>\u63d2\u5165X(\u53ef\u4ee5\u91c7\u7528\u4e0eFind\u7c7b\u4f3c\u7684\u65b9\u6cd5)</li> </ul> <pre><code>BinTree Insert( ElementType X, BinTree BST)\n{\nif( !BST )\n{\nBST = malloc(sizeof(struct TreeNode));\nBSt-&gt;Data = X;\nBST-&gt;Left = BST-&gt;Right = NULL;\n}\nelse\n{\nif( X &lt; BST-&gt;Data )\nBST-&gt;Left = Insert( X, BST-&gt;Left);\nelse if( X &gt; BST-&gt;Data)\nBST-&gt;Right = Insert( X, BST-&gt;Right);\n}\nreturn BST;\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#delete","title":"Delete()","text":"<ul> <li>\u8003\u8651\u4e09\u79cd\u60c5\u51b5<ol> <li>\u8981\u5220\u9664\u7684\u8282\u70b9\u662f\u53f6\u8282\u70b9\uff1a\u76f4\u63a5\u5220\u9664\uff0c\u5e76\u518d\u4fee\u6539\u5176\u7236\u8282\u70b9\u6307\u9488\u2014\u2014\u7f6e\u4e3aNULL</li> <li>\u8981\u5220\u9664\u7684\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u8282\u70b9\uff1a\u5c06\u5176\u7236\u8282\u70b9\u7684\u6307\u9488\u6307\u5411\u8981\u5220\u9664\u8282\u70b9\u7684\u5b69\u5b50\u8282\u70b9</li> <li>\u8981\u5220\u9664\u7684\u8282\u70b9\u6709\u5de6\u53f3\u4e24\u9897\u5b50\u6811\uff1a\u7528\u53e6\u4e00\u8282\u70b9\u66ff\u4ee3\u88ab\u5220\u9664\u8282\u70b9\u2014\u2014\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u5143\u7d20 \u6216\u8005 \u5de6\u5b50\u6811\u7684\u6700\u5927\u5143\u7d20</li> </ol> </li> </ul> <pre><code>BinTree Delete( ELementType X, BinTree BST)\n{\nPosition Tmp;\nif( !BST )\nprintf(\"\u8981\u5220\u9664\u7684\u5143\u7d20\u672a\u627e\u5230\");\nelse if( X &lt; BST-&gt;Data )\nBST-&gt;Left = Delete( X, BST-&gt;Left);/*\u5de6\u5b50\u6811\u9012\u5f52\u5220\u9664*/\nelse if( X &gt; BST-&gt;Right )\nBST-&gt;Right = Delete( X, BST-&gt;Right);/*\u53f3\u5b50\u6811\u9012\u5f52\u5220\u9664*/\nelse\nif( BST-&gt;Left &amp;&amp; BST-&gt;Right )\n{\nTmp = FindMin( BST-&gt;Right );\n/*\u5728\u53f3\u5b50\u6811\u4e2d\u627e\u5230\u6700\u5c0f\u5143\u7d20\u586b\u5145\u5220\u9664\u8282\u70b9*/\nBST-&gt;Data = Tmp-&gt;Data;\nBST-&gt;Right = Delete( BST-&gt;Data, BST-&gt;Right);\n}\nelse    /*\u88ab\u5220\u9664\u8282\u70b9\u6709\u4e00\u4e2a\u6216\u65e0\u5b50\u8282\u70b9*/\n{\nTmp = BST;\nif( !BST-&gt;Left) /*\u6709\u53f3\u5b69\u5b50\u6216\u65e0*/\nBST = BST-&gt;Right;\nelse if( !BST-&gt;Right)/*\u6709\u5de6\u5b69\u5b50\u6216\u65e0*/\nBST = BST-&gt;Left;\nfree( Tmp );\n}\nreturn BST;\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#threaded-binary-tree","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811 | Threaded binary tree","text":"<ul> <li>Rule 1: \u82e5\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5c06\u5176\u7a7a\u5de6\u513f\u5b50\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u524d\u9a71(\u4e0a\u4e00\u4e2a\u904d\u5386\u7684\u8282\u70b9)</li> <li>Rule 2: \u7a7a\u53f3\u513f\u5b50\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u7684\u540e\u7ee7(\u82e5\u524d\u9a71/\u540e\u7ee7\u5747\u65e0\uff0c\u5219\u5f15\u51fa\u4e3a NULL)</li> <li>Rule 3: \u7ebf\u7d22\u4e8c\u53c9\u6811\u5fc5\u987b\u6709\u4e00\u4e2a\u5934\u8282\u70b9\u4e14\u5176\u5de6\u513f\u5b50\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9</li> </ul> <pre><code>typedef  struct  ThreadedTreeNode  *PtrTo  ThreadedNode;\ntypedef  struct  PtrToThreadedNode  ThreadedTree;\ntypedef  struct  ThreadedTreeNode {\nint     LeftThread;   /* if it is TRUE, then Left */\nThreadedTree  Left;      /* is a thread, not a child ptr.   */ ElementTypeElement;intRightThread; /* if it is TRUE, then Right */\nThreadedTree  Right;    /* is a thread, not a child ptr.   */\n}\n</code></pre> <p>Quote</p> <p>CSDN-\u7ebf\u7d22\u4e8c\u53c9\u6811</p>"},{"location":"Course/FDS/Lec03/#priority-queues","title":"\u4f18\u5148\u961f\u5217 | Priority Queues","text":"<p>Abstract</p> <ul> <li>\u4f18\u5148\u961f\u5217(priority queue)\u4e5f\u79f0\u4e3a\u5806(heap)</li> <li>\u7279\u6b8a\u7684\u201d\u961f\u5217\u201d\uff0c\u53d6\u51fa\u5143\u7d20\u7684\u987a\u5e8f\u662f\u6309\u7167\u5143\u7d20\u7684\u4f18\u5148\u7ea7(\u5173\u952e\u5b57)\u5927\u5c0f\uff0c\u800c\u4e0d\u662f\u5143\u7d20\u8fdb\u5165\u961f\u5217\u7684\u5148\u540e\u987a\u5e8f</li> </ul> \u5806\u7684\u4e00\u4e9b\u4f8b\u5b50 <p> \u56fe\u7247\u6458\u81ea MOOC</p>"},{"location":"Course/FDS/Lec03/#_12","title":"\u82e5\u91c7\u7528\u6570\u7ec4\u6216\u94fe\u8868\u5b9e\u73b0","text":"<ul> <li>\u6570\u7ec4: <ul> <li>\u63d2\u5165 \u2014\u2014 \u5143\u7d20\u603b\u662f\u63d2\u5165\u5c3e\u90e8          ~ \\(\\Theta (1)\\) </li> <li>\u5220\u9664 \u2014\u2014 <ul> <li>\u67e5\u627e\u6700\u5927(\u6216\u6700\u5c0f)\u5173\u952e\u5b57        ~ \\(\\Theta (n)\\) </li> <li>\u4ece\u6570\u7ec4\u4e2d\u5220\u53bb\u9700\u8981\u79fb\u52a8\u7684\u5143\u7d20    ~ \\(O(n)\\) </li> </ul> </li> </ul> </li> <li>\u94fe\u8868:<ul> <li>\u63d2\u5165 \u2014\u2014 \u5143\u7d20\u603b\u662f\u63d2\u5165\u94fe\u8868\u5934\u90e8      ~ \\(\\Theta (1)\\) </li> <li>\u5220\u9664 \u2014\u2014<ul> <li>\u67e5\u627e\u6700\u5927(\u6216\u6700\u5c0f)\u5173\u952e\u5b57        ~ \\(\\Theta (n)\\) </li> <li>\u5220\u53bb\u8282\u70b9                      ~ \\(\\Theta (1)\\) </li> </ul> </li> </ul> </li> <li>\u6709\u5e8f\u6570\u7ec4:<ul> <li>\u63d2\u5165 \u2014\u2014 <ul> <li>\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e                ~ \\(O(n)\\) \u6216 \\(O(log_2 n)\\) </li> <li>\u79fb\u52a8\u4e0e\u5143\u7d20\u5e76\u63d2\u5165              ~ \\(O(n)\\) </li> </ul> </li> <li>\u5220\u9664 \u2014\u2014 \u5220\u53bb\u6700\u540e\u4e00\u4e2a\u5143\u7d20          ~ \\(\\Theta (1)\\)</li> </ul> </li> <li>\u6709\u5e8f\u94fe\u8868: <ul> <li>\u63d2\u5165 \u2014\u2014 <ul> <li>\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e                ~ \\(O(n)\\) </li> <li>\u63d2\u5165\u5143\u7d20                      ~ \\(\\Theta (1)\\) </li> </ul> </li> <li>\u5220\u9664 \u2014\u2014 \u5220\u9664\u9996\u5143\u7d20\u6216\u6700\u540e\u5143\u7d20      ~ \\(\\Theta (1)\\) </li> </ul> </li> </ul>"},{"location":"Course/FDS/Lec03/#binary-heap","title":"\u4e8c\u53c9\u5806 | binary heap","text":"<ul> <li>\u4e8c\u53c9\u5806\u662f\u4e00\u79cd\u5b8c\u5168\u4e8c\u53c9\u6811\u2014\u2014\u4efb\u610f\u8282\u70b9\u7684\u503c\u90fd \\(\\le\\) (\u6216 \\(\\ge\\) ) \u7236\u8282\u70b9\u7684\u503c(\u5373\u6700\u5927\u6700\u5c0f\u5806)</li> </ul> <p>\u5f15\u7533</p> <ul> <li>D-heap | D-\u5806 \u662f\u6307\u6bcf\u4e2a\u8282\u70b9\u6709 d \u4e2a\u513f\u5b50<ul> <li>\u82e5D-\u5806\u4f7f\u7528\u6570\u7ec4\u5b58\u50a8\uff0c\u4e14\u4e00\u4e2a\u8282\u70b9\u7684\u4e0b\u6807\u4e3a i </li> <li>\u5176\u7236\u8282\u70b9\u7684\u4f4d\u7f6e\u662f $\\lceil (i + d - 2)/d \\rceil $  </li> <li>\u5176\u7b2c\u4e00\u4e2a\u513f\u5b50\u4f4d\u4e8e $ (i - 2)d + 2 $ </li> <li>\u6700\u540e\u4e00\u4e2a\u513f\u5b50\u4f4d\u4e8e $ (i - 1)d + 1 $ </li> </ul> </li> </ul> \u4e00\u9053PTA\u4f8b\u9898 <p></p>"},{"location":"Course/FDS/Lec03/#_13","title":"\u5806\u7684\u64cd\u4f5c","text":"<p>\u4ee5\u6700\u5927\u5806\u4e3a\u4f8b</p> <ol> <li>\u6700\u5927\u5806\u7684\u521b\u5efa <pre><code>typedef struct HeapStruct *MaxHeap;\nstruct HeapStruct{\nElementType *Elements;  /*\u5b58\u50a8\u5806\u5143\u7d20\u7684\u6570\u7ec4*/\nint Size;   /*\u5806\u7684\u5f53\u524d\u5143\u7d20\u4e2a\u6570*/\nint Capacity;   /*\u5806\u7684\u6700\u5927\u5bb9\u91cf*/\n};\nMaxHeap Create( int MaxSize )\n{\nMaxHeap H = malloc(sizeof( struct HeapStruct));\nH-&gt;Elements = malloc((MaxSize+1) * sizeof(ELementType));\nH-&gt;Size = 0;\nH-&gt;Capacity = MaxSize;\nH-&gt;Elements[0] = MaxData;\n/*\u5b9a\u4e49\u201c\u54e8\u5175\u201d\u4e3a\u5927\u4e8e\u5806\u4e2d\u6240\u6709\u53ef\u80fd\u5143\u7d20\u7684\u503c\uff0c\u4fbf\u4e8e\u4ee5\u540e\u66f4\u5feb\u64cd\u4f5c*/\nreturn H;\n}\n</code></pre></li> <li>\u63d2\u5165\u2014\u2014\u5148\u653e\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u548c\u7236\u8282\u70b9\u6bd4\u8f83\u4ea4\u6362\u00b7\u00b7\u00b7 <pre><code>void Insert(MaxHeap H, ElementType item)\n{\n/*\u5c06\u5143\u7d20item\u63d2\u5165\u5230\u6700\u5927\u5806H\uff0c\u5176\u4e2dH-&gt;Elements[0]\u5df2\u7ecf\u5b9a\u4e49\u4e3a\u54e8\u5175*/\nint i;\nif(IsFull(H))\n{\nprintf(\"\u6700\u5927\u5806\u5df2\u6ee1\");\nreturn ;\n}\ni = ++H-&gt;Size;  /*i\u6307\u5411\u63d2\u5165\u540e\u5806\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e*/\nfor(; H-&gt;Elements[i/2] &lt; item; i /=2)\nH-&gt;Elements[i] = H-&gt;Elements[i/2];  /*\u5411\u4e0b\u8fc7\u6ee4\u8282\u70b9*/\nH-&gt;Elements[i] = item;  /*\u5c06item\u63d2\u5165*/\n}\n</code></pre> <p><code>H-&gt;Elements[0]</code> \u662f\u54e8\u5175\u5143\u7d20\uff0c\u5b83\u4e0d\u5c0f\u4e8e\u5806\u4e2d\u7684\u6700\u5927\u5143\u7d20\uff0c\u63a7\u5236\u5faa\u73af\u7ed3\u675f</p> </li> <li>\u5220\u9664\u2014\u2014\u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u653e\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u548c\u513f\u5b50\u6bd4\u8f83\u4ea4\u6362\u00b7\u00b7\u00b7 <pre><code>ElementType DeleteMax( MaxHeap H)\n{/*\u4ece\u6700\u5927\u5806H\u4e2d\u53d6\u51fa\u952e\u503c\u4e3a\u6700\u5927\u7684\u5143\u7d20\uff0c\u5e76\u5220\u9664\u4e00\u4e2a\u8282\u70b9*/\nint Parent, Child;\nElementType MaxItem, temp;\nif( IsEmpty(H))\n{\nprintf(\"\u6700\u5927\u5806\u5df2\u4e3a\u7a7a\");\nreturn ;\n}\nMaxItem = H-&gt;Elements[1];   /*\u53d6\u51fa\u6839\u8282\u70b9\u6700\u5927\u503c*/\n/*\u7528\u6700\u5927\u5806\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5411\u4e0a\u8fc7\u6ee4\u4e0b\u5c42\u8282\u70b9*/\ntemp = H-&gt;Elements[H-&gt;Size--];\nfor( Parent=1; Parent*2 &lt;= H-&gt;Size; Parent = Child)\n{\nChild = Parent * 2;\nif((Child != H-&gt;Size) &amp;&amp; (H-&gt;Elements[Child] &lt; H-&gt;Elements[Child+1]))\nChild ++;   /*Child\u6307\u5411\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u8f83\u5927\u8005*/\nif( temp &gt;= H-&gt;Elements[Child])\nbreak;\nelse    /*\u79fb\u52a8temp\u5143\u7d20\u5230\u4e0b\u4e00\u5c42*/\nH-&gt;Elements[Parent] = H-&gt;Elements[Child];\n}\nH-&gt;Elements[Parent] = temp;\nreturn MaxItem;\n}\n</code></pre></li> <li>Percolate: \u81ea\u4e0a\u800c\u4e0b\u6216\u81ea\u4e0b\u800c\u4e0a\u5806\u5316(\u5c06\u5143\u7d20\u5411\u4e0a\u6216\u5411\u4e0b\u79fb\u52a8)<ul> <li>\u53ef\u4ee5\u5b9e\u73b0\u975e\u6700\u503c\u5143\u7d20\u7684\u5220\u9664</li> </ul> </li> <li>\u6784\u5efa\u4e00\u4e2a\u5806\u2014\u2014\u5c06\u5df2\u5b58\u5728\u7684 N \u4e2a\u5143\u7d20\u6309\u5806\u8981\u6c42\u5b58\u653e\u5230\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4<ul> <li>\u901a\u8fc7\u63d2\u5165\u64cd\u4f5c\uff0c\u5c06 N \u4e2a\u5143\u7d20\u76f8\u7ee7\u63d2\u5165\u5230\u4e00\u4e2a\u521d\u59cb\u5316\u4e3a\u7a7a\u7684\u6808\u4e2d\uff0c\u65f6\u95f4\u4ee3\u4ef7\u6700\u5927\u4e3a \\(O(NlogN)\\) </li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N)\\) \u7684\u5efa\u7acb\u65b9\u6cd5<ol> <li>\u5c06 N \u4e2a\u5143\u7d20\u6309\u8f93\u5165\u987a\u5e8f\u5b58\u5165\uff0c\u5148\u6ee1\u8db3\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u7279\u6027</li> <li>\u8c03\u6574\u8282\u70b9\u4f4d\u7f6e\uff0c\u5373\u8fdb\u884c Percolate \u64cd\u4f5c\u4ee5\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6709\u5e8f\u7279\u6027</li> </ol> </li> </ul> </li> </ol> \u5b8c\u6574\u4ee3\u7801 <pre><code>typedef struct HNode *Heap; /* \u5806\u7684\u7c7b\u578b\u5b9a\u4e49 */\nstruct HNode {\nElementType *Data; /* \u5b58\u50a8\u5143\u7d20\u7684\u6570\u7ec4 */\nint Size;          /* \u5806\u4e2d\u5f53\u524d\u5143\u7d20\u4e2a\u6570 */\nint Capacity;      /* \u5806\u7684\u6700\u5927\u5bb9\u91cf */\n};\ntypedef Heap MaxHeap; /* \u6700\u5927\u5806 */\ntypedef Heap MinHeap; /* \u6700\u5c0f\u5806 */\n#define MAXDATA 1000  /* \u8be5\u503c\u5e94\u6839\u636e\u5177\u4f53\u60c5\u51b5\u5b9a\u4e49\u4e3a\u5927\u4e8e\u5806\u4e2d\u6240\u6709\u53ef\u80fd\u5143\u7d20\u7684\u503c */\nMaxHeap CreateHeap( int MaxSize )\n{ /* \u521b\u5efa\u5bb9\u91cf\u4e3aMaxSize\u7684\u7a7a\u7684\u6700\u5927\u5806 */\nMaxHeap H = (MaxHeap)malloc(sizeof(struct HNode));\nH-&gt;Data = (ElementType *)malloc((MaxSize+1)*sizeof(ElementType));\nH-&gt;Size = 0;\nH-&gt;Capacity = MaxSize;\nH-&gt;Data[0] = MAXDATA; /* \u5b9a\u4e49\"\u54e8\u5175\"\u4e3a\u5927\u4e8e\u5806\u4e2d\u6240\u6709\u53ef\u80fd\u5143\u7d20\u7684\u503c*/\nreturn H;\n}\nbool IsFull( MaxHeap H )\n{\nreturn (H-&gt;Size == H-&gt;Capacity);\n}\nbool Insert( MaxHeap H, ElementType X )\n{ /* \u5c06\u5143\u7d20X\u63d2\u5165\u6700\u5927\u5806H\uff0c\u5176\u4e2dH-&gt;Data[0]\u5df2\u7ecf\u5b9a\u4e49\u4e3a\u54e8\u5175 */\nint i;\nif ( IsFull(H) ) { printf(\"\u6700\u5927\u5806\u5df2\u6ee1\");\nreturn false;\n}\ni = ++H-&gt;Size; /* i\u6307\u5411\u63d2\u5165\u540e\u5806\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e */\nfor ( ; H-&gt;Data[i/2] &lt; X; i/=2 )\nH-&gt;Data[i] = H-&gt;Data[i/2]; /* \u4e0a\u6ee4X */\nH-&gt;Data[i] = X; /* \u5c06X\u63d2\u5165 */\nreturn true;\n}\n#define ERROR -1 /* \u9519\u8bef\u6807\u8bc6\u5e94\u6839\u636e\u5177\u4f53\u60c5\u51b5\u5b9a\u4e49\u4e3a\u5806\u4e2d\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\u5143\u7d20\u503c */\nbool IsEmpty( MaxHeap H )\n{\nreturn (H-&gt;Size == 0);\n}\nElementType DeleteMax( MaxHeap H )\n{ /* \u4ece\u6700\u5927\u5806H\u4e2d\u53d6\u51fa\u952e\u503c\u4e3a\u6700\u5927\u7684\u5143\u7d20\uff0c\u5e76\u5220\u9664\u4e00\u4e2a\u8282\u70b9 */\nint Parent, Child;\nElementType MaxItem, X;\nif ( IsEmpty(H) ) {\nprintf(\"\u6700\u5927\u5806\u5df2\u4e3a\u7a7a\");\nreturn ERROR;\n}\nMaxItem = H-&gt;Data[1]; /* \u53d6\u51fa\u6839\u8282\u70b9\u5b58\u653e\u7684\u6700\u5927\u503c */\n/* \u7528\u6700\u5927\u5806\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5411\u4e0a\u8fc7\u6ee4\u4e0b\u5c42\u8282\u70b9 */\nX = H-&gt;Data[H-&gt;Size--]; /* \u6ce8\u610f\u5f53\u524d\u5806\u7684\u89c4\u6a21\u8981\u51cf\u5c0f */\nfor( Parent=1; Parent*2&lt;=H-&gt;Size; Parent=Child ) {\nChild = Parent * 2;\nif( (Child!=H-&gt;Size) &amp;&amp; (H-&gt;Data[Child]&lt;H-&gt;Data[Child+1]) )\nChild++;  /* Child\u6307\u5411\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u8f83\u5927\u8005 */\nif( X &gt;= H-&gt;Data[Child] ) break; /* \u627e\u5230\u4e86\u5408\u9002\u4f4d\u7f6e */\nelse  /* \u4e0b\u6ee4X */\nH-&gt;Data[Parent] = H-&gt;Data[Child];\n}\nH-&gt;Data[Parent] = X;\nreturn MaxItem;\n} /*----------- \u5efa\u9020\u6700\u5927\u5806 -----------*/\nvoid PercDown( MaxHeap H, int p )\n{ /* \u4e0b\u6ee4\uff1a\u5c06H\u4e2d\u4ee5H-&gt;Data[p]\u4e3a\u6839\u7684\u5b50\u5806\u8c03\u6574\u4e3a\u6700\u5927\u5806 */\nint Parent, Child;\nElementType X;\nX = H-&gt;Data[p]; /* \u53d6\u51fa\u6839\u8282\u70b9\u5b58\u653e\u7684\u503c */\nfor( Parent=p; Parent*2&lt;=H-&gt;Size; Parent=Child ) {\nChild = Parent * 2;\nif( (Child!=H-&gt;Size) &amp;&amp; (H-&gt;Data[Child]&lt;H-&gt;Data[Child+1]) )\nChild++;  /* Child\u6307\u5411\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u8f83\u5927\u8005 */\nif( X &gt;= H-&gt;Data[Child] ) break; /* \u627e\u5230\u4e86\u5408\u9002\u4f4d\u7f6e */\nelse  /* \u4e0b\u6ee4X */\nH-&gt;Data[Parent] = H-&gt;Data[Child];\n}\nH-&gt;Data[Parent] = X;\n}\nvoid BuildHeap( MaxHeap H )\n{ /* \u8c03\u6574H-&gt;Data[]\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6709\u5e8f\u6027  */\n/* \u8fd9\u91cc\u5047\u8bbe\u6240\u6709H-&gt;Size\u4e2a\u5143\u7d20\u5df2\u7ecf\u5b58\u5728H-&gt;Data[]\u4e2d */\nint i;\n/* \u4ece\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\uff0c\u5230\u6839\u8282\u70b91 */\nfor( i = H-&gt;Size/2; i&gt;0; i-- )\nPercDown( H, i );\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#disjoint-set","title":"\u5e76\u67e5\u96c6 | disjoint set","text":"<p>Abstract</p> <p>\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u4e24\u79cd\u64cd\u4f5c: </p> <ul> <li>Union | \u5408\u5e76\u96c6\u5408</li> <li>Find | \u67e5\u8be2\u5143\u7d20\u6240\u5728\u96c6\u5408</li> </ul> <p>\u5e76\u67e5\u96c6\u4e2d\u96c6\u5408\u5b58\u50a8\u7684\u4e24\u79cd\u5b9e\u73b0: </p> <ul> <li>\u6811\u7ed3\u6784\u5b58\u50a8: \u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u96c6\u5408\u5143\u7d20</li> </ul> <p>Example</p> <p></p> <ul> <li>\u6570\u7ec4\u5b58\u50a8: \u5c06\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u63cf\u8ff0\u4e3a <pre><code>typedef struct{\nElementType Data;\nint Parent;\n}SetType;\n</code></pre></li> </ul> <p>Example</p> <p></p>"},{"location":"Course/FDS/Lec03/#-find","title":"\u96c6\u5408\u8fd0\u7b97 \u2013 Find","text":"<p>\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u6240\u5728\u96c6\u5408(\u7528\u6839\u8282\u70b9\u8868\u793a)</p> <pre><code>int Find( SetType S[], ELementType X)\n{\n/*\u5728\u6570\u7ec4S\u4e2d\u67e5\u627e\u503c\u4e3aX\u7684\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408*/\n/*MaxSize\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u4e3a\u6570\u7ec4S\u7684\u6700\u5927\u957f\u5ea6*/\nint i;\nfor( i=0; i &lt; MaxSize &amp;&amp; S[i].Data != X; i++);\nif( i &gt;= MaxSize )\nreturn -1;  /*\u672a\u627e\u5230X,\u8fd4\u56de -1*/\nfor( ; S[i].Parent &gt;= 0; i = S[i].Parent);\nreturn i;   /*\u627e\u5230X\u6240\u5c5e\u7684\u96c6\u5408\uff0c\u8fd4\u56de\u6811\u6839\u8282\u70b9\u5728\u6570\u7ec4S\u4e2d\u7684\u4e0b\u6807*/ }\n</code></pre>"},{"location":"Course/FDS/Lec03/#-union","title":"\u96c6\u5408\u8fd0\u7b97 \u2013 Union","text":"<ol> <li>\u5206\u522b\u627e\u5230 X1 \u548c X2 \u4e24\u4e2a\u5143\u7d20\u6240\u5728\u96c6\u5408\u6811\u7684\u6839\u8282\u70b9</li> <li>\u82e5\u4e0d\u540c\u6839\uff0c\u5219\u5c06\u5176\u4e2d\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u6570\u7ec4\u4e0b\u6807\u8bbe\u4e3a\u53e6\u4e00\u6839\u8282\u70b9\u7684\u6570\u7ec4\u4e0b\u6807 <pre><code>void Union( SetType S[], ElementType X1, ElementType X2)\n{\nint Root1, Root2;\nRoot1 = Find(S, X1);\nRoot2 = Find(S, X2);\nif( Root1 != Root2)\nS[Root2].Parent = Root1;\n}\n</code></pre> <p>\u4e3a\u6539\u5584\u5408\u5e76\u540e\u7684\u67e5\u627e\u6027\u80fd\uff0c\u53ef\u4ee5\u91c7\u7528\u5c06\u5c0f\u7684\u96c6\u5408\u5408\u5e76\u5230\u76f8\u5bf9\u5927\u7684\u96c6\u5408\u4e2d(\u5e76\u7528\u5229\u7528\u6570\u7ec4\u4e0b\u6807\u63d0\u793a\u96c6\u5408\u4e2d\u5143\u7d20\u6570\u91cf) \u56fe\u7247\u6458\u81ea MOOC</p> </li> </ol>"},{"location":"Course/FDS/Lec03/#smart-union-union-by-size","title":"Smart Union \u2013 Union-by-Size","text":"<ul> <li>\u6309\u5927\u5c0f\u5408\u5e76(union-by-size)\u59cb\u7ec8\u5c06\u5c0f\u7684\u6811\u5408\u5e76\u5230\u5927\u7684\u6811\u4e0a\uff0c\u8fdb\u800c\u51cf\u5c0f\u6811\u7684\u9ad8\u5ea6</li> <li>\u4ee4 S[root] = -size (size \u8868\u793a\u6811\u7684\u5927\u5c0f\u5e76\u521d\u59cb\u5316\u4e3a -1)</li> </ul> <p>Lemma</p> <ul> <li>Let \\(T\\) be a tree created by union-by-size with N nodes, then \\(height(T) \\le \\lfloor log_2N \\rfloor + 1\\)</li> <li>Proof: \u901a\u8fc7\u5f52\u7eb3\u6cd5\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u96c6\u5408\u540d\u6700\u591a\u66f4\u6539 \\(log_2 N\\) \u6b21</li> <li>\u4e14 N \u6b21 union \u548c M \u6b21 find \u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O( N + M log_2 N )\\) </li> </ul> Quote <p></p> <p>\u5728\u6570\u7ec4\u4e2d\u91c7\u7528\u6811\u7684\u5927\u5c0f\u7684\u8d1f\u503c\u6765\u8bb0\u5f55\uff0c\u4ee5\u8bc1\u660e\u82e5\u4f7f\u7528\u6309\u5927\u5c0f\u6c42\u5e76\u5219\u8fde\u7eed M \u6b21\u8fd0\u7b97\u9700\u8981 \\(O(M)\\) \u5e73\u5747\u65f6\u95f4\u3002\u8fd9\u662f\u56e0\u4e3a\u5f53\u968f\u673a\u7684 Union \u6267\u884c\u65f6\u6574\u4e2a\u7b97\u6cd5\u4e00\u822c\u53ea\u6709\u4e00\u4e9b\u5f88\u5c0f\u7684\u96c6\u5408\uff08\u901a\u5e38\u542b\u4e00\u4e2a\u5143\u7d20\uff09\u4e0e\u5927\u96c6\u5408\u5408\u5e76\u3002</p>"},{"location":"Course/FDS/Lec03/#smart-union-union-by-height","title":"Smart Union \u2013 Union-by-Height","text":"<ul> <li>\u6309\u9ad8\u5ea6\u5408\u5e76(union-by-height)\u59cb\u7ec8\u5c06\u6d45\u7684\u6811\u6210\u4e3a\u6df1\u7684\u6811</li> <li>\u540c\u6837\u4fdd\u8bc1\u4e86\u6240\u6709\u7684\u6811\u7684\u6df1\u5ea6\u6700\u591a\u662f \\(O(log N)\\) </li> </ul> Quote"},{"location":"Course/FDS/Lec03/#path-compression","title":"\u8def\u5f84\u538b\u7f29 | Path Compression","text":"<ul> <li>\u8def\u5f84\u538b\u7f29\u5728\u4e00\u6b21 Find \u64cd\u4f5c\u671f\u95f4\u6267\u884c\u3002\u8bbe\u64cd\u4f5c\u4e3a Find(X)\uff0c\u6b64\u65f6\u8def\u5f84\u538b\u7f29\u7684\u6548\u679c\u662f: \u4ece X \u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f7f\u5176\u7236\u8282\u70b9\u53d8\u6210\u6839\u3002 <pre><code>SetType Find(ElementType X, DisjSet S)\n{\nreturn (S[X] &lt;= 0) ? X : S[X] = Find(S[X], S);\n}\n</code></pre></li> <li>\u8def\u5f84\u538b\u7f29\u5bf9\u4e8e\u57fa\u672c\u7684 Find \u64cd\u4f5c\u552f\u4e00\u7684\u53d8\u5316\u662f\u4f7f\u5f97 S[X] \u7b49\u4e8e\u7531 Find \u8fd4\u56de\u7684\u503c</li> <li>\u5728\u96c6\u5408\u7684\u6839\u88ab\u9012\u5f52\u627e\u5230\u540e\uff0c X \u5c31\u76f4\u63a5\u6307\u5411\u5b83\uff0c\u56e0\u6b64\u5b9e\u73b0\u8def\u5f84\u538b\u7f29</li> </ul>"},{"location":"Course/FDS/Lec04/","title":"\u56fe | Graph","text":""},{"location":"Course/FDS/Lec04/#definitions","title":"Definitions","text":"<ol> <li>Length of a path: \u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee</li> <li>Simple path: Path \u4e2d\u7684\u70b9 vi1, vi2, \u00b7\u00b7\u00b7, vin \u90fd\u4e0d\u540c</li> <li>\u65e0\u5411\u56fe<ol> <li>connected: \u82e5\u5b58\u5728\u4e00\u6761\u4ece vi \u5230 vj \u7684\u8def\u5f84\uff0c\u5219\u79f0 vi \u548c vj \u8fde\u901a</li> <li>connected graph: \u4efb\u610f\u70b9\u4e4b\u95f4\u90fd\u8fde\u901a\uff0c\u79f0\u65e0\u5411\u56fe\u662f\u8fde\u901a\u7684</li> <li>connected component: \u65e0\u5411\u56fe\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe</li> </ol> </li> <li>tree: \u8fde\u901a\u7684\u65e0\u73af\u56fe</li> <li>DAG: directed acyclic graph | \u6709\u5411\u65e0\u73af\u56fe </li> <li>Strongly connected component: \u6709\u5411\u56fe\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe</li> <li>Degree(v): <ol> <li>\u5bf9\u6709\u5411\u56fe\uff0c\u5ea6\u5206\u4e3a\u5165\u5ea6\u548c\u51fa\u5ea6</li> <li>\u5bf9\u65e0\u5411\u56fe\uff0c\u5ea6\u6570\u662f\u4e0e\u5176\u76f8\u90bb\u7684\u8282\u70b9\u6570</li> <li>\u8fb9\u6570\u7b49\u4e8e\u6240\u6709\u8282\u70b9\u7684\u5ea6\u6570\u548c\u9664\u4ee5 2</li> </ol> </li> </ol>"},{"location":"Course/FDS/Lec04/#_1","title":"\u56fe\u7684\u8868\u793a","text":"<ol> <li>\u90bb\u63a5\u77e9\u9635 G[N][N] \u2014\u2014 N \u4e2a\u9876\u70b9\u4ece 0 \u5230 N-1 \u7f16\u53f7<ul> <li>G[i][j] = &lt; vi, vj &gt; \u662f G \u4e2d\u7684\u8fb9 ? 1 : 0</li> </ul> </li> </ol> <p>Tip</p> <ul> <li>\u5bf9\u4e8e\u65e0\u5411\u56fe\u7684\u5b58\u50a8\uff0c\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a N(N+1)/2 \u7684\u4e00\u7ef4\u6570\u7ec4 A \u5b58\u50a8 {G00, G10, G11, \u00b7\u00b7\u00b7, G(n-1)0, \u00b7\u00b7\u00b7, G(n-1)(n-1)}, \u5219 Gij \u5728 A \u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807\u662f: i * (i + 1) / 2 + j</li> <li>\u5bf9\u4e8e\u7f51\u7edc\uff0c\u53ea\u8981\u628a G[i][j] \u7684\u503c\u5b9a\u4e49\u4e3a\u8fb9 &lt; vi, vj &gt; \u7684\u6743\u91cd\u5373\u53ef</li> </ul> <ol> <li>\u90bb\u63a5\u8868\u8868\u793a\u6cd5 \u2014\u2014 G[N] \u4e3a\u6307\u9488\u6570\u7ec4\uff0c\u5bf9\u5e94\u77e9\u9635\u6bcf\u884c\u8981\u7ed9\u94fe\u8868\u4e14\u53ea\u5b58\u975e 0 \u5143\u7d20 <ul> <li>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u8fb9\u4f1a\u88ab\u5b58\u50a8\u4e24\u6b21</li> <li>\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u65e0\u6cd5\u904d\u5386\u5165\u5ea6\uff0c\u5982\u679c\u8981\u67e5\u8be2\u5165\u5ea6\u53ef\u91c7\u7528\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5:<ul> <li>\u589e\u52a0\u9006\u90bb\u63a5\u8868  </li> <li>\u91c7\u7528\u591a\u91cd\u94fe\u8868  </li> </ul> </li> </ul> </li> </ol>"},{"location":"Course/FDS/Lec04/#_2","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>Abstract</p> <ul> <li>AOV \u7f51\u7edc \u2014\u2014 \u5b9a\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u8fb9\u8868\u793a\u5148\u540e\u5173\u7cfb</li> <li>\u82e5\u5b58\u5728\u4e00\u6761\u4ece i \u5230 j \u7684\u8def\u5f84\uff0c\u5219\u79f0 i \u4e3a j  \u7684\u524d\u9a71(predecessor), j \u662f i \u7684\u540e\u7ee7(successor)</li> <li>\u82e5\u5b58\u5728\u4e00\u6761\u8fb9 &lt; i, j &gt;\uff0c\u5219\u79f0 i \u662f j \u7684\u76f4\u63a5\u524d\u9a71(immediate predecessor)\uff0cj \u662f i \u7684\u76f4\u63a5\u540e\u7ee7</li> </ul>"},{"location":"Course/FDS/Lec04/#_3","title":"\u62d3\u6251\u5e8f","text":"<ul> <li>\u82e5\u5728\u56fe\u4e2d\u4ece V \u5230 W \u6709\u4e00\u6761\u6709\u5411\u8def\u5f84\uff0c\u5219 V \u4e00\u5b9a\u6392\u5728 W \u4e4b\u524d\u3002\u6ee1\u8db3\u6b64\u6761\u4ef6\u7684\u9876\u70b9\u5e8f\u5217\u79f0\u4e3a\u4e00\u4e2a\u62d3\u6251\u5e8f(\u83b7\u5f97\u4e00\u4e2a\u62d3\u6251\u5e8f\u7684\u8fc7\u7a0b\u5c31\u662f\u62d3\u6251\u6392\u5e8f)</li> <li>AOV \u5982\u679c\u6709\u5408\u7406\u7684\u62d3\u6251\u5e8f\uff0c\u5219\u5fc5\u5b9a\u662f\u6709\u5411\u65e0\u73af\u56fe(Directed Acyclic Graph, DAG) <p> \u5982\u679c\u6709\u5411\u56fe\u4e2d\u51fa\u73b0\u73af\uff0c\u4e00\u5b9a\u4e0d\u53ef\u80fd\u5f97\u5230\u4e00\u4e2a\u5408\u7406\u7684\u62d3\u6251\u5e8f</p> </li> </ul>"},{"location":"Course/FDS/Lec04/#_4","title":"\u62d3\u6251\u6392\u5e8f\u7b97\u6cd5","text":"<pre><code>void Topsort(Graph G)\n{\nint Counter;\nVertex V, W;\nfor(Counter = 0; Counter &lt; NUmVertex; Counter ++)\n{\nV = FindNeVertexOfDegreeZero();     /* O(|V|) */\nif(V == NotAVertex)\n{\nError(\"Graph has a cycle\");\nbreak;\n}\nTopNum[V] = Counter;    /*or output V*/\nfor(each W adjacent to V)\nIndegree[W] --;\n}\n}\n</code></pre> <ul> <li>\u4e0a\u8ff0\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $T = O(|V|^2) $</li> <li>Improvement: \u968f\u65f6\u5c06\u5165\u5ea6\u53d8\u4e3a 0 \u7684\u9876\u70b9\u653e\u5230\u4e00\u4e2a\u5bb9\u5668\u4e2d(\u6808\u6216\u961f\u5217\u7b49)</li> </ul> Improvement<pre><code>void Topsort( Graph G )\n{   Queue  Q;\nint  Counter = 0;\nVertex  V, W;\nQ = CreateQueue( NumVertex );  MakeEmpty( Q );\nfor ( each vertex V )\nif ( Indegree[ V ] == 0 )   Enqueue( V, Q );\nwhile ( !IsEmpty( Q ) )\n{\nV = Dequeue( Q );\nTopNum[ V ] = ++ Counter; /* assign next */\nfor ( each W adjacent to V )\nif ( \u2013 \u2013 Indegree[ W ] == 0 )  Enqueue( W, Q );\n}  /* end-while */\nif ( Counter != NumVertex )\nError( \u201cGraph has a cycle\u201d );\nDisposeQueue( Q ); /* free memory */}\n</code></pre> <p>\u82e5\u6709\u73af\u5219\u4e00\u5b9a\u4f1a\u5b58\u5728\u627e\u4e0d\u5230\u5165\u5ea6\u4e3a 0 \u7684\u70b9\uff0c\u6765\u8fdb\u5165\u6784\u6210\u73af\u7684\u5b50\u56fe</p> \u90bb\u63a5\u8868\u5b58\u50a8\u2014\u62d3\u6251\u6392\u5e8f\u7b97\u6cd5 <pre><code>bool TopSort( LGraph Graph, Vertex TopOrder[] )\n{ /* \u5bf9Graph\u8fdb\u884c\u62d3\u6251\u6392\u5e8f,  TopOrder[]\u987a\u5e8f\u5b58\u50a8\u6392\u5e8f\u540e\u7684\u9876\u70b9\u4e0b\u6807 */\nint Indegree[MaxVertexNum], cnt;\nVertex V;\nPtrToAdjVNode W;\nQueue Q = CreateQueue( Graph-&gt;Nv );\n/* \u521d\u59cb\u5316Indegree[] */\nfor (V=0; V&lt;Graph-&gt;Nv; V++)\nIndegree[V] = 0;\n/* \u904d\u5386\u56fe\uff0c\u5f97\u5230Indegree[] */\nfor (V=0; V&lt;Graph-&gt;Nv; V++)\nfor (W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next)\nIndegree[W-&gt;AdjV]++; /* \u5bf9\u6709\u5411\u8fb9&lt;V, W-&gt;AdjV&gt;\u7d2f\u8ba1\u7ec8\u70b9\u7684\u5165\u5ea6 */\n/* \u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u5165\u5217 */\nfor (V=0; V&lt;Graph-&gt;Nv; V++)\nif ( Indegree[V]==0 )\nAddQ(Q, V);\n/* \u4e0b\u9762\u8fdb\u5165\u62d3\u6251\u6392\u5e8f */ cnt = 0; while( !IsEmpty(Q) ){\nV = DeleteQ(Q); /* \u5f39\u51fa\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9 */\nTopOrder[cnt++] = V; /* \u5c06\u4e4b\u5b58\u4e3a\u7ed3\u679c\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20 */\n/* \u5bf9V\u7684\u6bcf\u4e2a\u90bb\u63a5\u70b9W-&gt;AdjV */\nfor ( W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next )\nif ( --Indegree[W-&gt;AdjV] == 0 )/* \u82e5\u5220\u9664V\u4f7f\u5f97W-&gt;AdjV\u5165\u5ea6\u4e3a0 */\nAddQ(Q, W-&gt;AdjV); /* \u5219\u8be5\u9876\u70b9\u5165\u5217 */ } /* while\u7ed3\u675f*/\nif ( cnt != Graph-&gt;Nv )\nreturn false; /* \u8bf4\u660e\u56fe\u4e2d\u6709\u56de\u8def, \u8fd4\u56de\u4e0d\u6210\u529f\u6807\u5fd7 */ else\nreturn true;\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#_5","title":"\u6700\u77ed\u8def\u7b97\u6cd5","text":"<p>\u6700\u77ed\u8def\u5f84\u95ee\u9898\u7684\u62bd\u8c61</p> <p>\u5728\u7f51\u7edc\u4e2d\uff0c\u6c42\u4e24\u4e2a\u4e0d\u540c\u9876\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u6700\u5c0f\u7684\u90a3\u4e00\u6761\u8def\u5f84\u3002\u8fd9\u6761\u8def\u5f84\u5373\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84(Shortest Path), \u7b2c\u4e00\u4e2a\u9876\u70b9\u4e3a\u6e90\u70b9(Source), \u6700\u540e\u4e00\u4e2a\u9876\u70b9\u4e3a\u7ec8\u70b9(Destination)</p>"},{"location":"Course/FDS/Lec04/#_6","title":"\u95ee\u9898\u5206\u7c7b","text":"<ol> <li>\u5355\u6e90\u6700\u77ed\u8def\u5f84: \u4ece\u56fa\u5b9a\u6e90\u70b9\u51fa\u53d1\uff0c\u6c42\u5176\u5230\u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84<ol> <li>(\u6709\u5411)\u65e0\u6743\u56fe</li> <li>(\u6709\u5411)\u6709\u6743\u56fe</li> </ol> </li> <li>\u591a\u6e90\u6700\u77ed\u8def\u5f84: \u6c42\u4efb\u610f\u4e24\u9876\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84</li> </ol>"},{"location":"Course/FDS/Lec04/#_7","title":"\u65e0\u6743\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def","text":"<p>\u6309\u7167\u9012\u589e(\u9012\u51cf)\u7684\u987a\u5e8f\u627e\u51fa\u5230\u5404\u9876\u70b9\u7684\u6700\u77ed\u8def \u91c7\u7528 BFS(Breadth-first search)</p> <p>Implementation</p> <pre><code>Table[i].Dist = distance from s to vi  /* initialized to be \uf0a5 except fors */\nTable[i].Known = 1 if vi is checked; or 0 if not\nTable[ i ].Path = for tracking the path   /* initialized to be 0 */\n</code></pre> <ol> <li>Normal: <pre><code>void Unweighted( Table T )\n{   int  CurrDist;\nVertex  V, W;\nfor ( CurrDist = 0; CurrDist &lt; NumVertex; CurrDist ++ ) {\nfor ( each vertex V )\nif ( !T[ V ].Known &amp;&amp; T[ V ].Dist == CurrDist ) {\nT[ V ].Known = true;\nfor ( each W adjacent to V )\nif ( T[ W ].Dist == Infinity ) {\nT[ W ].Dist = CurrDist + 1;\nT[ W ].Path = V;\n} /* end-if Dist == Infinity */\n} /* end-if !Known &amp;&amp; Dist == CurrDist */\n}  /* end-for CurrDist */\n}\n</code></pre> <p>\\(T = O(|V|^2)\\) </p> </li> <li>Improvement: <pre><code>void Unweighted( Table T )\n{   /* T is initialized with the source vertex S given */\nQueue  Q;\nVertex  V, W;\nQ = CreateQueue (NumVertex );  MakeEmpty( Q );\nEnqueue( S, Q ); /* Enqueue the source vertex */\nwhile ( !IsEmpty( Q ) ) {\nV = Dequeue( Q );\nT[ V ].Known = true; /* not really necessary */\nfor ( each W adjacent to V )\nif ( T[ W ].Dist == Infinity ) {\nT[ W ].Dist = T[ V ].Dist + 1;\nT[ W ].Path = V;\nEnqueue( W, Q );\n} /* end-if Dist == Infinity */\n} /* end-while */\nDisposeQueue( Q ); /* free memory */\n}\n</code></pre> <p>\\(T = O(|V|+|E|)\\) </p> </li> </ol>"},{"location":"Course/FDS/Lec04/#_8","title":"\u6709\u6743\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def","text":"<p>\u6309\u7167\u9012\u589e\u7684\u987a\u5e8f\u627e\u51fa\u5230\u5404\u9876\u70b9\u7684\u6700\u77ed\u8def</p>"},{"location":"Course/FDS/Lec04/#dijkstra","title":"Dijkstra \u7b97\u6cd5","text":"<ul> <li>\u4ee4 S = {\u6e90\u70b9 s + \u5df2\u7ecf\u786e\u5b9a\u4e86\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9 vi }</li> <li>\u5bf9\u4efb\u4e00\u672a\u6536\u5f55\u7684\u9876\u70b9 v, \u5b9a\u4e49 dist[v] \u4e3a s \u5230 v \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u4f46\u8be5\u8def\u5f84\u4ec5\u7ecf\u8fc7 s \u4e2d\u7684\u9876\u70b9\u3002</li> <li>\u7531\u4e8e\u8def\u5f84\u6309\u7167\u9012\u589e\u987a\u5e8f\u751f\u6210<ul> <li>\u771f\u6b63\u7684\u6700\u77ed\u8def\u5fc5\u987b\u53ea\u7ecf\u8fc7 S \u4e2d\u7684\u9876\u70b9</li> <li>\u6bcf\u6b21\u4ece\u672a\u6536\u5f55\u7684\u9876\u70b9\u4e2d\u9009\u4e00\u4e2a dist \u6700\u5c0f\u7684\u6536\u5f55</li> <li>\u589e\u52a0\u4e00\u4e2a v \u8fdb\u5165 S\uff0c\u53ef\u80fd\u5f71\u54cd\u53e6\u4e00\u4e2a w \u7684 dist \u503c(dist[w] = min{dist[w], dist[v] + &lt; v, w &gt; \u7684\u6743\u91cd})</li> </ul> </li> </ul> <p>code</p> \u4f2a\u7801<pre><code>void Dijkstra(Table T)\n{\nVertex V, W;\nfor(;;)     /* O(|V|) */\n{\nV = smallest unknown distance vertex;\nif(V == NotAVertex)\nbreak;\nT[V].Known = true;\nfor(each W adjacent to V)\nif(!T[W].Known)\nif(T[V].Dist + Cvw &lt; T[W].Dist)\n{\nDecrease(T[W].Dist to T[V].Dist + Cvw);\nT[W].Path = V;\n}/* end-if update W */\n}/* end-for(;;) */\n}\n/* \u4e0d\u80fd\u89e3\u51b3\u6709\u8d1f\u8fb9\u7684\u60c5\u51b5 */\n</code></pre> Dijkstra\u7b97\u6cd5\u7684\u58f0\u660e <pre><code>typedef int Vertex;\nstruct TableEntry\n{\nList Header;      /* Adjacency list */\nint Known;\nDistType Dist;\nVertex Path;\n};\n/* Vertices are numbered from 0 */\n#define NotAVertex (-1)\ntypedef struct TableEntry Table[NumVertex];\n</code></pre> \u8868\u521d\u59cb\u5316\u4f8b\u7a0b <pre><code>void InitTable(Vertex Start, Graph G, Table T)\n{\nint i;\nReadGraph(G, T);  /* Read graph somehow */\nfor(i = 0; i &lt; NumVertex; i++)\n{\nT[i].Known = False;\nT[i].Dist = Infinity;\nT[i].Path = NotAVertex;\n}\nT[Start].dist = 0;\n}\n</code></pre> \u663e\u793a\u5b9e\u9645\u6700\u77ed\u8def\u5f84\u7684\u4f8b\u7a0b <pre><code>/* Print shortest path to V after Dijkstra has run */\n/* Assume that the path exists */\nvoid PrintPath(Vertex V, Table T)\n{\nif(T[V].Path != NotAVertex)\n{\nPrintPath(T[V].Path, T);\nprintf(\" to\");\n}\nprintf(\"%v\", V);  // %v \u662f\u4f2a\u4ee3\u7801\n}\n</code></pre> <ul> <li>\u56e0\u4e3a\u5224\u5b9a\u6761\u4ef6 T[V].Dist + Cvw &lt; T[W].Dist\uff0cT[i].Dist \u8981\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77</li> <li>\u4f18\u5316\u5982\u4e0b\uff1a<ul> <li>Implementation 1: \u76f4\u63a5\u626b\u63cf\u6240\u6709\u672a\u6536\u5f55\u9876\u70b9 \u2013 \\(O(|V|)\\) <ul> <li>\\(T = O(|V|^2 + |E|)\\) \u2013 \u5bf9\u4e8e\u7a20\u5bc6\u56fe\u6548\u679c\u597d</li> </ul> </li> <li>Implementation 2: \u5c06 dist \u5b58\u5728\u6700\u5c0f\u5806\u4e2d \u2013 \\(O(log|V|)\\) <ul> <li>\u66f4\u65b0 T[W].Dist \u7684\u503c \u2013 \\(O(log|V|)\\) </li> <li>$ T = O(|V|log|V| + |E|log|V|) = O(|E|log|V|) $  \u2013 \u5bf9\u7a00\u758f\u56fe\u6548\u679c\u597d(\u6307 V \u548c E \u4e00\u4e2a\u6570\u91cf\u7ea7)</li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/FDS/Lec04/#_9","title":"\u5e26\u8d1f\u6743\u56fe","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(T = O(|V| \\times |E|)\\) <pre><code>void  WeightedNegative( Table T )\n{   Queue  Q;\nVertex  V, W;\nQ = CreateQueue (NumVertex );  MakeEmpty( Q );\nEnqueue( S, Q ); /* Enqueue the source vertex */\nwhile ( !IsEmpty( Q ) ) {\nV = Dequeue( Q );   /* each vertex can dequeue at most |V| times */\nfor ( each W adjacent to V )\nif ( T[ V ].Dist + Cvw &lt; T[ W ].Dist )  /* no longer once per edge */\n{\nT[ W ].Dist = T[ V ].Dist + Cvw;\nT[ W ].Path = V;\nif ( W is not already in Q )\nEnqueue( W, Q );\n} /* end-if update */\n} /* end-while */\nDisposeQueue( Q ); /* free memory */\n}\n/* negative-cost cycle will cause indefinite loop */\n</code></pre></p>"},{"location":"Course/FDS/Lec04/#acyclic-graph","title":"\u65e0\u73af\u56fe | Acyclic Graph","text":"<p>\u6b64\u90e8\u5206\u4e3b\u8981\u662f\u5176\u5728 AOE(Activity On Edge) \u7f51\u7edc\u7684\u5e94\u7528  \u4e00\u822c\u7528\u4e8e\u5b89\u6392\u9879\u76ee\u7684\u5de5\u5e8f</p> <ul> <li>\u6bcf\u4e2a\u7ed3\u70b9\u5b58\u50a8\u4e00\u4e2a\u6700\u65e9\u5b8c\u6210\u65f6\u95f4\u548c\u6700\u665a\u5b8c\u6210\u65f6\u95f4</li> <li>\u6bcf\u6761\u8fb9\u5b58\u5728\u4e00\u4e2a\u6301\u7eed\u65f6\u95f4(\u8fb9\u6743 C )\u548c\u4e00\u4e2a\u677e\u5f1b\u65f6\u95f4</li> <li>\u76f8\u5173\u8ba1\u7b97:<ul> <li>EC(earliest completion): \u6700\u65e9\u5b8c\u6210\u65f6\u95f4\uff0c\u4ece\u524d\u5f80\u540e\u8ba1\u7b97</li> <li>LC(latest completion): \u6700\u665a\u5b8c\u6210\u65f6\u95f4\uff0c\u7528\u9700\u8981\u6700\u957f\u7684\u65f6\u95f4\u4ece\u540e\u5411\u524d\u4f9d\u6b21\u51cf\u53bb</li> <li>Slack Time: \u677e\u5f1b\u65f6\u95f4 | \u673a\u52a8\u65f6\u95f4\uff0c\u6700\u65e9\u5b8c\u6210\u7684\u65f6\u95f4\u548c\u8981\u6c42\u7684\u6700\u665a\u5b8c\u6210\u7684\u65f6\u95f4\u4e4b\u95f4\u7684\u65f6\u95f4</li> <li>Critical Path: \u5173\u952e\u8def\u5f84\uff0c\u53ef\u80fd\u4e0d\u6b62\u4e00\u6761\u4f46\u627e\u51fa\u4e00\u6761\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u90fd\u662f\u5173\u952e\u70b9\uff08\u677e\u5f1b\u65f6\u95f4\u4e3a0\uff09\u7684\u5c31\u884c</li> </ul> </li> </ul> Quote <p> \u56fe\u7247\u6458\u81ea\u8bfe\u7a0bPPT  CSDN-AOE\u7f51\u7edc(\u5927\u529b\u6d77\u68e0\u7684\u535a\u5ba2)</p> \u62d3\u5c55 <p>\u591a\u6e90\u6700\u77ed\u8def</p> <p>\u7b97\u6cd5\u2014\u2014(\u76f4\u63a5\u5c06\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\u8c03\u7528 |V| \u904d or Floyd \u7b97\u6cd5)</p> Floyd \u7b97\u6cd5<pre><code>void Floyd()\n{\nfor( i = 0; i &lt; N; i++)\n{\nfor( j = 0; j &lt; N; j++)\n{\nD[i][j] = G[i][j];\npath[i][j] = -1;\n/*path\u7528\u4e8e\u8bb0\u5f55\u8def\u5f84*/\n}\n}\nfor( k = 0; k &lt; N; k++)\n{\nfor( i = 0; i &lt; N; i++)\n{\nfor( j = 0; j &lt; N; j++)\n{\nif( D[i][k] + D[k][j] &lt; D[i][j])\n{\nD[i][j] = D[i][k] + D[k][j];\npath[i][j] = k;\n/*\u5982\u679c\u5c06i\u5230j\u7684\u6700\u77ed\u8def\u5f84*/\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#minimum-spanning-tree","title":"\u6700\u5c0f\u751f\u6210\u6811 | Minimum Spanning Tree","text":"<ul> <li>\u662f\u4e00\u68f5\u6811\uff0c\u4e14\uff1a<ul> <li>\u65e0\u56de\u8def</li> <li>\u8fde\u901a\u7684</li> <li>|V|\u4e2a\u9876\u70b9\u4e00\u5b9a\u6709|V|-1\u6761\u8fb9</li> </ul> </li> <li>\u662f\u751f\u6210\u6811<ul> <li>\u5305\u542b\u5168\u90e8\u9876\u70b9</li> <li>|V|-1\u6761\u8fb9\u90fd\u5728\u56fe\u4e2d</li> </ul> </li> <li>\u8fb9\u7684\u6743\u91cd\u548c\u6700\u5c0f</li> </ul> <p>\u5411\u751f\u6210\u6811\u4e2d\u4efb\u52a0\u4e00\u6761\u8fb9\u90fd\u4e00\u5b9a\u6784\u6210\u56de\u8def \u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728 \\(\\Leftrightarrow\\) \u56fe\u8fde\u901a</p>"},{"location":"Course/FDS/Lec04/#prim","title":"Prim \u7b97\u6cd5","text":"<p>\u7a20\u5bc6\u56fe\u4e00\u822c\u7528\u6b21\u7b97\u6cd5\uff0c\u6bcf\u6b21\u5bfb\u627e\u7684\u662f\u548c\u5df2\u7ecf\u6536\u7f57\u8fdb\u6700\u5c0f\u751f\u6210\u6811\u6240\u6709\u9876\u70b9\u76f8\u90bb\u7684\u8fb9 \u7c7b\u4f3c Dijkstra \u7b97\u6cd5, \\(T = O( |V| ^2 )\\) </p> code \u90bb\u63a5\u77e9\u9635\u5b58\u50a8<pre><code>/* \u90bb\u63a5\u77e9\u9635\u5b58\u50a8 - Prim\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5 */\nVertex FindMinDist( MGraph Graph, WeightType dist[] )\n{ /* \u8fd4\u56de\u672a\u88ab\u6536\u5f55\u9876\u70b9\u4e2ddist\u6700\u5c0f\u8005 */\nVertex MinV, V;\nWeightType MinDist = INFINITY;\nfor (V=0; V&lt;Graph-&gt;Nv; V++) {\nif ( dist[V]!=0 &amp;&amp; dist[V]&lt;MinDist) {\n/* \u82e5V\u672a\u88ab\u6536\u5f55\uff0c\u4e14dist[V]\u66f4\u5c0f */\nMinDist = dist[V]; /* \u66f4\u65b0\u6700\u5c0f\u8ddd\u79bb */\nMinV = V; /* \u66f4\u65b0\u5bf9\u5e94\u9876\u70b9 */\n}\n}\nif (MinDist &lt; INFINITY) /* \u82e5\u627e\u5230\u6700\u5c0fdist */\nreturn MinV; /* \u8fd4\u56de\u5bf9\u5e94\u7684\u9876\u70b9\u4e0b\u6807 */\nelse return ERROR;  /* \u82e5\u8fd9\u6837\u7684\u9876\u70b9\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de-1\u4f5c\u4e3a\u6807\u8bb0 */\n}\nint Prim( MGraph Graph, LGraph MST )\n{ /* \u5c06\u6700\u5c0f\u751f\u6210\u6811\u4fdd\u5b58\u4e3a\u90bb\u63a5\u8868\u5b58\u50a8\u7684\u56feMST\uff0c\u8fd4\u56de\u6700\u5c0f\u6743\u91cd\u548c */\nWeightType dist[MaxVertexNum], TotalWeight;\nVertex parent[MaxVertexNum], V, W;\nint VCount;\nEdge E;\n/* \u521d\u59cb\u5316\u3002\u9ed8\u8ba4\u521d\u59cb\u70b9\u4e0b\u6807\u662f0 */\nfor (V=0; V&lt;Graph-&gt;Nv; V++) {\n/* \u8fd9\u91cc\u5047\u8bbe\u82e5V\u5230W\u6ca1\u6709\u76f4\u63a5\u7684\u8fb9\uff0c\u5219Graph-&gt;G[V][W]\u5b9a\u4e49\u4e3aINFINITY */\ndist[V] = Graph-&gt;G[0][V];\nparent[V] = 0; /* \u6682\u4e14\u5b9a\u4e49\u6240\u6709\u9876\u70b9\u7684\u7236\u7ed3\u70b9\u90fd\u662f\u521d\u59cb\u70b90 */ }\nTotalWeight = 0; /* \u521d\u59cb\u5316\u6743\u91cd\u548c     */\nVCount = 0;      /* \u521d\u59cb\u5316\u6536\u5f55\u7684\u9876\u70b9\u6570 */\n/* \u521b\u5efa\u5305\u542b\u6240\u6709\u9876\u70b9\u4f46\u6ca1\u6709\u8fb9\u7684\u56fe\u3002\u6ce8\u610f\u7528\u90bb\u63a5\u8868\u7248\u672c */\nMST = CreateGraph(Graph-&gt;Nv);\nE = (Edge)malloc( sizeof(struct ENode) ); /* \u5efa\u7acb\u7a7a\u7684\u8fb9\u7ed3\u70b9 */\n/* \u5c06\u521d\u59cb\u70b90\u6536\u5f55\u8fdbMST */\ndist[0] = 0;\nVCount ++;\nparent[0] = -1; /* \u5f53\u524d\u6811\u6839\u662f0 */\nwhile (1) {\nV = FindMinDist( Graph, dist );\n/* V = \u672a\u88ab\u6536\u5f55\u9876\u70b9\u4e2ddist\u6700\u5c0f\u8005 */\nif ( V==ERROR ) /* \u82e5\u8fd9\u6837\u7684V\u4e0d\u5b58\u5728 */\nbreak;   /* \u7b97\u6cd5\u7ed3\u675f */\n/* \u5c06V\u53ca\u76f8\u5e94\u7684\u8fb9&lt;parent[V], V&gt;\u6536\u5f55\u8fdbMST */\nE-&gt;V1 = parent[V];\nE-&gt;V2 = V;\nE-&gt;Weight = dist[V];\nInsertEdge( MST, E );\nTotalWeight += dist[V];\ndist[V] = 0;\nVCount++;\nfor( W=0; W&lt;Graph-&gt;Nv; W++ ) /* \u5bf9\u56fe\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9W */\nif ( dist[W]!=0 &amp;&amp; Graph-&gt;G[V][W]&lt;INFINITY ) {\n/* \u82e5W\u662fV\u7684\u90bb\u63a5\u70b9\u5e76\u4e14\u672a\u88ab\u6536\u5f55 */\nif ( Graph-&gt;G[V][W] &lt; dist[W] ) {\n/* \u82e5\u6536\u5f55V\u4f7f\u5f97dist[W]\u53d8\u5c0f */\ndist[W] = Graph-&gt;G[V][W]; /* \u66f4\u65b0dist[W] */\nparent[W] = V; /* \u66f4\u65b0\u6811 */\n}\n}\n} /* while\u7ed3\u675f*/\nif ( VCount &lt; Graph-&gt;Nv ) /* MST\u4e2d\u6536\u7684\u9876\u70b9\u4e0d\u5230|V|\u4e2a */\nTotalWeight = ERROR;\nreturn TotalWeight;   /* \u7b97\u6cd5\u6267\u884c\u5b8c\u6bd5\uff0c\u8fd4\u56de\u6700\u5c0f\u6743\u91cd\u548c\u6216\u9519\u8bef\u6807\u8bb0 */\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#kruskal","title":"Kruskal \u7b97\u6cd5","text":"<p>\u5c06\u6bcf\u4e2a\u9876\u70b9\u90fd\u770b\u4f5c\u4e00\u68f5\u6811\uff0c\u6536\u96c6\u7684\u662f\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u6536\u5165\u6784\u6210\u56de\u8def\u5c31\u4e0d\u6536\u5165\uff0c\u5982\u679c\u4e0d\u6784\u6210\u5c31\u6536\u5165\uff08\u4ece\u8fb9\u6743\u91cd\u6700\u5c0f\u5f00\u59cb\u6536\uff0c\u6536\u5230\u8fb9\u7684\u6570\u91cf\u4e3a|V|-1\u4e3a\u6b62\uff09</p> <p>\u7a00\u758f\u56fe\u4e00\u822c\u7528\u6b64\u7b97\u6cd5\uff08\u8fb9\u7684\u6570\u91cf\u548c\u9876\u70b9\u6570\u91cf\u7ea7\u5dee\u4e0d\u591a\uff09 $T = O(|E|log|E|) $</p> \u4f2a\u7801<pre><code>void Kruskal ( Graph G )\n{   T = { } ;\nwhile ( T contains less than |V| \uf02d1 edges &amp;&amp; E is not empty ) {\nchoose a least cost edge (v, w) from E ;    /* DeleteMin */\ndelete (v, w) from E ;\nif  ( (v, w) does not create a cycle in T )     add (v, w) to T ;   /* Union / Find */\nelse\ndiscard (v, w) ;\n}\nif( T contains fewer than |V| - 1 edges )\nError ( \u201cNo spanning tree\u201d ) ;}\n</code></pre> code \u90bb\u63a5\u77e9\u9635\u5b58\u50a8<pre><code>/* \u90bb\u63a5\u8868\u5b58\u50a8 - Kruskal\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5 */\n/*-------------------- \u9876\u70b9\u5e76\u67e5\u96c6\u5b9a\u4e49 --------------------*/\ntypedef Vertex ElementType; /* \u9ed8\u8ba4\u5143\u7d20\u53ef\u4ee5\u7528\u975e\u8d1f\u6574\u6570\u8868\u793a */\ntypedef Vertex SetName;     /* \u9ed8\u8ba4\u7528\u6839\u7ed3\u70b9\u7684\u4e0b\u6807\u4f5c\u4e3a\u96c6\u5408\u540d\u79f0 */\ntypedef ElementType SetType[MaxVertexNum]; /* \u5047\u8bbe\u96c6\u5408\u5143\u7d20\u4e0b\u6807\u4ece0\u5f00\u59cb */\nvoid InitializeVSet( SetType S, int N )\n{ /* \u521d\u59cb\u5316\u5e76\u67e5\u96c6 */\nElementType X;\nfor ( X=0; X&lt;N; X++ ) S[X] = -1;\n}\nvoid Union( SetType S, SetName Root1, SetName Root2 )\n{ /* \u8fd9\u91cc\u9ed8\u8ba4Root1\u548cRoot2\u662f\u4e0d\u540c\u96c6\u5408\u7684\u6839\u7ed3\u70b9 */\n/* \u4fdd\u8bc1\u5c0f\u96c6\u5408\u5e76\u5165\u5927\u96c6\u5408 */\nif ( S[Root2] &lt; S[Root1] ) { /* \u5982\u679c\u96c6\u54082\u6bd4\u8f83\u5927 */\nS[Root2] += S[Root1];     /* \u96c6\u54081\u5e76\u5165\u96c6\u54082  */\nS[Root1] = Root2;\n}\nelse {                         /* \u5982\u679c\u96c6\u54081\u6bd4\u8f83\u5927 */\nS[Root1] += S[Root2];     /* \u96c6\u54082\u5e76\u5165\u96c6\u54081  */\nS[Root2] = Root1;\n}\n}\nSetName Find( SetType S, ElementType X )\n{ /* \u9ed8\u8ba4\u96c6\u5408\u5143\u7d20\u5168\u90e8\u521d\u59cb\u5316\u4e3a-1 */\nif ( S[X] &lt; 0 ) /* \u627e\u5230\u96c6\u5408\u7684\u6839 */\nreturn X;\nelse\nreturn S[X] = Find( S, S[X] ); /* \u8def\u5f84\u538b\u7f29 */\n}\nbool CheckCycle( SetType VSet, Vertex V1, Vertex V2 )\n{ /* \u68c0\u67e5\u8fde\u63a5V1\u548cV2\u7684\u8fb9\u662f\u5426\u5728\u73b0\u6709\u7684\u6700\u5c0f\u751f\u6210\u6811\u5b50\u96c6\u4e2d\u6784\u6210\u56de\u8def */\nVertex Root1, Root2;\nRoot1 = Find( VSet, V1 ); /* \u5f97\u5230V1\u6240\u5c5e\u7684\u8fde\u901a\u96c6\u540d\u79f0 */\nRoot2 = Find( VSet, V2 ); /* \u5f97\u5230V2\u6240\u5c5e\u7684\u8fde\u901a\u96c6\u540d\u79f0 */\nif( Root1==Root2 ) /* \u82e5V1\u548cV2\u5df2\u7ecf\u8fde\u901a\uff0c\u5219\u8be5\u8fb9\u4e0d\u80fd\u8981 */\nreturn false;\nelse { /* \u5426\u5219\u8be5\u8fb9\u53ef\u4ee5\u88ab\u6536\u96c6\uff0c\u540c\u65f6\u5c06V1\u548cV2\u5e76\u5165\u540c\u4e00\u8fde\u901a\u96c6 */\nUnion( VSet, Root1, Root2 );\nreturn true;\n}\n}\n/*-------------------- \u5e76\u67e5\u96c6\u5b9a\u4e49\u7ed3\u675f --------------------*/\n/*-------------------- \u8fb9\u7684\u6700\u5c0f\u5806\u5b9a\u4e49 --------------------*/\nvoid PercDown( Edge ESet, int p, int N )\n{ /* \u6539\u7f16\u4ee3\u78014.24\u7684PercDown( MaxHeap H, int p )    */\n/* \u5c06N\u4e2a\u5143\u7d20\u7684\u8fb9\u6570\u7ec4\u4e2d\u4ee5ESet[p]\u4e3a\u6839\u7684\u5b50\u5806\u8c03\u6574\u4e3a\u5173\u4e8eWeight\u7684\u6700\u5c0f\u5806 */\nint Parent, Child;\nstruct ENode X;\nX = ESet[p]; /* \u53d6\u51fa\u6839\u7ed3\u70b9\u5b58\u653e\u7684\u503c */\nfor( Parent=p; (Parent*2+1)&lt;N; Parent=Child ) {\nChild = Parent * 2 + 1;\nif( (Child!=N-1) &amp;&amp; (ESet[Child].Weight&gt;ESet[Child+1].Weight) )\nChild++;  /* Child\u6307\u5411\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u8f83\u5c0f\u8005 */\nif( X.Weight &lt;= ESet[Child].Weight ) break; /* \u627e\u5230\u4e86\u5408\u9002\u4f4d\u7f6e */\nelse  /* \u4e0b\u6ee4X */\nESet[Parent] = ESet[Child];\n}\nESet[Parent] = X;\n}\nvoid InitializeESet( LGraph Graph, Edge ESet )\n{ /* \u5c06\u56fe\u7684\u8fb9\u5b58\u5165\u6570\u7ec4ESet\uff0c\u5e76\u4e14\u521d\u59cb\u5316\u4e3a\u6700\u5c0f\u5806 */\nVertex V;\nPtrToAdjVNode W;\nint ECount;\n/* \u5c06\u56fe\u7684\u8fb9\u5b58\u5165\u6570\u7ec4ESet */\nECount = 0;\nfor ( V=0; V&lt;Graph-&gt;Nv; V++ )\nfor ( W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next )\nif ( V &lt; W-&gt;AdjV ) { /* \u907f\u514d\u91cd\u590d\u5f55\u5165\u65e0\u5411\u56fe\u7684\u8fb9\uff0c\u53ea\u6536V1&lt;V2\u7684\u8fb9 */\nESet[ECount].V1 = V;\nESet[ECount].V2 = W-&gt;AdjV;\nESet[ECount++].Weight = W-&gt;Weight;\n}\n/* \u521d\u59cb\u5316\u4e3a\u6700\u5c0f\u5806 */\nfor ( ECount=Graph-&gt;Ne/2; ECount&gt;=0; ECount-- )\nPercDown( ESet, ECount, Graph-&gt;Ne );\n}\nint GetEdge( Edge ESet, int CurrentSize )\n{ /* \u7ed9\u5b9a\u5f53\u524d\u5806\u7684\u5927\u5c0fCurrentSize\uff0c\u5c06\u5f53\u524d\u6700\u5c0f\u8fb9\u4f4d\u7f6e\u5f39\u51fa\u5e76\u8c03\u6574\u5806 */\n/* \u5c06\u6700\u5c0f\u8fb9\u4e0e\u5f53\u524d\u5806\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8fb9\u4ea4\u6362 */\nSwap( &amp;ESet[0], &amp;ESet[CurrentSize-1]);\n/* \u5c06\u5269\u4e0b\u7684\u8fb9\u7ee7\u7eed\u8c03\u6574\u6210\u6700\u5c0f\u5806 */\nPercDown( ESet, 0, CurrentSize-1 );\nreturn CurrentSize-1; /* \u8fd4\u56de\u6700\u5c0f\u8fb9\u6240\u5728\u4f4d\u7f6e */\n}\n/*-------------------- \u6700\u5c0f\u5806\u5b9a\u4e49\u7ed3\u675f --------------------*/\nint Kruskal( LGraph Graph, LGraph MST )\n{ /* \u5c06\u6700\u5c0f\u751f\u6210\u6811\u4fdd\u5b58\u4e3a\u90bb\u63a5\u8868\u5b58\u50a8\u7684\u56feMST\uff0c\u8fd4\u56de\u6700\u5c0f\u6743\u91cd\u548c */\nWeightType TotalWeight;\nint ECount, NextEdge;\nSetType VSet; /* \u9876\u70b9\u6570\u7ec4 */\nEdge ESet;    /* \u8fb9\u6570\u7ec4 */\nInitializeVSet( VSet, Graph-&gt;Nv ); /* \u521d\u59cb\u5316\u9876\u70b9\u5e76\u67e5\u96c6 */\nESet = (Edge)malloc( sizeof(struct ENode)*Graph-&gt;Ne );\nInitializeESet( Graph, ESet ); /* \u521d\u59cb\u5316\u8fb9\u7684\u6700\u5c0f\u5806 */\n/* \u521b\u5efa\u5305\u542b\u6240\u6709\u9876\u70b9\u4f46\u6ca1\u6709\u8fb9\u7684\u56fe\u3002\u6ce8\u610f\u7528\u90bb\u63a5\u8868\u7248\u672c */\nMST = CreateGraph(Graph-&gt;Nv);\nTotalWeight = 0; /* \u521d\u59cb\u5316\u6743\u91cd\u548c     */\nECount = 0;      /* \u521d\u59cb\u5316\u6536\u5f55\u7684\u8fb9\u6570 */\nNextEdge = Graph-&gt;Ne; /* \u539f\u59cb\u8fb9\u96c6\u7684\u89c4\u6a21 */\nwhile ( ECount &lt; Graph-&gt;Nv-1 ) {  /* \u5f53\u6536\u96c6\u7684\u8fb9\u4e0d\u8db3\u4ee5\u6784\u6210\u6811\u65f6 */\nNextEdge = GetEdge( ESet, NextEdge ); /* \u4ece\u8fb9\u96c6\u4e2d\u5f97\u5230\u6700\u5c0f\u8fb9\u7684\u4f4d\u7f6e */\nif (NextEdge &lt; 0) /* \u8fb9\u96c6\u5df2\u7a7a */\nbreak;\n/* \u5982\u679c\u8be5\u8fb9\u7684\u52a0\u5165\u4e0d\u6784\u6210\u56de\u8def\uff0c\u5373\u4e24\u7aef\u7ed3\u70b9\u4e0d\u5c5e\u4e8e\u540c\u4e00\u8fde\u901a\u96c6 */\nif ( CheckCycle( VSet, ESet[NextEdge].V1, ESet[NextEdge].V2 )==true ) {\n/* \u5c06\u8be5\u8fb9\u63d2\u5165MST */\nInsertEdge( MST, ESet+NextEdge );\nTotalWeight += ESet[NextEdge].Weight; /* \u7d2f\u8ba1\u6743\u91cd */\nECount++; /* \u751f\u6210\u6811\u4e2d\u8fb9\u6570\u52a01 */\n}\n}\nif ( ECount &lt; Graph-&gt;Nv-1 )\nTotalWeight = -1; /* \u8bbe\u7f6e\u9519\u8bef\u6807\u8bb0\uff0c\u8868\u793a\u751f\u6210\u6811\u4e0d\u5b58\u5728 */\nreturn TotalWeight;\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#dfs","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 | DFS","text":"<pre><code>void DFS ( Vertex V )  /* this is only a template */\n{   visited[ V ] = true;  /* mark this vertex to avoid cycles */\nfor ( each W adjacent to V )\nif ( !visited[ W ] )\nDFS( W );\n} /* T = O( |E| + |V| ) as long as adjacency lists are used */\n</code></pre> <p>\u662f\u5148\u5e8f\u904d\u5386\u7684\u4e00\u79cd\u63a8\u5e7f</p>"},{"location":"Course/FDS/Lec04/#binconnectivity","title":"\u53cc\u8fde\u901a | Binconnectivity","text":"<ul> <li>\u82e5\u4e00\u4e2a\u56fe\u4e0d\u662f\u53cc\u8fde\u901a\u7684\uff0c\u90a3\u4e48\u5c06\u5176\u5220\u9664\u540e\u56fe\u4e0d\u518d\u8fde\u901a\u7684\u9876\u70b9\u53eb\u505a\u5272\u70b9 (articulation point)</li> <li>\u82e5\u4e00\u4e2a\u8fde\u901a\u7684\u65e0\u5411\u56fe\u4e2d\u7684\u4efb\u4e00\u9876\u70b9\u5220\u9664\u540e\uff0c\u5269\u4e0b\u7684\u56fe\u4ecd\u7136\u8fde\u901a (\u5373\u8fde\u901a\u4e14\u65e0\u5272\u70b9) \uff0c\u5219\u79f0\u5176\u4e3a\u53cc\u8fde\u901a</li> <li>\u53cc\u8fde\u901a\u5206\u91cf (biconnected component) \u662f\u6781\u5927\u7684\u53cc\u8fde\u901a\u5b50\u56fe</li> </ul> \u5177\u6709\u5272\u70b9 C \u548c D \u7684\u56fe <ul> <li> <p>Tarjan\u7b97\u6cd5     ??? note \u201c\u5bf9\u9876\u70b9\u7684 Num \u8d4b\u503c\u4f8b\u7a0b\u201d <pre><code>/* Assign Num and compute Parents */\nvoid AssignNum(Vertex V)\n{\nVertex W;\nNum[V] = Counter ++;\nVisited[V] = True;\nfor each W adjacent to V\nif(!Visited[W])\n{\nParent[W] = V;\nAssignNum(W);\n}\n}\n</code></pre>         ??? example \u201c\u901a\u8fc7 DFS \u5efa\u7acb\u7684\u6700\u5c0f\u751f\u6210\u6811\u201d</p> <ul> <li>Num[v] \u8868\u793a v \u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\u6233\uff0c\u5373 DFS \u65f6\u7b2c\u51e0\u4e2a\u88ab\u8bbf\u95ee\uff08\u4ece0\u5f00\u59cb\uff09</li> <li>\u8ffd\u6eaf\u503c low[x]<ul> <li>\u5bf9\u4e8e\u4ece x \u5230 y \u7684\u8fb9\uff0c\u5982\u679c &lt; x, y &gt; \u5728\u6811\u4e0a\uff0c\u5219 low[x] = min(Num[x], low[y])</li> <li>\u5982\u679c &lt; x, y &gt; \u4e0d\u5728\u6811\u4e0a\uff0c\u5219 low[x] = min(Num[x], Num[y])</li> </ul> </li> <li>\u5bfb\u627e\u5272\u70b9\uff1a<ul> <li>\u5982\u679c u \u662f root\uff0c\u5219 u \u662f\u5272\u70b9\u5f53\u4e14\u4ec5\u5f53 u \u6709\u81f3\u5c11\u4e24\u4e2a\u513f\u5b50</li> <li>\u5982\u679c u \u4e0d\u662f root\uff0c\u5219 u \u662f\u5272\u70b9\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a\u513f\u5b50 v\uff0c\u6ee1\u8db3 Num[u] \\(\\leq\\) low[v]</li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/FDS/Lec04/#_10","title":"\u6b27\u62c9\u56de\u8def &amp; \u6b27\u62c9\u8def\u5f84","text":"<p>To Be Continued</p>"},{"location":"Course/System/","title":"Perface","text":"<p>Abstract</p> <p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u2161\u662fZJU\u8ba1\u7b97\u673a\u7cfb\u7edf\u7cfb\u5217\u8bfe\u7a0b\u4e4b\u4e00\uff0c\u5305\u62ec\u8ba1\u7ec4\u540e\u534a\u90e8\u5206\u548c\u64cd\u4f5c\u7cfb\u7edf\u524d\u534a\u90e8\u5206\u5185\u5bb9</p> \u671f\u672b\u8865\u5929 <p> \u8ba1\u7b97\u673a\u7cfb\u7edf\u2161-\u8ba1\u7ec4\u90e8\u5206  \u4e0b\u8f7d \u8ba1\u7b97\u673a\u7cfb\u7edf\u2161-OS\u90e8\u5206  \u4e0b\u8f7d </p> <p> </p>"},{"location":"Course/System/Lec01_Introduction/","title":"Introduction","text":"<ul> <li>Introduction<ul> <li>Interrupts and Traps</li> <li>Interrupt Handling</li> <li>Interrupt-drive I/O Cycle</li> <li>I/O: from System Call to Devices, and Back</li> <li>Direct Memory Access | DMA</li> <li>Storage Structure</li> <li>Storage Hierarchy<ul> <li>Performance of Storages</li> </ul> </li> <li>Caching</li> <li>MUltiprocessor Systems<ul> <li>Symmetric Multiprocessing Architecture</li> <li>NUMA</li> <li>Clustered Systems</li> <li>Distributed Systems</li> <li>Special-Purpose Systems</li> <li>Dual-mode operation**</li> <li>Transition between Modes</li> <li>Timer</li> <li>Process | \u8fdb\u7a0b<ul> <li>Resource Management: Process Management</li> <li>Process Management Activities</li> </ul> </li> <li>Thread | \u7ebf\u7a0b<ul> <li>From Process to Thread</li> </ul> </li> <li>Resource Management: Memory Management | \u5185\u5b58\u7ba1\u7406</li> <li>Resource Management: File Systems | \u6587\u4ef6\u7cfb\u7edf</li> <li>Resource Management: I/O System Management</li> <li>Separate Policy and Mechanism</li> <li>Virtualization</li> </ul> </li> <li>Three pieces\u4e2d\u7684Introduction<ul> <li>What happens when a program runs?</li> <li>All about Virtualization</li> <li>Virtualizing The CPU</li> <li>Virtualizing Memory</li> <li>Concurrency | \u5e76\u53d1</li> <li>I/O</li> </ul> </li> </ul> </li> </ul> <p>Introduction\u57fa\u672c\u662f\u7cfb\u7edf\u2161\u4e2d\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u90e8\u5206\u8bfe\u4e0a\u8981\u8bb2\u7684\u5185\u5bb9</p>"},{"location":"Course/System/Lec01_Introduction/#interrupts-and-traps","title":"Interrupts and Traps","text":"<ul> <li>Interrupt transfers control to the interrupt service routine </li> <li> <p>interrupt vector: a table containing addresses of all the service routines</p> </li> <li> <p>incoming interrupts are disabled while serving another interrupt to prevent a lost interrupt</p> </li> <li> <p>interrupt handler must save the (interrupted) execution states</p> </li> <li> <p>A trap is a software-generated interrupt, caused either by an error or a user request</p> </li> </ul> <p>error-&gt;\u6bd4\u5982\u9664\u6cd5\u6307\u4ee4\u88ab\u9664\u6570\u662f0\uff0cuser request-&gt;\u7528\u6237\u663e\u5f0f\u4ea7\u751f\u7684trap\u6bd4\u5982\u7cfb\u7edf\u8c03\u7528\uff0csvc\u6307\u4ee4\u7b49</p> <ul> <li> <p>an interrupt is asynchronous; a trap is synchronous</p> </li> <li> <p>e.g., system call, divided-by-zero exception, general protection exception\u2026</p> </li> <li> <p>Operating systems are usually interrupt-driven(\u6709\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u76f8\u5e94I/O\u4e2d\u65ad\u7b49\u7b49)</p> </li> </ul> <p>\u7528\u6237\u6001\u7684\u7a0b\u5e8f\u4e0d\u5141\u8bb8\u76f4\u63a5\u64cd\u63a7\u78c1\u76d8\u63a7\u5236\u5668\uff0c\u4f46\u53c8\u9700\u8981\u8bfb\u53d6\u5176\u4e2d\u7684\u6587\u4ef6\uff0c\u4f1a\u901a\u8fc7\u8fd0\u884c\u5728\u7279\u6743\u6001\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u64cd\u4f5c\uff08\u7cfb\u7edf\u8c03\u7528\uff09</p>"},{"location":"Course/System/Lec01_Introduction/#interrupt-handling","title":"Interrupt Handling","text":"<ul> <li> <p>Operating system preserves the execution state of the CPU</p> </li> <li> <p>save registers and the program counter (PC)</p> <p>\u4fdd\u5b58\u4e0a\u4e0b\u6587\u2014\u2014\u5bc4\u5b58\u5668\u548cPC\uff08\u4fdd\u5b58\u5230\u5185\u5b58\uff09</p> </li> <li> <p>OS determines which device caused the interrupt</p> </li> </ul> <ol> <li> <p>polling </p> <p>polling\u65b9\u5f0f\u7684\u4e2d\u65ad\uff0c\u4e0d\u8bba\u4ec0\u4e48\u7c7b\u578b\u4e2d\u65ad\u90fd\u4f1a\u5747\u4e3a\u8df3\u8f6c\u5230\u4e00\u4e2a\u7edf\u4e00\u7684\u5165\u53e3\uff0c\u7136\u540e\u7531\u8f6f\u4ef6\u53bb\u67e5\u8be2\u5bc4\u5b58\u5668\u4ece\u800c\u77e5\u9053\u4e2d\u65ad\u7684\u6765\u6e90</p> </li> <li> <p>vectored interrupt system</p> <p>\u786c\u4ef6\u5df2\u7ecf\u56fa\u5b9a\u597d\uff08\u533a\u5206\u597d\u4e2d\u65ad\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u8f6f\u4ef6\u518d\u53bb\u67e5\u8be2\uff09\uff0c\u4f1a\u76f4\u63a5\u8df3\u8f6c\u5230\u5bf9\u5e94\u5730\u5740</p> </li> </ol> <ul> <li>OS handles the interrupt by calling the device\u2019s driver\uff08\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff09</li> </ul> <p>\u5b8f\u5185\u6838\u7684\u91cd\u8981\u7ec4\u4ef6\u3002\u800c\u5bf9\u4e8e\u5fae\u5185\u6838\uff0c\u5f80\u5f80\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u653e\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u8303\u56f4\u5916\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u5e38\u5c06\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u7684\u5927\u90e8\u5206\u4ee3\u7801\u79fb\u5230\u7528\u6237\u6001\u3002</p> <ul> <li>OS restores the CPU execution to the saved state</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#interrupt-drive-io-cycle","title":"Interrupt-drive I/O Cycle","text":"<p>to be continued</p> <p></p> <ul> <li><code>device driver initiates I/O</code>\u662f\u901a\u8fc7<code>MMIO</code>|<code>Memory Map I/O</code>\u7684\u65b9\u5f0f\uff0c\u5b9e\u9645\u662f\u901a\u8fc7<code>STORE</code>\u6307\u4ee4\u53bb\u64cd\u4f5c\u5916\u8bbe\u7684\u4e2d\u65ad\u63a7\u5236\u5668\u7684\u5730\u5740\uff1b</li> <li>\u56e0\u4e3ainitiates I/O\uff0c\u5199\u78c1\u76d8\u662f\u5f88\u6162\u7684\u8fc7\u7a0b\uff0cCPU\u4e0d\u4f1a\u4e00\u76f4\u7b49\u5230I/O\u8bf7\u6c42\u5b8c\u6210\uff0c\u5f53\u78c1\u76d8\u5199\u5b8c\u540e\u4f1a\u6709\u56fe\u4e2d<code>4</code>\u4ee5Interrupt\u7684\u5f62\u5f0f\u544a\u8bc9CPU\uff08\u4e2d\u65ad\u63a7\u5236\u5668\u786c\u8fde\u7ebf\u7684\u65b9\u5f0f\uff09</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#io-from-system-call-to-devices-and-back","title":"I/O: from System Call to Devices, and Back","text":"<ul> <li>A program uses a system call to access system resources</li> <li>e.g., files, network</li> <li> <p>Operating system converts it to device access and issues I/O requests</p> </li> <li> <p>I/O requests are sent to the device driver, then to the controller</p> </li> <li> <p>e.g., read disk blocks, send/receive packets\u2026</p> </li> <li> <p>OS puts the program to wait (synchronous I/O) or returns to it without waiting (asynchronous I/O)</p> </li> <li> <p>OS may switches to another program when the requester is waiting</p> <p>\u5373\u4f7f\u662f\u540c\u6b65I/O, CPU\u4e5f\u4e0d\u662f\u76f2\u76ee\u7b49\u5f85\u72b6\u6001\u3002\u67d0\u4e00\u8fdb\u7a0b\u963b\u585e\u65f6\uff0cCPU\u53ef\u4ee5\u8c03\u5ea6\u53e6\u4e00\u8fdb\u7a0b</p> </li> <li> <p>I/O completes and the controller interrupts the OS</p> </li> <li> <p>OS processes the I/O, and then wakes up the program (synchronous I/O) or send its a signal (asynchronous I/O)</p> </li> </ul> <p>\u4e00\u79cd\u81ea\u4e0a\u800c\u4e0b\uff0c\u4e00\u79cd\u81ea\u4e0b\u800c\u4e0a</p>"},{"location":"Course/System/Lec01_Introduction/#direct-memory-access-dma","title":"Direct Memory Access | DMA","text":"<ul> <li>DMA is used for high-speed I/O devices able to transmit information at close to memory speeds </li> <li> <p>e.g., Ethernet, hard disk, cd rom\u2026</p> </li> <li> <p>Device driver sends an I/O descriptor the controller</p> </li> <li> <p>I/O descriptor: operation type (e.g., send/receive), memory address\u2026</p> </li> <li> <p>The controller transfers blocks of data between its local buffer and main memory without CPU intervention(\u63d0\u9ad8\u6548\u7387)</p> </li> </ul> <p>CPU\u4f1a\u544a\u8bc9\u663e\u5361\u9700\u8981\u7684\u6570\u636e\u8d77\u59cb\u5730\u5740\u5728\u54ea\uff0c\u6709\u591a\u957f\uff0c\u968f\u540e\u7531DMA\u642c\u8fd0\u6570\u636e\u3002\u642c\u8fd0\u7ed3\u675f\u4f1a\u901a\u8fc7\u786c\u4e2d\u65ad\u7684\u65b9\u5f0f\u544a\u8bc9CPU</p> <ul> <li>only one interrupt is generated when whole I/O request completes</li> </ul> <p>\u78c1\u76d8\u63a7\u5236\u5668\u5206\u4e3a\u5e38\u89c1\u7684HDD\u548cSSD</p>"},{"location":"Course/System/Lec01_Introduction/#storage-structure","title":"Storage Structure","text":"<ul> <li>Main memory: the only large storage that CPU can directly access</li> <li> <p>random access, and typically volatile</p> </li> <li> <p>Secondary storage: large nonvolatile storage capacity</p> </li> <li> <p>Magnetic disks are most common second-storage devices (HDD)\uff08\u7cfb\u7edf\u2162\uff09</p> <ul> <li>rigid metal or glass platters covered with magnetic recording material </li> </ul> </li> <li> <p>disk surface is logically divided into tracks and sectors</p> </li> <li> <p>disk controller determines the interaction between OS and the device</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#storage-hierarchy","title":"Storage Hierarchy","text":"<ul> <li>Storage systems can be organized in hierarchy</li> <li>speed</li> <li>cost</li> <li>volatility</li> </ul> <ul> <li>Caching: copying information into faster storage system</li> <li>main memory can be viewed as a cache for secondary storage</li> <li>CPU has a cache for main memory</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#performance-of-storages","title":"Performance of Storages","text":"Level 1 2 3 4 Name register cache main memory disk storage Typical size &lt; 1 KB &gt; 16 MB &gt; 16 GB &gt; 100 GB Implementation technology custom memory with multiple ports, CMOS on-chip or off-chip CMOS SRAM CMOS DRAM magnetic disk Access time(ns) 0.25-0.5 0.5-25 80-250 5,000.000 Bandwidth(MB/sec) 20,000-100,000 5000-10,000 1000-5000 20-150 Managed by compiler hardware operating system operating system Backed by cache main memory disk CD or tape"},{"location":"Course/System/Lec01_Introduction/#caching","title":"Caching","text":"<ul> <li>Caching is an important principle, performed at many levels</li> <li>e.g., in hardware, operating system, user program\u2026</li> <li>Caching: data in use copied from slower to faster storage temporarily</li> <li> <p>faster storage (cache) is checked first to determine if data is there</p> </li> <li> <p>if it is, data is used directly from the cache (fast)</p> </li> <li> <p>if not, data is first copied to cache and used there</p> </li> <li>Cache is usually smaller than storage being cached</li> <li>Cache management is an important design problem</li> <li>e.g., cache size and replacement policy</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#multiprocessor-systems","title":"MUltiprocessor Systems","text":"<ul> <li> <p>Most old systems have one single general-purpose processor</p> </li> <li> <p>e.g., smartphone, PC, server, mainframe</p> </li> <li> <p>most systems also have special-purpose processors as well</p> </li> <li> <p>Multiprocessor systems have grown in use and importance</p> </li> <li> <p>also known as parallel systems, tightly-coupled systems</p> </li> <li> <p>advantages: increased throughput, economy of scale, increased reliability \u2013 graceful degradation or fault tolerance</p> </li> <li> <p>two types: asymmetric multiprocessing and symmetric multiprocessing (SMP)</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#symmetric-multiprocessing-architecture","title":"Symmetric Multiprocessing Architecture","text":"<p>\u5404CPU\u6709\u540c\u7b49\u5730\u4f4d</p> <p></p>"},{"location":"Course/System/Lec01_Introduction/#numa","title":"NUMA","text":"<ul> <li>Non-Uniform Memory Access System</li> <li>Access local memory is fast, scale well</li> </ul> <p>\u6bcf\u4e2aCPU\u6709\u81ea\u5df1\u7684memory\uff0c\u4f46\u6240\u6709\u7684memory\u662f\u7edf\u4e00\u7f16\u5236\u7684\uff0c\u5373CPU\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709memory</p> <p></p>"},{"location":"Course/System/Lec01_Introduction/#clustered-systems","title":"Clustered Systems","text":"<ul> <li>Multiple systems work together through high-speed network</li> <li> <p>usually sharing storage via a storage-area network (SAN)</p> </li> <li> <p>Clusters provide a high-availability service that can survive failures</p> </li> <li>asymmetric clustering has one machine in hot-standby mode</li> <li> <p>symmetric clustering has multiple nodes running applications, monitoring each other</p> </li> <li> <p>Some clusters are designed for high-performance computing (HPC)</p> </li> <li>applications must be written to use parallelization</li> </ul> <p></p>"},{"location":"Course/System/Lec01_Introduction/#distributed-systems","title":"Distributed Systems","text":"<ul> <li> <p>A collection of separate, possibly heterogeneous, systems inter-connected through networks</p> </li> <li> <p>Network OS allows systems to exchange messages</p> </li> <li> <p>A distributed system creates the illusion of a single system</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#special-purpose-systems","title":"Special-Purpose Systems","text":"<ul> <li>Real-time embedded systems most prevalent form of computers</li> <li>vary considerably</li> <li>use special purpose (limited purpose) real-time OS</li> </ul> <p>\u8f6f\u5b9e\u65f6\uff1a\u4e0d\u4e25\u683c\u5728\u56fa\u5b9a\u65f6\u95f4\u5b8c\u6210\uff0c\u786c\u5b9e\u65f6\uff08\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u65e0\u5d4c\u5957\uff09\uff1a\u4e25\u683c\u6309\u7167\u8981\u6c42\u5728\u56fa\u5b9a\u65f6\u95f4\u5b8c\u6210\uff08\u4e0d\u591a\u4e0d\u5c11\uff09</p> <ul> <li>Multimedia systems</li> <li> <p>streams of data must be delivered according to time restrictions</p> </li> <li> <p>Handheld systems</p> </li> <li> <p>e.g., PDAs, smart phones</p> </li> <li> <p>limited CPU (?), memory(?), and power</p> </li> <li> <p>used to use reduced feature OS (?)</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#dual-mode-operation","title":"Dual-mode operation**","text":"<ul> <li>Operating system is usually interrupt-driven </li> <li> <p>Efficiency, regain control (timer interrupt)</p> </li> <li> <p>Dual-mode operation allows OS to protect itself and other system components</p> </li> <li> <p>user mode and kernel mode (or other names)</p> </li> <li> <p>a mode bit distinguishes when CPU is running user code or kernel code</p> </li> <li> <p>some instructions designated as privileged, only executable in kernel</p> </li> <li> <p>system call changes mode to kernel, return from call resets it to user</p> </li> </ul> <ol> <li> <p>\u5206\u4e3a\u4e24\u4e2a\u6a21\u5f0f\u662f\u4e3a\u4e86\u9694\u79bb\uff0c\u9632\u6b62\u7528\u6237\u6001\u7a0b\u5e8f\u53bb\u5e72\u6270\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u6570\u636e\u6216\u6570\u636e\u7ed3\u6784\u3002</p> </li> <li> <p>\u5e38\u7528MMU\u90e8\u4ef6\uff08Memory Management Unit | \u5185\u5b58\u7ba1\u7406\u5355\u5143\uff09\u6765\u6307\u5b9a\u5f53CPU\u8fd0\u884c\u5728\u7279\u6743\u6001\u65f6\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u5728\u7528\u6237\u6001\u4e0b\u53ea\u80fd\u8bbf\u95ee\u6709\u9650\u7a7a\u95f4\u8fbe\u5230\u4e8c\u8005\u7684\u9694\u79bb</p> </li> <li>\u90e8\u5206\u6307\u4ee4\u5fc5\u987b\u5728\u7279\u6743\u6001\u4e0b\u8fd0\u884c\uff0c\u6bd4\u5982\u5173\u95ed\u4e2d\u65ad\uff0c\u6253\u5f00\u4e2d\u65ad\u3001\u914d\u7f6eMMU\u7684\u6307\u4ee4</li> </ol>"},{"location":"Course/System/Lec01_Introduction/#transition-between-modes","title":"Transition between Modes","text":"<ul> <li>System calls, exception, interrupts cause transitions between kernel/user modes</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#timer","title":"Timer","text":"<ul> <li> <p>Timer used to prevent infinite loop or process hogging resources</p> </li> <li> <p>to enable a timer, set the hardware to interrupt after some period </p> </li> <li> <p>OS sets up a timer before scheduling process to regain control</p> <ul> <li> <p>the timer for scheduling is usually periodical(e.g., 250HZ)</p> </li> <li> <p>tickless kernel: on-demand timer interrupts(Linux)</p> </li> </ul> </li> </ul> <p>\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u6700\u5c0f\u5355\u5143\uff0c\u7ebf\u7a0b\u662f\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u5143</p>"},{"location":"Course/System/Lec01_Introduction/#process","title":"Process | \u8fdb\u7a0b","text":"<p>Process is the unit of resource allocation</p>"},{"location":"Course/System/Lec01_Introduction/#resource-management-process-management","title":"Resource Management: Process Management","text":"<ul> <li> <p>A process is a program in execution</p> </li> <li> <p>program is a passive entity, process is an active entity</p> </li> <li> <p>a system has many processes running concurrently</p> </li> </ul> <p>\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u662f\u9694\u79bb\u7684\uff0c\u5373\u4f7f\u662f\u540c\u4e00\u4e2aprogram\u52a0\u8f7d\u7684\u8fdb\u7a0b</p> <ul> <li> <p>Process needs resources to accomplish its task</p> </li> <li> <p>OS reclaims all reusable resources upon process termination</p> </li> <li> <p>e.g., CPU, memory, I/O, files, initialization data</p> </li> <li> <p>\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u6700\u5c0f\u5355\u5143\uff0c\u7ebf\u7a0b\u662f\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u5143</p> </li> </ul> <p>\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4f1a\u7ba1\u7406\u5206\u914d\u7ed9\u6bcf\u4e00\u4e2a\u5185\u6838\u7684CPU\u8d44\u6e90\u3001memory\u8d44\u6e90\u3001I/O\u8d44\u6e90\u2026\u2026\u662f\u901a\u8fc7\u5206\u65f6\u590d\u7528\u7684\u65b9\u5f0f\uff0c\u65f6\u95f4\u7247\u8f6e\u8f6c\uff0c\u6bcf\u4e00\u4e2aprocess\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u5c31\u5f00\u59cb\u6839\u636e\u4f18\u5148\u7ea7\u8c03\u5ea6</p>"},{"location":"Course/System/Lec01_Introduction/#process-management-activities","title":"Process Management Activities","text":"<ul> <li> <p>Process creation and termination | \u521b\u5efa\u548c\u4e2d\u6b62</p> </li> <li> <p>Processes suspension and resumption | \u6682\u505c\u548c\u6062\u590d</p> </li> <li> <p>Process synchronization primitives | \u540c\u6b65</p> </li> <li> <p>Process communication primitives | \u901a\u4fe1</p> </li> <li> <p>Deadlock handling | \u6b7b\u9501</p> </li> </ul> <p>\u5728\u786c\u4ef6\u5c42\u9762\uff0c\u4e0d\u540c\u7684<code>cpu core</code>\u4e0a\u6709\u4e0d\u540c\u7684<code>register set | \u5bc4\u5b58\u5668\u96c6\u5408</code>\uff1b</p> <p>\u540c\u65f6\uff0c\u4e0d\u540c<code>cpu core</code>\u4e0a\u4e2d\u65ad\u4e5f\u662f\u5355\u72ec\u7684\uff0c\u5373\u6bcf\u4e2acore\u90fd\u53ef\u4ee5\u54cd\u5e94\u4efb\u4f55\u6743\u9650\u5185\u7684\u4e2d\u65ad\u3002</p>          \u8003 \u8bd5 &amp; \u8003 \u7814 \u91cd \u70b9\uff1a\u8fdb \u7a0b \u72b6 \u6001 \u7684 \u5207 \u6362               \u8be6\u7ec6\u72b6\u6001\u5207\u6362\u540e\u8bae      <p></p>"},{"location":"Course/System/Lec01_Introduction/#thread","title":"Thread | \u7ebf\u7a0b","text":""},{"location":"Course/System/Lec01_Introduction/#from-process-to-thread","title":"From Process to Thread","text":"<ul> <li> <p>Single-threaded process has one program counter </p> </li> <li> <p>program counter specifies location of next instruction to execute</p> </li> <li> <p>processor executes instructions sequentially, one at a time, until completion</p> </li> </ul> <p>\u7ebf\u7a0b\u4e4b\u95f4\u662f\u4e0d\u9694\u79bb\u7684</p> <ul> <li> <p>Multi-threaded process has one program counter per thread</p> </li> <li> <p>Quiz: What are the benefits of using thread instead of process?</p> </li> </ul> <p>\u4e0d\u540c\u7684\u8fdb\u7a0b\u95f4\u8981\u5171\u4eab\u6570\u636e\uff0c\u5982\u679c\u662f\u7ebf\u7a0b\u95f4\u5171\u4eab\uff0c\u90a3\u6570\u636e\u4f1a\u5f88\u5e9e\u5927\uff1b</p> <p>\u5f15\u5165\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u53ef\u4ee5\u88ab\u8c03\u5ea6\uff0c\u53ea\u9700\u8981load/store\u518d\u5b9e\u73b0\u540c\u6b65\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5171\u4eab\u3002</p> <ul> <li>\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u4e86memory\u3001global data\u3001heap\uff1b\u4e0d\u5171\u4eabstack</li> <li>\u6bcf\u4e2a\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684\u6808\u548cPC</li> <li>\u7ebf\u7a0b\u548c\u7ebf\u7a0b\u7684\u6808\u4e0d\u662f\u9694\u79bb\u7684\uff0c\u662f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#resource-management-memory-management","title":"Resource Management: Memory Management | \u5185\u5b58\u7ba1\u7406","text":"<ul> <li> <p>Memory is the main storage directly accessible to CPU </p> </li> <li> <p>data needs to be kept in memory before and after processing</p> </li> <li> <p>all instructions should be in memory in order to execute</p> </li> <li> <p>Memory management determines what is in memory to optimize CPU utilization and response time, provides a virtual view of memory for programmer</p> </li> <li> <p>Memory management activities:</p> </li> <li> <p>keeping track of which parts of memory are being used and by whom</p> </li> <li> <p>deciding which processes and data to move into and out of memory</p> </li> <li> <p>allocating and deallocating memory space as needed</p> </li> </ul> <p>\u7ba1\u7406CPU\uff0c\u7ba1\u7406Memory\uff0c\u505a\u597d\u540c\u6b65\u5360\u53bb\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u5927\u90e8\u5206\u5de5\u4f5c</p>"},{"location":"Course/System/Lec01_Introduction/#resource-management-file-systems","title":"Resource Management: File Systems | \u6587\u4ef6\u7cfb\u7edf","text":"<ul> <li> <p>\u4ecb\u7ecd\u8f83\u5c11,\u7cfb\u7edf\u2162</p> </li> <li> <p>\u5c06\u5e73\u65f6\u6240\u4f7f\u7528\u7684\u53ef\u89c6\u5316\u7684\u6587\u4ef6\u8def\u5f84\u6620\u5c04\u5230\u7269\u7406\u5b58\u50a8\u4ecb\u8d28\u4e0a</p> </li> </ul> <ul> <li> <p>OS provides a uniform, logical view of data storage</p> </li> <li> <p>file is a logical storage unit that abstracts physical properties</p> <ul> <li> <p>files are usually organized into directories(\u76ee\u5f55)</p> </li> <li> <p>access control determines who can access the file</p> </li> </ul> </li> <li> <p>File system management activities:</p> </li> <li> <p>creating and deleting files and directories</p> </li> <li> <p>primitives to manipulate files and directories</p> </li> <li> <p>mapping files onto secondary storage</p> </li> <li> <p>backup files onto stable (non-volatile) storage media</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#resource-management-io-system-management","title":"Resource Management: I/O System Management","text":"<p>\u5e2e\u52a9\u7528\u6237\u6001\u7a0b\u5e8f\u548c\u5916\u8bbe\u6253\u4ea4\u9053</p> <ul> <li> <p>I/O subsystem hides peculiarities of hardware devices from the user</p> </li> <li> <p>I/O subsystem is responsible for:</p> </li> <li> <p>manage I/O memory</p> <ul> <li> <p>buffering: to store data temporarily while it is being transferred</p> </li> <li> <p>caching: to store parts of data in faster storage for performance</p> </li> <li> <p>spooling: the overlapping of output of one job with input of other jobs</p> </li> </ul> </li> <li> <p>OS May provide general device-driver interfaces(\u6bcf\u4e00\u7c7b\u8bbe\u5907\u90fd\u6709\u5bf9\u5e94\u7684\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f)</p> </li> <li> <p>good for programmers: object-oriented design pattern</p> </li> <li> <p>bad from the security perspective: function pointers are heavily used</p> </li> </ul> <p></p>"},{"location":"Course/System/Lec01_Introduction/#separate-policy-and-mechanism","title":"Separate Policy and Mechanism","text":"<ul> <li>Mechanism(\u673a\u5236): how question about a system | \u600e\u4e48\u5b9e\u73b0</li> <li>How does an operating system performs a context switch</li> </ul> <p>\u4e0d\u540c\u7684\u8c03\u5ea6\u5668\u5b9e\u73b0\u4e0d\u540c\u7684Policy</p> <ul> <li>Policy(\u7b56\u7565): which question </li> <li> <p>Which process should the process to be switched</p> </li> <li> <p>Any other examples about mechanism &amp; policy?</p> </li> <li> <p>Advantages &amp; Disadvantages</p> </li> <li>Advantages of separation:<ul> <li>\u589e\u52a0\u6574\u4e2a\u7684\u7075\u6d3b\u6027.</li> </ul> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#virtualization","title":"Virtualization","text":"<ul> <li>Abstract the hardware of a single computer (CPU/Memory/IO \u2026) into different environments</li> </ul>"},{"location":"Course/System/Lec01_Introduction/#three-piecesintroduction","title":"Three pieces\u4e2d\u7684Introduction","text":""},{"location":"Course/System/Lec01_Introduction/#what-happens-when-a-program-runs","title":"What happens when a program runs?","text":"<ul> <li>Execute instructions (obviously)</li> <li> <p>fetch, decode, and execute</p> </li> <li> <p>Others things are happening in the backend</p> </li> <li> <p>make the program to run</p> </li> <li> <p>allow many programs to use/share memory</p> </li> <li> <p>allow may programs to interact with devices</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#all-about-virtualization","title":"All about Virtualization","text":"<ul> <li> <p>Virtualization</p> </li> <li> <p>OS transforms the physical resources into easy-to-use virtual form</p> </li> <li> <p>Interaction: system calls - interfaces between program and OS</p> </li> <li> <p>Managing: resources manager</p> </li> </ul>"},{"location":"Course/System/Lec01_Introduction/#virtualizing-the-cpu","title":"Virtualizing The CPU","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/time.h&gt;\n#include &lt;assert.h&gt;\n#include \"common.h\"\nint main(int argc, char *argv[])\n{\nif(argc != 2)\n{\nfprintf(stderr, \"usage: cpu &lt;string&gt;\\n\");\nexit(1);\n}\nchar *str = argv[1];\nwhile(1)\n{\nSpin(1);\nprintf(\"%s\\n\", str);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System/Lec01_Introduction/#virtualizing-memory","title":"Virtualizing Memory","text":"<pre><code>#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include \"common.h\"\nint main(int argc, char *argv[])\n{\nint *p = malloc(sizeof(int));\nassert(p != NULL);\nprintf(\"(%d) memory address of p: %08x\\n\", getpid(), (unsigned) p);\n/* getpid\u7cfb\u7edf\u8c03\u7528,\u6253\u5370\u5f53\u524d\u8fd0\u884c\u7a0b\u5e8f\u5bf9\u5e94\u7684\u8fdb\u7a0b\u53f7 */\n*p = 0;\nwhile(1)\n{\nSpin(1);\n*p = *p + 1;\nprintf(\"(%d) p: %d\\n\", getpid(), *p);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System/Lec01_Introduction/#concurrency","title":"Concurrency | \u5e76\u53d1","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include\"common.h\"\nvolatile int counter = 0;\nint loops;\nvoid *worker(void *arg) {\nint i;\nfor(i = 0; i &lt; loops; i++) {\ncounter++;\n}\nreturn NULL;\n}\nint main(int argc, char *argv[])\n{\nif(argc != 2)\n{\nfprintf(stderr, \"usage: threads &lt;value&gt;\\n\");\nexit(1);\n}\nloops = atoi(argv[1]);\npthread_t p1, p2;\nprintf(\"Initial value : %d\\n\", counter);\nPthread_create(&amp;p1, NULL, worker, NULL);\nPthread_create(&amp;p2, NULL, worker, NULL);\nPthread_join(p1, NULL);\nPthread_join(p2, NULL);\nprintf(\"Final value : %d\\n\", counter);\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System/Lec01_Introduction/#io","title":"I/O","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/types.h&gt;\nint main(int argc, char *argv[])\n{\nint fd = open(\"/tmp/file\", O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU);\nassert(fd &gt; -1);\nintrc = write(fd, \"hello world\\n\", 13);\nassert(rc == 13);\nclose(fd);\nreturn 0;\n}\n</code></pre>"},{"location":"Crash%20Computer%20Science/Lec01/","title":"Bollean Logic &amp; Logic Gates","text":""},{"location":"Triviality/GitHub/","title":"Perface","text":"<p>Abstract</p> <ul> <li>\u4e00\u4e2a\u9762\u5411\u5f00\u6e90\u53ca\u79c1\u6709\u8f6f\u4ef6\u9879\u76ee\u7684\u6258\u7ba1\u5e73\u53f0(\u53ea\u652f\u6301 Git \u4f5c\u4e3a\u552f\u4e00\u7684\u7248\u672c\u5e93\u683c\u5f0f\u8fdb\u884c\u6258\u7ba1) </li> <li>\u4e3a\u89c4\u8303\u4f7f\u7528, \u66f4\u597d\u548c\u522b\u4eba\u534f\u4f5c\u9879\u76ee\u7279\u6765\u7cfb\u7edf\u4ed4\u7ec6\u770b\u4e00\u904d\u6280\u672f\u6587\u6863</li> </ul>"},{"location":"Triviality/GitHub/Le1/","title":"Quickstart | \u6280\u672f\u6587\u6863\u9605\u8bfb","text":""},{"location":"Triviality/GitHub/Le1/#hello-world","title":"Hello World","text":"<ol> <li>Creating a repository</li> <li>Creating a branch<ol> <li>\u901a\u8fc7\u521b\u5efa\u5206\u652f\u540c\u65f6\u62e5\u6709 \u4e0d\u540c\u7248\u672c\u7684\u5b58\u50a8\u5e93 </li> <li>\u9ed8\u8ba4\u5206\u652f master , \u4ece master \u521b\u5efa\u7684\u65b0\u5206\u652f\u662f\u5176\u526f\u672c\u6216\u5feb\u7167\u3002\u82e5\u534f\u4f5c\u8005\u5bf9 master \u5206\u652f\u8fdb\u884c\u4e86\u66f4\u65b0, \u4f60\u53ef\u62c9\u53d6\u8fd9\u4e9b\u66f4\u65b0</li> </ol> </li> <li>Making and committing changes<ol> <li>\u521b\u5efa\u65b0\u5206\u652f\u540e, GitHub \u4f1a\u5c06\u4f60\u8f6c\u5230\u5176\u65b0\u5206\u652f\u4ee3\u7801\u9875</li> <li>\u5728\u65b0\u5206\u652f\u4e0b commit \u66f4\u6539\u540e, \u8fd9\u4e9b\u66f4\u6539\u4ec5\u9002\u7528\u4e8e\u5f53\u524d\u64cd\u4f5c\u5206\u652f</li> </ol> </li> <li>Opening a pull request<ol> <li>\u5728\u65b0\u5206\u652f commit \u540e, \u53ef\u6253\u5f00 pull request (GitHub \u4e0a\u534f\u4f5c\u7684\u6838\u5fc3)</li> <li>pull request \u53ef\u663e\u793a\u4e24\u4e2a\u5206\u652f\u5185\u5bb9\u7684\u5dee\u5f02(\u53ea\u8981\u8fdb\u884c\u63d0\u4ea4, \u4fbf\u53ef pull request \u5e76\u5f00\u59cb\u8ba8\u8bba)</li> <li>\u5728 pull request \u4e2d\u4f7f\u7528 @mention \u529f\u80fd, \u53ef\u5411\u7279\u5b9a\u56e2\u961f\u6216\u4eba\u5458\u8bf7\u6c42 comment</li> </ol> </li> <li>Merging your pull request<ol> <li>pull request \u540e, \u5c06\u65b0\u5206\u652f\u7684\u66f4\u6539\u518d\u5408\u5e76\u5230 master  </li> <li>\u6709\u65f6, pull request \u53ef\u80fd\u4f1a\u5f15\u5165\u4e0e master \u4e0a\u73b0\u6709\u4ee3\u7801\u51b2\u7a81\u7684\u4ee3\u7801\u66f4\u6539\u3002\u5982\u679c\u5b58\u5728\u4efb\u4f55\u51b2\u7a81, GitHub \u5c06\u63d0\u9192\u60a8\u6709\u5173\u51b2\u7a81\u4ee3\u7801\u7684\u4fe1\u606f\uff0c\u5e76\u9632\u6b62\u5408\u5e76\uff0c\u76f4\u5230\u51b2\u7a81\u89e3\u51b3\u4e3a\u6b62\u3002\u60a8\u53ef\u4ee5\u8fdb\u884c\u89e3\u51b3\u51b2\u7a81\u7684\u63d0\u4ea4\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u62c9\u53d6\u8bf7\u6c42\u4e2d\u7684\u6ce8\u91ca\u4e0e\u56e2\u961f\u6210\u5458\u8ba8\u8bba\u51b2\u7a81</li> <li>\u63a5\u4e0b\u6765\u53ef\u5b89\u5168\u5220\u9664\u65b0\u5efa\u5206\u652f, \u82e5\u8981\u5bf9\u9879\u76ee\u8fdb\u884c\u66f4\u591a\u66f4\u6539, \u53ef\u968f\u65f6\u521b\u65b0\u65b0\u5206\u652f\u5e76\u91cd\u590d\u6b64\u8fc7\u7a0b(\u534f\u4f5c\u91cd\u8981\u4e00\u73af)</li> </ol> </li> </ol>"},{"location":"Triviality/GitHub/Le1/#set-up-git","title":"Set up Git","text":"<p>Quote</p> <p>At the heart of GitHub is an open source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer.</p>"},{"location":"Triviality/GitHub/Le1/#using-git","title":"Using Git","text":"<ul> <li>\u914d\u7f6e <p>\u5b98\u65b9\u6587\u6863 </p> </li> </ul>"},{"location":"Triviality/GitHub/Le1/#setting-up-git","title":"Setting up Git","text":"<ul> <li>\u4e0b\u8f7d\u5e76\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684 Git <p>Git</p> </li> </ul>"},{"location":"Triviality/GitHub/Le1/#git","title":"\u5728 Git \u4e2d\u8bbe\u7f6e\u7528\u6237\u540d","text":"<ol> <li>\u5173\u4e8e Git \u7528\u6237\u540d<ol> <li>\u4f7f\u7528 <code>git config</code> \u547d\u4ee4\u66f4\u6539\u4e0e Git \u63d0\u4ea4\u5173\u8054\u7684\u540d\u79f0  <p>\u4f7f\u7528 <code>git config</code> \u66f4\u6539\u4e0e Git \u63d0\u4ea4\u5173\u8054\u7684\u540d\u79f0\u4ec5\u5f71\u54cd\u672a\u6765\u7684\u63d0\u4ea4\uff0c\u800c\u4e0d\u4f1a\u66f4\u6539\u7528\u4e8e\u8fc7\u53bb\u63d0\u4ea4\u7684\u540d\u79f0</p> </li> </ol> </li> <li>\u4e3a\u8ba1\u7b97\u673a\u4e0a\u7684\u6bcf\u4e2a\u5b58\u50a8\u5e93\u8bbe\u7f6e Git \u7528\u6237\u540d<ol> <li>\u6253\u5f00 \u7ec8\u7aef(Mac/Linux) || Git Bash(Windows)</li> <li>\u8bbe\u7f6e Git \u7528\u6237\u540d:  <p>$ git config \u2013global user.name \u201cMoLan\u201d</p> </li> <li>\u786e\u8ba4\u6b63\u786e\u8bbe\u7f6e\u4e86\u7528\u6237\u540d:  <p>$ git config \u2013global user.name  MoLan</p> </li> </ol> </li> <li>\u4e3a\u4e00\u4e2a\u4ed3\u5e93\u8bbe\u7f6e Git \u7528\u6237\u540d<ol> <li>\u6253\u5f00 \u7ec8\u7aef(Mac/Linux) || Git Bash(Windows)</li> <li>\u5c06\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u66f4\u6539\u4e3a\u8981\u914d\u7f6e\u4e0e Git \u63d0\u4ea4\u5173\u8054\u7684\u540d\u79f0\u7684\u672c\u5730\u4ed3\u5e93</li> <li>\u8bbe\u7f6e Git \u7528\u6237\u540d:   <p>$ git config user.name \u201cMoLan\u201d</p> </li> <li>\u786e\u8ba4:   <p>$ git config user.name  MoLan</p> </li> </ol> </li> </ol>"},{"location":"Triviality/GitHub/Le1/#git_1","title":"\u5728 Git \u4e2d\u8bbe\u7f6e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740","text":"<ul> <li>\u5173\u4e8e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740<ul> <li>\u82e5\u60f3\u5c06\u4e2a\u4eba\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u8bbe\u4e3a\u79c1\u5bc6, \u53ef\u4f7f\u7528 GitHub \u7684 <code>noreply</code> \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u4f5c\u4e3a\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u8981\u5c06 <code>noreply</code> \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7528\u4e8e\u4ece\u547d\u4ee4\u884c\u63a8\u9001\u7684\u63d0\u4ea4\uff0c\u8bf7\u5728 Git \u4e2d\u8bbe\u7f6e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u65f6\u4f7f\u7528\u8be5\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \u8981\u5c06 <code>noreply</code> \u5730\u5740\u7528\u4e8e\u57fa\u4e8e Web \u7684 Git \u64cd\u4f5c\uff0c\u8bf7\u5728 GitHub \u4e0a\u8bbe\u7f6e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u5e76\u9009\u62e9 \u201cKeep my email address private\u201d</li> </ul> </li> </ul> <p>Note</p> <p>2017 \u5e74 7 \u6708 18 \u65e5\u540e\u6ce8\u518c\u8d26\u6237\u7684, \u6765\u81ea GitHub \u7684 <code>noreply</code> \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u662f <code>USERNAME@user.noreply.github.com</code> \u3002\u53ef\u901a\u8fc7\u5728\u7535\u5b50\u90ae\u4ef6\u8bbe\u7f6e\u4e2d\u9009\u62e9(\u6216\u91cd\u65b0\u9009\u62e9) \u201cKeep my email address private\u201d , \u4e3a GitHub \u83b7\u53d6\u57fa\u4e8e ID \u7684 <code>noreply</code> \u7535\u5b50\u90ae\u4ef6\u5730\u5740 </p> <ul> <li>\u5728 GitHub \u4e0a\u8bbe\u7f6e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740<ul> <li>\u82e5\u5c1a\u672a\u542f\u7528\u7535\u5b50\u90ae\u4ef6\u9690\u79c1\u4fdd\u62a4, \u5219\u5728 GitHub \u4e0a\u7f16\u8f91\u3001\u5220\u9664\u6216\u521b\u5efa\u6587\u4ef6\u6216\u8005\u5408\u5e76\u62c9\u53d6\u8bf7\u6c42\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u4f5c\u8005\u66f4\u6539\u63d0\u4ea4\u5230\u54ea\u4e2a\u7ecf\u9a8c\u8bc1\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \u5982\u679c\u542f\u7528\u4e86\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u9690\u79c1\uff0c\u5219\u4e0d\u80fd\u66f4\u6539\u63d0\u4ea4\u4f5c\u8005\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f <code>&lt;username&gt;@users.noreply.github.com</code> 1. \u5728 GitHub Settings \u6dfb\u52a0\u7535\u5b50\u90ae\u4ef6\u5730\u5740 2. \u9a8c\u8bc1\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002<ol> <li>\u5728 \u201cPrimary email address\u201d \u5217\u8868\u4e2d\u9009\u62e9\u8981\u4e0e\u57fa\u4e8e Web \u7684 Git \u64cd\u4f5c\u5173\u8054\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740 </li> <li>\u82e5\u8981\u5728\u6267\u884c\u57fa\u4e8e web \u7684 Git \u64cd\u4f5c\u65f6\u5bf9\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u4fdd\u5bc6, \u5355\u51fb \u201cKeep my email addresses private\u201d </li> </ol> </li> </ul> </li> <li>\u4e3a\u8ba1\u7b97\u673a\u4e0a\u7684\u6bcf\u4e2a\u4ed3\u5e93\u8bbe\u7f6e\u7535\u5b50\u90ae\u4ef6\u5730\u5740<ol> <li>\u6253\u5f00 \u7ec8\u7aef(Mac/Linux) || Git Bash(Windows)</li> <li>\u5728 Git \u4e2d\u8bbe\u7f6e\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u53ef\u4ee5\u4f7f\u7528 GitHub \u63d0\u4f9b\u7684 noreply \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6216\u5176\u4f59\u7535\u5b50\u90ae\u4ef6\u5730\u5740 <p>$ git config \u2013global user.email \u201cYOUR_EMAIL\u201d</p> </li> <li>\u786e\u8ba4\u5728 Git \u4e2d\u6b63\u786e\u8bbe\u7f6e\u4e86\u7535\u5b50\u90ae\u4ef6\u5730\u5740:  <p>$ git config \u2013global user.email email@example.com</p> </li> <li>\u5c06\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6dfb\u52a0\u5230 GitHub \u4e0a\u7684\u8d26\u6237\uff0c\u4ee5\u4fbf\u63d0\u4ea4\u5f52\u5c5e\u4e8e\u4f60\u5e76\u663e\u793a\u5728\u4f60\u7684\u8d21\u732e\u56fe\u4e2d</li> </ol> </li> <li>\u4e3a\u4e00\u4e2a\u4ed3\u5e93\u8bbe\u7f6e\u7535\u5b50\u90ae\u4ef6\u5730\u5740<ol> <li>\u6253\u5f00 \u7ec8\u7aef(Mac/Linux) || Git Bash(Windows)</li> <li>\u5c06\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u66f4\u6539\u4e3a\u60a8\u60f3\u8981\u5728\u5176\u4e2d\u914d\u7f6e\u4e0e Git \u63d0\u4ea4\u5173\u8054\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u672c\u5730\u4ed3\u5e93</li> <li>\u5728 Git \u4e2d\u8bbe\u7f6e\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u53ef\u4ee5\u4f7f\u7528 GitHub \u63d0\u4f9b\u7684 noreply \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6216\u5176\u4f59\u7535\u5b50\u90ae\u4ef6\u5730\u5740 <p>$ git config user.email \u201cYOUR_EMAIL\u201d</p> </li> <li>\u786e\u8ba4\u5728 Git \u4e2d\u6b63\u786e\u8bbe\u7f6e\u4e86\u7535\u5b50\u90ae\u4ef6\u5730\u5740:  <p>$ git config user.email email@example.com</p> </li> <li>\u5c06\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6dfb\u52a0\u5230 GitHub \u4e0a\u7684\u8d26\u6237\uff0c\u4ee5\u4fbf\u63d0\u4ea4\u5f52\u5c5e\u4e8e\u4f60\u5e76\u663e\u793a\u5728\u4f60\u7684\u8d21\u732e\u56fe\u4e2d</li> </ol> </li> </ul>"},{"location":"Triviality/GitHub/Le1/#authenticating-with-github-from-git","title":"Authenticating with GitHub from Git","text":"<ul> <li>\u4ece Git\u8fde\u63a5\u5230 GitHub \u5b58\u50a8\u5e93\u65f6\uff0c\u9700\u8981\u4f7f\u7528 HTTPS \u6216 SSH \u5411 GitHub \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1</li> </ul>"},{"location":"Triviality/GitHub/Le1/#https","title":"\u901a\u8fc7 HTTPS \u8fde\u63a5","text":"<ul> <li>\u82e5\u4f7f\u7528 HTTPS \u514b\u9686\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u51ed\u636e\u5e2e\u52a9\u7a0b\u5e8f\u5728 Git \u4e2d\u7f13\u5b58 GitHub \u51ed\u636e</li> </ul>"},{"location":"Triviality/GitHub/Le1/#create-a-repo","title":"Create a repo","text":""},{"location":"Triviality/GitHub/Le1/#fork-a-repo","title":"Fork a repo","text":""},{"location":"Triviality/GitHub/Le1/#github-flow","title":"GitHub flow","text":""},{"location":"Triviality/GitHub/Le1/#contributing-to-projects","title":"Contributing to projects","text":""},{"location":"Triviality/GitHub/Le1/#be-social","title":"Be social","text":""},{"location":"Triviality/GitHub/Le1/#communicating-on-github","title":"Communicating on GitHub","text":""},{"location":"Triviality/GitHub/Le1/#github-glossary","title":"GitHub glossary","text":""},{"location":"Triviality/GitHub/Le1/#git-cheatsheet","title":"Git cheatsheet","text":""},{"location":"Triviality/GitHub/Le1/#learning-resources","title":"Learning resources","text":"<p>To Be Continued</p>"},{"location":"Triviality/GitHub/Le3/","title":"Getting started with Git","text":""},{"location":"Triviality/GitHub/Le3/#set-your-username","title":"Set your username","text":""},{"location":"Triviality/GitHub/Le3/#caching-credentials","title":"Caching credentials","text":""},{"location":"Triviality/GitHub/Le3/#git-passordwords","title":"Git passordwords","text":""},{"location":"Triviality/GitHub/Le3/#macos-keychain-credentials","title":"macOS Keychain credentials","text":""},{"location":"Triviality/GitHub/Le3/#git-workflows","title":"Git workflows","text":""},{"location":"Triviality/GitHub/Le3/#about-remote-repositories","title":"About remote repositories","text":"<p>\u5173\u4e8e\u8fdc\u7a0b\u4ed3\u5e93</p> <ul> <li>\u8fdc\u7a0b URL \u662f Git \u4e00\u79cd\u6307\u793a\u201c\u60a8\u7684\u4ee3\u7801\u5b58\u50a8\u4f4d\u7f6e\u201d\u7684\u7edd\u4f73\u65b9\u5f0f </li> <li>\u53ea\u80fd\u63a8\u9001\u4e24\u7c7b URL \u5730\u5740:  <ul> <li>HTTPS URL (\u4f8b\u5982 <code>https://github.com/user/repo.git</code>)</li> <li>SSH URL   (\u4f8b\u5982 <code>git@github.com:user/repo.git</code>)</li> </ul> </li> <li>Git \u5c06\u8fdc\u7a0b URL \u4e0e\u540d\u79f0\u76f8\u5173\u8054\uff0c\u9ed8\u8ba4\u8fdc\u7a0b\u901a\u5e38\u547d\u4e3a <code>origin</code></li> </ul>"},{"location":"Triviality/GitHub/Le3/#_1","title":"\u521b\u5efa\u8fdc\u7a0b\u4ed3\u5e93","text":"<p>\u53ef\u4ee5\u4f7f\u7528 <code>git remote add</code> \u547d\u4ee4\u5c06\u8fdc\u7a0b URL \u4e0e\u540d\u79f0\u5339\u914d</p> <p>Example</p> <p>git remote add origin  <p>\u5c06 origin \u4e0e <code>REMOTE_URL</code> \u5173\u8054</p>"},{"location":"Triviality/GitHub/Le3/#manage-remote-repositories","title":"Manage remote repositories","text":""},{"location":"Triviality/GitHub/Le3/#_2","title":"\u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93","text":"<ul> <li>\u4f7f\u7528 <code>git remote add</code> \u5728\u7ec8\u7aef\u5b58\u50a8\u5b58\u50a8\u5e93\u7684\u76ee\u5f55\u4e2d\u65b0\u589e\u8fdc\u7a0b</li> <li><code>git remote add</code> \u91c7\u7528\u4e24\u4e2a\u53c2\u6570:<ul> <li>\u8fdc\u7a0b\u540d\u79f0 (\u5982 <code>origin</code>)</li> <li>\u8fdc\u7a0b URL (\u5982 <code>https://github.com/user/repo.git</code>)</li> </ul> </li> </ul> Example <pre><code>$ git remote add origin https://github.com/USER/REPO.git\n# Set a new remote\n$ git remote -v\n# Verify new remote\n&gt; origin  https://github.com/USER/REPO.git (fetch)\n&gt; origin  https://github.com/USER/REPO.git (push)\n</code></pre> Troubleshooting: Remote origin already exists <p>\u6b64\u9519\u8bef\u6d88\u606f\u8868\u793a\u5c1d\u8bd5\u6dfb\u52a0\u7684\u8fdc\u7a0b\u4e0e\u672c\u5730\u4ed3\u5e93\u8fdc\u7a0b\u540d\u79f0\u76f8\u540c <pre><code>$ git remote add origin https://github.com/octocat/Spoon-Knife.git\n&gt; fatal: remote origin already exists.\n</code></pre>  \u4e09\u79cd\u89e3\u51b3\u65b9\u6cd5:        1. \u5bf9\u65b0\u8fdc\u7a0b\u4f7f\u7528\u4e0d\u540c\u540d\u79f0       2. \u5728\u6dfb\u52a0\u65b0\u8fdc\u7a0b\u65f6\uff0c\u91cd\u547d\u540d\u73b0\u6709\u8fdc\u7a0b\u4ed3\u5e93       3. \u5728\u6dfb\u52a0\u65b0\u8fdc\u7a0b\u524d\uff0c\u5220\u9664\u73b0\u6709\u8fdc\u7a0b\u4ed3\u5e93</p>"},{"location":"Triviality/GitHub/Le3/#url","title":"\u66f4\u6539\u8fdc\u7a0b\u4ed3\u5e93 URL","text":"<ul> <li><code>git remote set-url</code> \u547d\u4ee4\u66f4\u6539\u73b0\u6709\u8fdc\u7a0b\u4ed3\u5e93 URL</li> <li>\u8be5\u547d\u4ee4\u91c7\u7528\u4e24\u4e2a\u53c2\u6570: <ul> <li>\u73b0\u6709\u8fdc\u7a0b\u4ed3\u5e93\u540d\u79f0\u3002\u5982\uff0c<code>origin</code> \u00b7\u00b7\u00b7</li> <li>\u8fdc\u7a0b\u4ed3\u5e93\u7684\u65b0 URL\u3002\u5982:<ul> <li>\u82e5\u8981\u66f4\u65b0\u4e3a\u4f7f\u7528 HTTPS\uff0cURL \u5f62\u5982 <code>https://github.com/USERNAME/REPOSITORY.git</code></li> <li>\u82e5\u8981\u66f4\u65b0\u4e3a\u4f7f\u7528 SSH\uff0cURL \u5f62\u5982 <code>git@github.com:USERNAME/REPOSITORY.git</code></li> </ul> </li> </ul> </li> </ul> \u5c06\u8fdc\u7a0b URL \u4ece SSH \u5207\u6362\u5230 HTTPS\u5c06\u8fdc\u7a0b URL \u4ece HTTPS \u5207\u6362\u5230 SSH <ol> <li>\u6253\u5f00 Git Bash || \u7ec8\u7aef</li> <li>\u5c06\u5f53\u524d\u76ee\u5f55\u66f4\u6539\u4e3a\u672c\u5730\u4ed3\u5e93</li> <li>\u5217\u51fa\u73b0\u6709\u4ed3\u5e93 <pre><code>$ git remote -v\n&gt; origin  git@github.com:USERNAME/REPOSITORY.git (fetch)\n&gt; origin  git@github.com:USERNAME/REPOSITORY.git (push)\n</code></pre></li> <li>\u4f7f\u7528 <code>git remote set-url</code> \u547d\u4ee4\u5c06\u8fdc\u7a0b URL \u4eceSSH \u66f4\u6539\u4e3a HTTPS <pre><code>$ git remote set-url origin https://github.com/USERNAME/REPOSITORY.git\n</code></pre></li> <li>\u9a8c\u8bc1 <pre><code>$ git remote -v\n# Verify new remote URL\n&gt; origin  https://github.com/USERNAME/REPOSITORY.git (fetch)\n&gt; origin  https://github.com/USERNAME/REPOSITORY.git (push)\n</code></pre> <p>\u4e0b\u6b21\u5c06 <code>git fetch</code>\u3001<code>git pull</code>\u3001<code>git push</code>\u6267\u884c\u5230\u8fdc\u7a0b\u5b58\u50a8\u5e93\u65f6\uff0c\u7cfb\u7edf\u5c06\u8981\u6c42\u63d0\u4f9b GitHub \u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u53ef\u4ee5\u4f7f\u7528 GitHub \u51ed\u636e\u5e2e\u52a9\u7a0b\u5e8f\uff0c\u4ee5\u4fbf Git \u6bcf\u6b21\u4e0e GitHub \u901a\u4fe1\u65f6\u90fd\u4f1a\u8bb0\u4f4f\u4f60\u7684 GitHub \u7528\u6237\u540d\u548c personal access token</p> </li> </ol> <ol> <li>\u6253\u5f00 Git Bash || \u7ec8\u7aef</li> <li>\u5c06\u5f53\u524d\u76ee\u5f55\u66f4\u6539\u4e3a\u672c\u5730\u4ed3\u5e93</li> <li>\u5217\u51fa\u73b0\u6709\u4ed3\u5e93 <pre><code>$ git remote -v\n&gt; origin  https://github.com/USERNAME/REPOSITORY.git (fetch)\n&gt; origin  https://github.com/USERNAME/REPOSITORY.git (push)\n</code></pre></li> <li>\u4f7f\u7528 <code>git remote set-url</code> \u547d\u4ee4\u5c06\u8fdc\u7a0b URL \u4ece HTTPS \u66f4\u6539\u4e3a SSH <pre><code>$ git remote set-url origin git@github.com:USERNAME/REPOSITORY.git\n</code></pre></li> <li>\u9a8c\u8bc1 <pre><code>$ git remote -v\n# Verify new remote URL\n&gt; origin  git@github.com: USERNAME/REPOSITORY.git (fetch)\n&gt; origin  git@github.com: USERNAME/REPOSITORY.git (push)\n</code></pre> <p>\u4e0b\u6b21\u5c06 <code>git fetch</code>\u3001<code>git pull</code>\u3001<code>git push</code>\u6267\u884c\u5230\u8fdc\u7a0b\u5b58\u50a8\u5e93\u65f6\uff0c\u7cfb\u7edf\u5c06\u8981\u6c42\u63d0\u4f9b GitHub \u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u53ef\u4ee5\u4f7f\u7528 GitHub \u51ed\u636e\u5e2e\u52a9\u7a0b\u5e8f\uff0c\u4ee5\u4fbf Git \u6bcf\u6b21\u4e0e GitHub \u901a\u4fe1\u65f6\u90fd\u4f1a\u8bb0\u4f4f\u4f60\u7684 GitHub \u7528\u6237\u540d\u548c personal access token</p> </li> </ol>"},{"location":"Triviality/GitHub/Le3/#_3","title":"\u91cd\u547d\u540d\u8fdc\u7a0b\u4ed3\u5e93","text":"<ul> <li>\u4f7f\u7528 <code>git remote rename</code> \u547d\u4ee4\u91cd\u547d\u540d\u73b0\u6709\u8fdc\u7a0b</li> <li><code>git remote rename</code> \u547d\u4ee4\u91c7\u7528\u4e24\u4e2a\u53c2\u6570:<ul> <li>\u73b0\u6709\u8fdc\u7a0b\u540d\u79f0\uff08\u5982 origin\uff09</li> <li>\u8fdc\u7a0b\u7684\u65b0\u540d\u79f0\uff08\u5982 destination\uff09</li> </ul> </li> </ul>"},{"location":"Triviality/GitHub/Le3/#_4","title":"\u5220\u9664\u8fdc\u7a0b\u4ed3\u5e93","text":"<ul> <li>\u4f7f\u7528 <code>git remote rm</code> \u547d\u4ee4\u4ece\u5b58\u50a8\u5e93\u4e2d\u5220\u9664\u8fdc\u7a0b URL\u3002</li> <li>\u8be5\u547d\u4ee4\u91c7\u7528\u4e00\u4e2a\u53c2\u6570\uff1a<ul> <li>\u8fdc\u7a0b\u540d\u79f0\uff08\u4f8b\u5982 destination\uff09</li> </ul> </li> </ul> <p>\u4ece\u5b58\u50a8\u5e93\u4e2d\u5220\u9664\u8fdc\u7a0b URL \u53ea\u4f1a\u53d6\u6d88\u672c\u5730\u548c\u8fdc\u7a0b\u5b58\u50a8\u5e93\u7684\u94fe\u63a5\u3002 \u5b83\u4e0d\u4f1a\u5220\u9664\u8fdc\u7a0b\u5b58\u50a8\u5e93</p>"},{"location":"Triviality/GitHub/Le3/#associate-text-editors","title":"Associate text editors","text":""},{"location":"Triviality/GitHub/Le3/#handle-line-endings","title":"Handle line endings","text":""},{"location":"Triviality/GitHub/Le3/#ignoring-files","title":"Ignoring files","text":""},{"location":"Triviality/Markdown/","title":"Perface","text":"<p>Note</p> <p>\u4e00\u4e9b\u7b80\u5355\u7684markdown\u8bed\u6cd5(\u90e8\u5206\u8bed\u6cd5\u5728\u4e0d\u540cmarkdown\u7f16\u8bd1\u5668\u4e0a\u6709\u5dee\u522b)</p>"},{"location":"Triviality/Markdown/markdown/","title":"\u90e8\u5206Markdown\u8bed\u6cd5","text":""},{"location":"Triviality/Markdown/markdown/#_1","title":"\u5173\u4e8e\u6807\u9898","text":"<ol> <li>\u4e00\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>#</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u4e8c\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>##</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u4e09\u7ea7\u6807\u63d0 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>###</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u56db\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>####</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u4e94\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>#####</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u516d\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>######</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> </ol>"},{"location":"Triviality/Markdown/markdown/#_2","title":"\u52a0\u7c97\u3001\u503e\u659c\u3001\u4e0b\u5212\u7ebf\u3001\u5220\u9664\u7ebf\u3001\u6807\u8bb0\u6587\u672c","text":"<ol> <li>\u52a0\u7c97 \u7684\u547d\u4ee4\uff1a\u2019<code>**</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>**</code>\u2018(\u8f93\u5165\u4e4b\u540e\u6572\u7a7a\u683c\u5373\u53ef\u5c06\u4e24\u4e2a<code>**</code>\u4e4b\u95f4\u7684\u5185\u5bb9\u52a0\u7c97) or \u2018<code>__</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>__</code>\u2018\uff08\u4e24\u4e2a\u4e0b\u5212\u7ebf\uff09\uff0c\u4e24\u4e2a<code>**</code>\u4e4b\u95f4\u65e0\u7a7a\u683c \uff0c\u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e<code>Ctrl</code>+<code>B</code></li> <li>\u503e\u659c \u7684\u547d\u4ee4\uff1a\u2019<code>*</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>*</code>\u2018\uff08\u540c\u6837\u9700\u8981\u5728\u7ed3\u675f\u65f6\u6572\u51fb\u7a7a\u683c\uff09or\u2019 <code>_</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>_</code>\u2018\uff08\u4e00\u4e2a\u4e0b\u5212\u7ebf\uff09\uff0c\u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e<code>Ctrl</code>+<code>I</code></li> <li>\u4e0b\u5212\u7ebf  \uff1a\u2019<code>&lt;u&gt;</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>&lt;/u&gt;</code>\u2018\uff0c\u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e<code>Ctrl</code>+<code>U</code></li> <li>\u5220\u9664\u7ebf\uff1a\u2019<code>~~</code>\u2018 + \u5185\u5bb9 + \u2018<code>~~</code>\u2019\uff0c\u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e<code>Shift</code>+<code>Ctrl</code> + <code>X</code></li> <li>\u6807\u8bb0 \uff1a\u2018<code>==</code>\u2019 + \u2018<code>\u5185\u5bb9</code>\u2019+\u2018<code>==</code>\u2019\uff08\u66f4\u597d\u7528\u4e00\u70b9\uff09\uff0c\u6216\u8005\u4f7f\u7528<code>Alt</code> + <code>Ctrl</code> + <code>H</code>\uff08\u6211\u7684\u4e0d\u597d\u7528\uff09</li> </ol>"},{"location":"Triviality/Markdown/markdown/#_3","title":"\u5206\u5272\u7ebf","text":"<pre><code>\u4f7f\u7528`*** `+ `Enter` \u6216\u8005 `---` + `Enter`\u5c31\u53ef\u4ee5\u4e86\n</code></pre>"},{"location":"Triviality/Markdown/markdown/#_4","title":"\u5f15\u7528","text":"<pre><code>\u5728\u884c\u9996\u4f7f\u7528 ' `\u300b`'or ' `&gt;`' + '`\u7a7a\u683c`'\n</code></pre> <p>\u5f88\u591a<code>markdown</code>\u7f16\u8f91\u5668\u53ea\u652f\u6301 <code>&gt;</code></p>"},{"location":"Triviality/Markdown/markdown/#_5","title":"\u5217\u8868","text":"<ol> <li>\u6709\u5e8f\u5217\u8868\u2013&gt;\u4f7f\u7528\u2019<code>\u6570\u5b57</code>\u2019+\u2019<code>.</code>\u2019+\u2019<code>\u7a7a\u683c</code>\u2018 \u6216\u8005 \u4f7f\u7528\u5feb\u6377\u952e<code>Shift</code> + <code>Ctrl</code>+<code>7</code></li> <li>\u65e0\u5e8f\u5217\u8868\u2013&gt;\u4f7f\u7528\u2019<code>+</code>\u2018or \u2018<code>-</code>\u2018or \u2018<code>*</code>\u2019+\u2019<code>\u7a7a\u683c</code>\u2018 \u6216\u8005 \u4f7f\u7528\u5feb\u6377\u952e<code>Shift</code> + <code>Ctrl</code> + <code>8</code></li> <li>\u793a\u4f8b\u5982\u4e0b\uff1a</li> <li>(\u5728\u4fdd\u7559\u5217\u8868\u8fde\u7eed\u6027\u7684\u540c\u65f6\u5728\u5217\u8868\u4e2d\u6dfb\u52a0\u53e6\u4e00\u4e2a\u5143\u7d20\uff0c\u8bf7\u5c06\u8be5\u5143\u7d20\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\u6216\u4e00\u4e2a\u5236\u8868\u7b26) - \u4e00\u7ea7\u65e0\u5e8f\u5217\u8868\u5728\u4f7f\u7528<code>Tab</code>\u952e\u53ef\u4ee5\u8fdb\u5165\u4e0b\u4e00\u7ea7\uff0c\u5982\u4e0b\u7a7a\u5fc3\u5706\u5708\u4e3a<code>*</code>+<code>space</code>+<code>tab</code></li> </ol>"},{"location":"Triviality/Markdown/markdown/#code","title":"Code","text":"<ol> <li>\u884c\u5185\u4ee3\u7801\uff1a \u5728\u6587\u5b57\u5757\u4e24\u8fb9\u52a0\u4e0a ` </li> <li>\u4ee3\u7801\u5757</li> </ol> <p>Example</p> <p>bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>    ``` py title=\"bubble_sort.py\"\n    def bubble_sort(items):\n        for i in range(len(items)):\n            for j in range(len(items) - 1 - i):\n                if items[j] &gt; items[j + 1]:\n                    items[j], items[j + 1] = items[j + 1], items[j]\n    ```\n</code></pre></p>"},{"location":"Triviality/Markdown/markdown/#_6","title":"\u6570\u5b66\u516c\u5f0f&amp;\u7b26\u53f7","text":"<p>\u5747\u4f7f\u7528<code>$</code>+<code>\u4ee3\u7801</code>+<code>$</code>+<code>\u7a7a\u683c</code>\u53ef\u4ee5\u6253\u51fa\uff0c\u4f8b\u5982 <code>$\\alpha$</code></p> <p>\u539f\u5730\u5740</p> <p>Markdown</p>"},{"location":"Triviality/The%20Missing%20Semester/","title":"perface","text":"<p>Note</p> <p>The Misssing Semester of CS Education \u662fMIT\u63a8\u51fa\u7684CS\u8bfe\u7a0b\uff0c\u4e3b\u8981\u8bb2\u8ff0\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5f88\u57fa\u7840\u4e14\u91cd\u8981\u4f46\u4e0d\u4f1a\u51fa\u73b0\u5728CS\u4e3b\u6d41\u8bfe\u7a0b\u4e2d\u7684\u4e00\u4e9b\u77e5\u8bc6\u3002</p> Quote <p>Youtube Bilibili</p>"},{"location":"Triviality/The%20Missing%20Semester/Vim/","title":"Vim","text":""},{"location":"Triviality/The%20Missing%20Semester/Vim/#_1","title":"\u8be5\u5b66\u54ea\u4e2a\u7f16\u8f91\u5668\uff1f","text":"<ul> <li>Visual Studio Code\u662f\u76ee\u524d\u6700\u6d41\u884c\u7684\u4ee3\u7801\u7f16\u8f91\u5668\u3002\u800cVim \u5219\u662f\u6700\u6d41\u884c\u7684\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u7f16\u8f91\u5668\u3002</li> <li>REPL\u53ea\u4ea4\u4e92\u5f0f\u7684\u7f16\u7a0b\u73af\u5883\uff0c\u4e5f\u80fd\u6307\u4ee3\u547d\u4ee4\u884c\u7684\u6a21\u5f0f</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#vim_1","title":"Vim\u7684\u54f2\u5b66","text":"<ul> <li>\u5728\u7f16\u7a0b\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u628a\u5927\u91cf\u65f6\u95f4\u82b1\u5728\u9605\u8bfb/\u7f16\u8f91\u800c\u4e0d\u662f\u5728\u5199\u4ee3\u7801\u4e0a\u3002\u6240\u4ee5\uff0cVim \u662f\u4e00\u4e2a\u591a\u6a21\u6001\u7f16\u8f91\u5668\uff1a\u5b83\u5bf9\u4e8e\u63d2\u5165\u6587\u5b57\u548c\u64cd\u7eb5\u6587\u5b57\u6709\u4e0d\u540c\u7684\u6a21\u5f0f\u3002Vim \u662f\u53ef\u7f16\u7a0b\u7684\uff08\u53ef\u4ee5\u4f7f\u7528 Vimscript \u6216\u8005\u50cf Python \u4e00\u6837\u7684\u5176\u4ed6\u7a0b\u5e8f\u8bed\u8a00\uff09\uff0cVim \u7684\u63a5\u53e3\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u7a0b\u5e8f\u8bed\u8a00\uff1a\u952e\u5165\u64cd\u4f5c\uff08\u4ee5\u53ca\u5176\u52a9\u8bb0\u540d\uff09 \u662f\u547d\u4ee4\uff0c\u8fd9\u4e9b\u547d\u4ee4\u4e5f\u662f\u53ef\u7ec4\u5408\u7684\u3002Vim \u907f\u514d\u4e86\u4f7f\u7528\u9f20\u6807\uff0c\u56e0\u4e3a\u90a3\u6837\u592a\u6162\u4e86\uff1bVim \u751a\u81f3\u907f\u514d\u7528\u4e0a\u4e0b\u5de6\u53f3\u952e\u56e0\u4e3a\u90a3\u6837\u9700\u8981\u592a\u591a\u7684\u624b\u6307\u79fb\u52a8\u3002</li> <li>\u8fd9\u6837\u7684\u8bbe\u8ba1\u54f2\u5b66\u4f7f\u5f97 Vim \u6210\u4e3a\u4e86\u4e00\u4e2a\u80fd\u8ddf\u4e0a\u4f60\u601d\u7ef4\u901f\u5ea6\u7684\u7f16\u8f91\u5668</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_2","title":"\u547d\u4ee4","text":"<ul> <li>\u9ed8\u8ba4Normal\u6a21\u5f0f\uff0cNormal\u6a21\u5f0f\u4e0b\u6309 i \u5c06\u8fdb\u5165Insert\u6a21\u5f0f\uff0c\u800c\u5728Insert\u6a21\u5f0f\u4e0b\u6309Esc\u53ef\u4ee5\u8fd4\u56deNormal\u6a21\u5f0f <p>\u6309\u952e\u4e66\u5199\uff1a\u4f8b\u5982\u5982\u679c\u662f\u5355\u72ec\u7684\u6309\u952e i \uff0c\u90a3\u4e48\u76f4\u63a5\u5199 i \u5c31\u53ef\u4ee5\u4e86\uff0c \u5982\u679c\u662fCtrl + V\u8fd9\u79cd\u6309\u952e\u7ec4\u5408\uff0c\u6709\u4e0b\u9762\u51e0\u79cd\u8868\u793a\u65b9\u6cd5       1. <code>^V</code>\uff1a\u4e00\u4e2a\u201c\u8131\u5b57\u7b26\u53f7\u201d\u540e\u9762\u8ddf\u7740\u63a7\u5236\u7528\u5b57\u7b26\uff08\u8fd9\u91cc\u7684\u63a7\u5236\u7528\u5b57\u7b26\u6307\u90a3\u4e2aV\uff0c\u4e5f\u5c31\u662f\u7ec4\u5408\u952e\u4e2d \u7684\u53e6\u4e00\u4e2a\u952e\uff09       2. <code>Ctrl - V</code>        3. <code>&lt; C - V&gt;</code> </p> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_3","title":"\u5404\u79cd\u6a21\u5f0f","text":"<ol> <li> <p>Normal\u6a21\u5f0f\uff08\u6b63\u5e38\uff09\u2014\u2014&gt;\u662f\u7528\u6765\u79fb\u52a8\u5149\u6807\u3001\u9605\u8bfb\u4e1c\u897f\u4ee5\u53ca\u5728\u6587\u4ef6\u95f4\u5207\u6362\u7684</p> <p><code>x</code> \u53ef\u4ee5\u5220\u9664\u5b57\u7b26</p> </li> <li> <p>Insert\u6a21\u5f0f\uff08\u63d2\u5165\uff09\u2014\u2014&gt;\u6309\u4e0b <code>i</code> \u952e\u8fdb\u5165\uff0c\u7528\u6765\u8f93\u5165\u7684</p> <p>\u56e0\u6b64\u5728\u8fd9\u4e2a\u6a21\u5f0f\u4e0b\u4f60\u7684\u6309\u952e\u5927\u591a\u4f1a\u76f4\u63a5\u8fdb\u5165buffer</p> </li> <li> <p>Replace\u6a21\u5f0f\uff08\u66ff\u6362\uff09\u2014\u2014&gt;\u6309\u4e0b <code>R</code> \u8fdb\u5165\uff0c\u4e0d\u50cf\u63d2\u5165\u6a21\u5f0f\u4f1a\u628a\u5b57\u7b26\u5f80\u540e\u79fb\uff0c\u66ff\u6362\u6a21\u5f0f\u4f1a\u76f4\u63a5\u8986\u76d6\u6389\u6587\u672c</p> </li> <li>Visual\u6a21\u5f0f\uff08\u53ef\u89c6\u5316\uff09<ol> <li>Visual\uff08\u4e00\u822c\uff09\u2014\u2014&gt;\u6309\u4e0b <code>v</code> \u952e\u8fdb\u5165\uff0c</li> <li>Visual Line\uff08\u884c\uff09\u2014\u2014&gt;\u6309\u4e0b <code>Shift + v</code> \u8fdb\u5165\uff0c</li> <li>Visual Block\uff08\u5757\uff09\u2014\u2014&gt; \u6309\u4e0b <code>Ctrl + v</code> \u8fdb\u5165\uff0c</li> </ol> </li> <li>Command\u6a21\u5f0f\uff08\u547d\u4ee4\u884c\uff09\u2014\u2014&gt;\u6309\u4e0b <code>:</code> \u5c31\u53ef\u4ee5\u8fdb\u5165\uff0c</li> </ol> Note <ul> <li>\u5728\u4e0d\u540c\u64cd\u4f5c\u6a21\u5f0f\u4e0b\uff0c\u952e\u76d8\u6572\u51fb\u7684\u542b\u4e49\u4e5f\u4e0d\u540c\uff0c\u6bd4\u5982\uff0c<code>x</code> \u5728\u63d2\u5165\u6a21\u5f0f\u4f1a\u63d2\u5165\u5b57\u6bcd <code>x</code>\uff0c\u4f46\u662f\u5728\u6b63\u5e38\u6a21\u5f0f \u4f1a\u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u5b57\u6bcd\uff0c\u5728\u53ef\u89c6\u6a21\u5f0f\u4e0b\u5219\u4f1a\u5220\u9664\u9009\u4e2d\u6587\u5757\u3002</li> <li>\u5728\u9ed8\u8ba4\u8bbe\u7f6e\u4e0b\uff0cVim\u4f1a\u5728\u5de6\u4e0b\u89d2\u663e\u793a\u5f53\u524d\u7684\u6a21\u5f0f\u3002 Vim\u542f\u52a8\u65f6\u7684\u9ed8\u8ba4\u6a21\u5f0f\u662f\u6b63\u5e38\u6a21\u5f0f\u3002\u901a\u5e38\u4f60\u4f1a\u628a\u5927\u90e8\u5206 \u65f6\u95f4\u82b1\u5728\u6b63\u5e38\u6a21\u5f0f\u548c\u63d2\u5165\u6a21\u5f0f\u3002</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_4","title":"\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"Triviality/The%20Missing%20Semester/Vim/#_5","title":"\u63d2\u5165\u6587\u672c","text":"<p>\u5728\u6b63\u5e38\u6a21\u5f0f\u4e0b\uff0c\u952e\u5165 <code>i</code> \u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002\u73b0\u5728 Vim \u8ddf\u5f88\u591a\u5176\u4ed6\u7684\u7f16\u8f91\u5668\u4e00\u6837\uff0c\u76f4\u5230\u4f60\u952e\u5165 \u8fd4\u56de\u6b63\u5e38\u6a21\u5f0f\u3002 \u4f60\u53ea\u9700\u8981\u638c\u63e1\u8fd9\u4e00\u70b9\u548c\u4e0a\u9762\u4ecb\u7ecd\u7684\u6240\u6709\u57fa\u7840\u77e5\u8bc6\u5c31\u53ef\u4ee5\u4f7f\u7528 Vim \u6765\u7f16\u8f91\u6587\u4ef6\u4e86 \uff08\u867d\u7136\u5982\u679c\u4f60\u4e00\u76f4\u505c\u7559\u5728\u63d2\u5165\u6a21\u5f0f\u5185\u4e0d\u4e00\u5b9a\u9ad8\u6548\uff09\u3002"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_6","title":"\u7f13\u5b58\u3001\u6807\u7b7e\u9875\u3001\u7a97\u53e3","text":"<ul> <li>Vim \u4f1a\u7ef4\u62a4\u4e00\u7cfb\u5217\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u79f0\u4e3a\u201c\u7f13\u5b58\u201d\u3002\u4e00\u4e2a Vim \u4f1a\u8bdd\u5305\u542b\u4e00\u7cfb\u5217\u6807\u7b7e\u9875\uff0c\u6bcf\u4e2a\u6807\u7b7e\u9875\u5305\u542b \u4e00\u7cfb\u5217\u7a97\u53e3\uff08\u5206\u9694\u9762\u677f\uff09\u3002\u6bcf\u4e2a\u7a97\u53e3\u663e\u793a\u4e00\u4e2a\u7f13\u5b58\u3002\u8ddf\u7f51\u9875\u6d4f\u89c8\u5668\u7b49\u5176\u4ed6\u4f60\u719f\u6089\u7684\u7a0b\u5e8f\u4e0d\u4e00\u6837\u7684\u662f\uff0c \u7f13\u5b58\u548c\u7a97\u53e3\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff1b\u7a97\u53e3\u53ea\u662f\u89c6\u89d2\u3002\u4e00\u4e2a\u7f13\u5b58\u53ef\u4ee5\u5728\u591a\u4e2a\u7a97\u53e3\u6253\u5f00\uff0c\u751a\u81f3\u5728\u540c\u4e00\u4e2a\u6807\u7b7e\u9875\u5185\u7684\u591a\u4e2a\u7a97\u53e3\u6253\u5f00\u3002\u8fd9\u4e2a\u529f\u80fd\u5176\u5b9e\u5f88\u597d\u7528\uff0c\u6bd4\u5982\u5728\u67e5\u770b\u540c\u4e00\u4e2a\u6587\u4ef6\u7684\u4e0d\u540c\u90e8\u5206\u7684\u65f6\u5019\u3002</li> <li>Vim \u9ed8\u8ba4\u6253\u5f00\u4e00\u4e2a\u6807\u7b7e\u9875\uff0c\u8fd9\u4e2a\u6807\u7b7e\u4e5f\u5305\u542b\u4e00\u4e2a\u7a97\u53e3\u3002<ul> <li>\uff1atabnew (\u6587\u4ef6\u540d)\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u7a97\u53e3\u6253\u5f00\u6587\u4ef6\uff0c Normal\u6a21\u5f0f\u4e0b gt \u53ef\u4ee5\u5728\u7a97\u53e3\u4e4b\u95f4\u5207\u6362\u3002</li> <li>\u6b64\u65f6\u6211\u4eec\u8f93\u5165 <code>:q</code> \u4e0d\u4f1a\u5b8c\u5168\u9000\u51faVim\u53ea\u4f1a\u5173\u95ed\u5f53\u524d\u7a97\u53e3\uff0c\u53ea\u6709\u6ca1\u6709\u7a97\u53e3\u7684\u65f6\u5019\u624d\u4f1a\u9000\u51faVim</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#vim_2","title":"\u547d\u4ee4\u884c\u4e0b\u7684vim\u547d\u4ee4","text":"<ul> <li>\u5728\u6b63\u5e38\u6a21\u5f0f\u4e0b\u952e\u5165 : \u8fdb\u5165\u547d\u4ee4\u884c\u6a21\u5f0f\u3002 \u5728\u952e\u5165 : \u540e\uff0c\u4f60\u7684\u5149\u6807\u4f1a\u7acb\u5373\u8df3\u5230\u5c4f\u5e55\u4e0b\u65b9\u7684\u547d\u4ee4\u884c\u3002 \u8fd9\u4e2a\u6a21\u5f0f\u6709\u5f88\u591a\u529f\u80fd\uff0c\u5305\u62ec\u6253\u5f00\uff0c\u4fdd\u5b58\uff0c\u5173\u95ed\u6587\u4ef6\uff0c\u4ee5\u53ca \u9000\u51fa Vim\u3002<ul> <li><code>:q</code> \u9000\u51fa\uff08\u5173\u95ed\u7a97\u53e3\uff09</li> <li><code>:w</code> \u4fdd\u5b58\uff08\u5199\uff09</li> <li><code>:wq</code> \u4fdd\u5b58\u7136\u540e\u9000\u51fa</li> <li><code>:qa</code> \u4f1a\u5173\u95ed\u6240\u6709\u7a97\u53e3</li> <li><code>:e</code> {\u6587\u4ef6\u540d} \u6253\u5f00\u8981\u7f16\u8f91\u7684\u6587\u4ef6</li> <li><code>:ls</code> \u663e\u793a\u6253\u5f00\u7684\u7f13\u5b58</li> <li><code>:help</code> {\u6807\u9898} \u6253\u5f00\u5e2e\u52a9\u6587\u6863<ul> <li><code>:help :w</code> \u6253\u5f00 <code>:w</code> \u547d\u4ee4\uff08Command\u6a21\u5f0f\uff09\u7684\u5e2e\u52a9\u6587\u6863</li> <li><code>:help w</code> \u6253\u5f00 <code>w</code> \u79fb\u52a8\uff08Normal\u6a21\u5f0f\uff09\u7684\u5e2e\u52a9\u6587\u6863</li> </ul> </li> <li>Normal\u6a21\u5f0f\u4e0b\u8f93\u5165 <code>s</code> \u4f1a\u5220\u9664\u5b57\u7b26\u5e76\u8fdb\u5165Insert\u6a21\u5f0f</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#vim_3","title":"Vim\u7684\u63a5\u53e3\u5176\u5b9e\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00","text":"<ul> <li>Vim \u6700\u91cd\u8981\u7684\u8bbe\u8ba1\u601d\u60f3\u662f Vim \u7684\u754c\u9762\u672c\u8eab\u662f\u4e00\u4e2a\u7a0b\u5e8f\u8bed\u8a00\u3002\u952e\u5165\u64cd\u4f5c \uff08\u4ee5\u53ca\u4ed6\u4eec\u7684\u52a9\u8bb0\u540d\uff09 \u672c\u8eab\u662f\u547d\u4ee4\uff0c \u8fd9\u4e9b\u547d\u4ee4\u53ef\u4ee5\u7ec4\u5408\u4f7f\u7528\u3002 \u8fd9\u4f7f\u5f97\u79fb\u52a8\u548c\u7f16\u8f91\u66f4\u52a0\u9ad8\u6548\uff0c\u7279\u522b\u662f\u4e00\u65e6\u5f62\u6210\u808c\u8089\u8bb0\u5fc6\u3002</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_7","title":"\u79fb\u52a8","text":"<ul> <li>\u591a\u6570\u65f6\u5019\u4f60\u4f1a\u5728\u6b63\u5e38\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528\u79fb\u52a8\u547d\u4ee4\u5728\u7f13\u5b58\u4e2d\u5bfc\u822a\u3002\u5728 Vim \u91cc\u9762\u79fb\u52a8\u4e5f\u88ab\u79f0\u4e3a \u201c\u540d\u8bcd\u201d\uff0c \u56e0\u4e3a\u5b83\u4eec\u6307\u5411\u6587\u5b57\u5757\u3002<ul> <li>\u57fa\u672c\u79fb\u52a8: <code>hjkl</code> \uff08\u5de6\uff0c \u4e0b\uff0c \u4e0a\uff0c \u53f3\uff09</li> <li>\u8bcd\uff1a <code>w</code> \uff08\u4e0b\u4e00\u4e2a\u8bcd\uff09\uff0c <code>b</code> \uff08\u8bcd\u521d\uff09\uff0c <code>e</code> \uff08\u8bcd\u5c3e\uff09</li> <li>\u884c\uff1a <code>0</code> \uff08\u884c\u521d\uff09\uff0c <code>^</code> \uff08\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\uff09\uff0c <code>$</code> \uff08\u884c\u5c3e\uff09</li> <li>\u5c4f\u5e55\uff1a <code>H</code> \uff08\u5c4f\u5e55\u9996\u884c\uff09\uff0c <code>M</code> \uff08\u5c4f\u5e55\u4e2d\u95f4\uff09\uff0c <code>L</code> \uff08\u5c4f\u5e55\u5e95\u90e8\uff09</li> <li>\u7ffb\u9875\uff1a <code>Ctrl-u</code> \uff08\u4e0a\u7ffb\uff09\uff0c <code>Ctrl-d</code> \uff08\u4e0b\u7ffb\uff09</li> <li>\u6587\u4ef6\uff1a <code>gg</code> \uff08\u6587\u4ef6\u5934\uff09\uff0c <code>G</code> \uff08\u6587\u4ef6\u5c3e\uff09</li> <li>\u884c\u6570\uff1a :<code>{\u884c\u6570}&lt;CR&gt;</code> \u6216\u8005 <code>{\u884c\u6570}G</code> ({\u884c\u6570}\u4e3a\u884c\u6570)</li> <li>\u6742\u9879\uff1a <code>%</code> \uff08\u627e\u5230\u914d\u5bf9\uff0c\u6bd4\u5982\u62ec\u53f7\u6216\u8005 / / \u4e4b\u7c7b\u7684\u6ce8\u91ca\u5bf9\uff09</li> <li>\u67e5\u627e\uff1a <code>f</code> {\u5b57\u7b26}\uff0c <code>t</code> {\u5b57\u7b26}\uff0c <code>F</code> {\u5b57\u7b26}\uff0c <code>T</code> {\u5b57\u7b26}</li> <li>\u67e5\u627e/\u5230 \u5411\u524d/\u5411\u540e \u5728\u672c\u884c\u7684{\u5b57\u7b26}</li> <li><code>, / ;</code> \u7528\u4e8e\u5bfc\u822a\u5339\u914d</li> <li>\u641c\u7d22: <code>/{\u6b63\u5219\u8868\u8fbe\u5f0f}</code>, <code>n</code> / <code>N</code> \u7528\u4e8e\u5bfc\u822a\u5339\u914d</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_8","title":"\u9009\u62e9","text":"<ul> <li>\u53ef\u89c6\u5316\u6a21\u5f0f:<ul> <li>\u53ef\u89c6\u5316\uff1a<code>v</code></li> <li>\u53ef\u89c6\u5316\u884c\uff1a <code>V</code></li> <li>\u53ef\u89c6\u5316\u5757\uff1a<code>Ctrl+v</code></li> </ul> </li> <li>\u53ef\u4ee5\u7528\u79fb\u52a8\u547d\u4ee4\u6765\u9009\u4e2d\u3002</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_9","title":"\u7f16\u8f91","text":"<ul> <li>\u6240\u6709\u4f60\u9700\u8981\u7528\u9f20\u6807\u505a\u7684\u4e8b\uff0c \u4f60\u73b0\u5728\u90fd\u53ef\u4ee5\u7528\u952e\u76d8\uff1a\u91c7\u7528\u7f16\u8f91\u547d\u4ee4\u548c\u79fb\u52a8\u547d\u4ee4\u7684\u7ec4\u5408\u6765\u5b8c\u6210\u3002 \u8fd9\u5c31\u662f Vim \u7684\u754c\u9762\u5f00\u59cb\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u7a0b\u5e8f\u8bed\u8a00\u7684\u65f6\u5019\u3002Vim \u7684\u7f16\u8f91\u547d\u4ee4\u4e5f\u88ab\u79f0\u4e3a \u201c\u52a8\u8bcd\u201d\uff0c \u56e0\u4e3a\u52a8\u8bcd\u53ef\u4ee5\u65bd\u52a8\u4e8e\u540d\u8bcd\u3002<ul> <li><code>i</code> \u8fdb\u5165\u63d2\u5165\u6a21\u5f0f</li> <li>\u4f46\u662f\u5bf9\u4e8e\u64cd\u7eb5/\u7f16\u8f91\u6587\u672c\uff0c\u4e0d\u5355\u60f3\u7528\u9000\u683c\u952e\u5b8c\u6210</li> <li><code>O</code> / <code>o</code> \u5728\u4e4b\u4e0a/\u4e4b\u4e0b\u63d2\u5165\u884c</li> <li><code>d</code> \u5220\u9664 {\u79fb\u52a8\u547d\u4ee4}</li> <li>\u4f8b\u5982\uff0c <code>dw</code> \u5220\u9664\u8bcd, <code>d$</code> \u5220\u9664\u5230\u884c\u5c3e, <code>d0</code> \u5220\u9664\u5230\u884c\u5934\u3002</li> <li><code>c</code> \u6539\u53d8 {\u79fb\u52a8\u547d\u4ee4}</li> <li>\u4f8b\u5982\uff0c <code>cw</code> \u6539\u53d8\u8bcd</li> <li>\u6bd4\u5982 <code>d</code> \u518d <code>i</code></li> <li><code>x</code> \u5220\u9664\u5b57\u7b26\uff08\u7b49\u540c\u4e8e <code>dl</code>\uff09</li> <li><code>s</code> \u66ff\u6362\u5b57\u7b26\uff08\u7b49\u540c\u4e8e <code>xi</code>\uff09</li> <li>\u53ef\u89c6\u5316\u6a21\u5f0f + \u64cd\u4f5c</li> <li>\u9009\u4e2d\u6587\u5b57, <code>d</code> \u5220\u9664 \u6216\u8005 <code>c</code> \u6539\u53d8</li> <li><code>u</code> \u64a4\u9500, <code>&lt;C-r&gt;</code> \u91cd\u505a</li> <li><code>y</code> \u590d\u5236 / <code>yank</code> \uff08\u5176\u4ed6\u4e00\u4e9b\u547d\u4ee4\u6bd4\u5982 <code>d</code> \u4e5f\u4f1a\u590d\u5236\uff09</li> <li><code>p</code> \u7c98\u8d34</li> <li>\u66f4\u591a\u503c\u5f97\u5b66\u4e60\u7684: \u6bd4\u5982 <code>~</code> \u6539\u53d8\u5b57\u7b26\u7684\u5927\u5c0f\u5199</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_10","title":"\u8ba1\u6570","text":"<ul> <li>\u4f60\u53ef\u4ee5\u7528\u4e00\u4e2a\u8ba1\u6570\u6765\u7ed3\u5408\u201c\u540d\u8bcd\u201d\u548c\u201c\u52a8\u8bcd\u201d\uff0c\u8fd9\u4f1a\u6267\u884c\u6307\u5b9a\u64cd\u4f5c\u82e5\u5e72\u6b21\u3002<ul> <li><code>3w</code> \u5411\u524d\u79fb\u52a8\u4e09\u4e2a\u8bcd</li> <li><code>5j</code> \u5411\u4e0b\u79fb\u52a85\u884c</li> <li><code>7dw</code> \u5220\u96647\u4e2a\u8bcd</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_11","title":"\u4fee\u9970\u8bed","text":"<ul> <li>\u4f60\u53ef\u4ee5\u7528\u4fee\u9970\u8bed\u6539\u53d8\u201c\u540d\u8bcd\u201d\u7684\u610f\u4e49\u3002\u4fee\u9970\u8bed\u6709 i\uff0c\u8868\u793a\u201c\u5185\u90e8\u201d\u6216\u8005\u201c\u5728\u5185\u201c\uff0c\u548c a\uff0c \u8868\u793a\u201d\u5468\u56f4\u201c\u3002<ul> <li><code>ci(</code> \u6539\u53d8\u5f53\u524d\u62ec\u53f7\u5185\u7684\u5185\u5bb9</li> <li><code>ci[</code> \u6539\u53d8\u5f53\u524d\u65b9\u62ec\u53f7\u5185\u7684\u5185\u5bb9</li> <li><code>da'</code> \u5220\u9664\u4e00\u4e2a\u5355\u5f15\u53f7\u5b57\u7b26\u4e32\uff0c \u5305\u62ec\u5468\u56f4\u7684\u5355\u5f15\u53f7</li> </ul> </li> </ul>"}]}