{"config":{"lang":["ja"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"Hello","text":"<p>\ud83d\udcac\u8fd9\u91cc\u662f \u67d0\u5170 | Enl_Z \u7684\u7b14\u8bb0\u672c\uff0c\u6709\u4e00\u4e9b\u8bfe\u7a0b\u7b14\u8bb0\u6216\u8005\u5b66\u4e60\u8bb0\u5f55\uff1b</p> <p>\ud83d\udcac\u5176\u4f59\u8f83\u6742\u7684\u5185\u5bb9\uff08\u8bf8\u5982\u5b66\u4e60\u603b\u7ed3\u4e00\u7c7b\u7684\uff09\u6b22\u8fce\u5927\u5bb6\u5230\u6211\u7684 \u5f15\u5bfc\u9875 \u5bfb\u627e</p> <p>Info</p> <p>\u56e0\u4e3a\u8bb0\u6027\u4e0d\u597d\uff0c\u7b14\u8bb0\u5185\u5bb9\u6574\u7406\u8f83\u4e3a\u7e41\u7410\u3002 \u800c\u4e14\u80fd\u529b\u6709\u9650\uff0c\u5927\u5676\u9009\u62e9\u6027\u770b\u770b\u53ed~</p> <p>Warning</p> <p>\u7f51\u7ad9\u8fd8\u6ca1\u5b8c\u5168\u5b8c\u5584\uff0c\u4f1a\u51fa\u73b0\u90e8\u5206\u6e32\u67d3\u9519\u8bef</p>"},{"location":"link/","title":"\u53cb\u94fe (\u5e7f\u544a\u4f4d)","text":"<p>Abstract</p> <p>\u6211\u7684\u6028\u79cd\u670b\u53cb\u4eec \ud83d\ude0d</p> <p>\u6392\u5217\u65e0\u5148\u540e\uff0c\u90fd\u662f\u597d\u670b\u53cb</p>"},{"location":"link/#blog-notebook","title":"Blog &amp; Notebook","text":"HowJul \ud83d\ude18 \u5c0f\u6731 \ud83d\ude18"},{"location":"link/#github","title":"GitHub","text":"\u859b\u603b \u4ed3\u5e93\u600e\u4e48\u7a7a\u7a7a? \ud83d\ude47 !\u82df\u5bcc\u8d35!"},{"location":"link/#literature","title":"Literature","text":"\u5929\u624d \u6587\u5b66\u5927\u5e08\uff0c\u767e\u5ea6\u672c\u5ea6"},{"location":"link/#social-media","title":"Social media","text":"Mr. Wang \u5730\u8d28\u5927\u4f6c\uff0c\u5728\u7ebf\u5f81\u53cb <p>To Be Continued</p>"},{"location":"AI/ML/CS229/Lec01/","title":"Prerequisites","text":""},{"location":"Course/abstract/","title":"ZJU - COURSES","text":"<p>Abstarct</p> <p>\\(\u8fd9\u91cc\u5b58\u7740\u82ef\u4eba\u5728  ~~ ZJU ~~ \u4e0a\u8fc7\u7684\u4e00\u4e9b\u8bfe\u7a0b\u7b14\u8bb0\\) </p> List <ul> <li>\u5927\u4e8c\u4e0a: <ul> <li> <ul> <li> \u8ba1\u7b97\u673a\u7cfb\u7edf\u2161 | SYS2</li> </ul> </li> <li> <ul> <li> \u6570\u636e\u7ed3\u6784\u57fa\u7840 | FDS</li> </ul> </li> </ul> </li> <li>\u5927\u4e8c\u4e0b<ul> <li> <ul> <li> \u8ba1\u7b97\u673a\u7cfb\u7edf\u2162 | SYS3</li> </ul> </li> <li> <ul> <li> \u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790 | ADS</li> </ul> </li> <li> <ul> <li> \u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1 | OOP</li> </ul> </li> <li> <ul> <li> \u5bc6\u7801\u5b66 | Crypto</li> </ul> </li> </ul> </li> </ul> <p>Attention</p> <ul> <li>\u7b14\u8bb0\u672a\u5b8c\u6210\u7684\u90e8\u5206\u4f1a\u52a0\u5bc6</li> <li>\u5bc6\u7801\u5b66\u90e8\u5206\u4ec5\u9650\u6821\u5185\u4eba\u58eb (\u4e14\u7981\u6b62\u5916\u4f20)\uff0c ZJUer \u79c1\u6233\u62ff\u5bc6\u94a5</li> </ul>"},{"location":"Course/ADS/","title":"\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790","text":"<p>Abstract</p> <p>ZJU - ADS (\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790), \u627f\u63a5 FDS \u8bfe\u7a0b\u5185\u5bb9\u4e3b\u8981\u5305\u62ec:</p> <ul> <li>Data Structures<ul> <li>Balanced Search Trees: AVL Tree, Splay Tree, B++ Tree, Read-Black Tree</li> <li>Leftist Heaps, Skew Heaps, Binomial Queue</li> <li>\u00b7\u00b7\u00b7</li> </ul> </li> <li>Algorithms (Key Points)<ul> <li>Divide and Conquer</li> <li>Backtracking, Dynamic Programming</li> <li>Greedy Algorithms, Local Search</li> <li>NP-Completeness, Approximation Algorithm</li> <li>Randomiazed Algorithms, Parallel Algorithms</li> <li>External Sorting</li> <li>\u00b7\u00b7\u00b7</li> </ul> </li> </ul> Acknowledgement <p>ZJU - ADS \u8bfe\u7a0b\u7ec4</p> <p>\u7b14\u8bb0\u4e2d\u90e8\u5206\u9ec4\u5e95\u56fe\u7247\u6458\u81ea ZJU-ADS \u8bfe\u7a0b PPT \u4e2d</p> <p>\u6ca1\u5199\u5b8c\u7684\u7b14\u8bb0\u5c31\u884c\u52a0\u5bc6\u4e86</p> <p>To Be Continued</p>"},{"location":"Course/ADS/Lec01/","title":"AVL &amp; Splay &amp; Amortized Analysis","text":""},{"location":"Course/ADS/Lec01/#avl-trees","title":"AVL Trees","text":"<p>Adelson-Velskii-Landis (AVL) Trees (1962)</p> <p>Definitions</p> <ul> <li>An empty binary tree is height balanced. If \\(T\\) is a nonempty binary tree with \\(T_L\\) and \\(T_R\\) as its left and right subtrees, then \\(T\\) is height balanced if<ol> <li>\\(T_L\\) and \\(T_R\\) are height balanced, and</li> <li>\\(| h_L - h_R | \\le 1\\) where \\(h_L\\) and \\(h_R\\) are heights of \\(T_L\\) and \\(T_R\\) </li> </ol> </li> <li>The balanced factor \\(BF\\) (node) = \\(h_L - h_R\\). In an AVL tree, \\(BF\\) (node) = -1, 0, or 1</li> </ul>"},{"location":"Course/ADS/Lec01/#maximum-height","title":"Maximum Height","text":"<ul> <li>Let \\(n_h\\) be the minimum number of nodes in a balanced binary tree with height \\(h\\)<ul> <li>\u7ed3\u70b9\u6570\u6700\u5c0f\u65f6:  </li> <li>In genernal ( \\(n_h = n_{h-1} + n_{h-2} + 1\\) ):  <ul> <li>Cause Fibonacci sequence: \\(F_0 = 1, ~ F_1 = 1, ~ F_i = F_{i-1} + F_{i-2}\\) for \\(i &gt; 1\\)</li> <li>\\(n_h = n_{h-1} + n_{h-2} + 1 ~~ \\Rightarrow ~~ n_h = F_{h+2} - 1 (h \\ge 0)\\) </li> <li>\\(F_i ~ \\approx ~ \\frac{1}{\\sqrt{5}} ( \\frac{1+\\sqrt{5}}{2} )^i ~~ \\Rightarrow ~~ n_h ~ \\approx ~ \\frac{1}{\\sqrt{5}} ( \\frac{1+\\sqrt{5}}{2} )^{h+2} - 1 ~~ \\Rightarrow ~~ h = O(log ~ n_h)\\) </li> <li>\\(n \\ge n_h ~~ \\Rightarrow ~~ h = O(log ~ n)\\) </li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/ADS/Lec01/#rotation","title":"Rotation","text":""},{"location":"Course/ADS/Lec01/#rr","title":"RR","text":"<p>Single Rotation</p> \u4f9d\u6b21\u63d2\u5165 Mar, May, Nov <p> \u4e0d\u5e73\u8861\u7684 \u201c\u53d1\u73b0\u8005\u201d \u662f Mar, \u201c\u9ebb\u70e6\u7ed3\u70b9\u201d Nov \u5728\u53d1\u73b0\u8005\u7684\u53f3\u5b50\u6811\u7684\u53f3\u8fb9\uff0c\u56e0\u800c\u53eb \u201cRR \u63d2\u5165\u201d\uff0c\u9700\u8981 \u201cRR \u65cb\u8f6c\u201d \u5373\u53f3\u5355\u65cb</p> <p></p>"},{"location":"Course/ADS/Lec01/#ll","title":"LL","text":"<p>Single Rotation</p> \u518d\u4f9d\u6b21\u63d2\u5165 Aug, Apr <p> \u201c\u53d1\u73b0\u8005\u201d \u662f Mar, \u201c\u9ebb\u70e6\u7ed3\u70b9\u201d Apr \u5728\u53d1\u73b0\u8005\u7684\u5de6\u5b50\u6811\u7684\u5de6\u8fb9\uff0c\u56e0\u800c\u53eb \u201cLL \u63d2\u5165\u201d\uff0c\u9700\u8981 \u201cLL \u65cb\u8f6c\u201d \u5373\u5de6\u5355\u65cb</p> <p></p>"},{"location":"Course/ADS/Lec01/#lr","title":"LR","text":"<p>Double Rotation</p> \u518d\u63d2\u5165 Jan <p> \u201c\u53d1\u73b0\u8005\u201d \u662f May, \u201c\u9ebb\u70e6\u7ed3\u70b9\u201d Jan \u5728\u53d1\u73b0\u8005\u7684\u5de6\u5b50\u6811\u7684\u53f3\u8fb9\uff0c\u56e0\u800c\u53eb \u201cLR \u63d2\u5165\u201d\uff0c\u9700\u8981 \u201cLR \u65cb\u8f6c\u201d</p> <p></p>"},{"location":"Course/ADS/Lec01/#rl","title":"RL","text":"<p>Double Rotation</p> \u518d\u63d2\u5165 Dec, July, Feb <p> \u201c\u53d1\u73b0\u8005\u201d \u662f Aug, \u201c\u9ebb\u70e6\u7ed3\u70b9\u201d Feb \u5728\u53d1\u73b0\u8005\u7684\u53f3\u5b50\u6811\u7684\u5de6\u8fb9\uff0c\u56e0\u800c\u53eb \u201cRL \u63d2\u5165\u201d\uff0c\u9700\u8981 \u201cRL \u65cb\u8f6c\u201d</p> <p></p>"},{"location":"Course/ADS/Lec01/#splay-trees-amortized-analysis","title":"Splay Trees &amp; Amortized Analysis","text":""},{"location":"Course/ADS/Lec01/#splay-trees","title":"Splay Trees | \u4f38\u5c55\u6811","text":"<p>Splay Tree - Definition</p> <p>A relatively simple date structure, known as splay tree, that guarantees that any m consecutive tree operations take at most \\(O(Mlog~N)\\) time.</p> <p>It means that the amortized time is \\(O(log~N)\\)  Any simgle operation might take \\(O(N)\\) time</p>"},{"location":"Course/ADS/Lec01/#find","title":"Find","text":"<ul> <li>\u4f38\u5c55\u6811\u7684\u6838\u5fc3\u60f3\u6cd5\u662f: \u4e00\u4e2a\u8282\u70b9\u88ab\u8bbf\u95ee\u540e\uff0c\u901a\u8fc7\u4e00\u7cfb\u5217 AVL Tree \u7684\u65cb\u8f6c\u65b9\u6cd5\u5c06\u5b83\u8f6c\u81f3\u6839\u8282\u70b9</li> <li>\u5c1d\u8bd5\u5355\u65cb:<ul> <li></li> <li>\u53d1\u73b0 K3 \u6c89\u5230\u4e86\u66f4\u5e95\u90e8</li> </ul> </li> <li> <p>\u7ed9\u51fa\u65b0\u7684\u65cb\u8f6c\u65b9\u6cd5: </p> <p>For any nonroot node X, denote its parent by P and grandparent by G: </p> <ul> <li>Case 1: P is the root \u2014\u2014&gt; Rotate X and P</li> <li> <p>Case 2: P is not the root </p> <ul> <li>Zig-zag: </li> <li>Zig-zig: </li> </ul> <p>\u7b2c\u4e00\u4e2a\u4e3a LR\uff0c \u7b2c\u4e8c\u4e2a\u4e3a\u4e24\u6b21 LL</p> </li> </ul> </li> <li> <p>\u90a3\u4e48\u5bf9\u4e8e\u5f00\u59cb\u7684\u56fe\u5f62\uff0c\u4f7f\u7528 Splay \u5f97\u5230 </p> <p>Splaying not only moves the accessed node to the root, but also roughly halves the depth of most nodes on the path.</p> </li> </ul> \u4e3e\u4e2a\u6817\u5b50 <p></p>"},{"location":"Course/ADS/Lec01/#deletions","title":"Deletions","text":"<ul> <li>Step 1: Find X (X will be at the root)</li> <li>Step 2: Remove X (There will be two subtrees \\(T_L\\) and \\(T_R\\) )</li> <li>Step 3: FindMax( \\(T_L\\) ) (The largest element will be the root of \\(T_L\\) , and has no right child)</li> <li>Step 4: Make \\(T_R\\) the right child of the root of \\(T_L\\) </li> </ul>"},{"location":"Course/ADS/Lec01/#amortized-analysis","title":"Amortized Analysis | \u644a\u8fd8\u5206\u6790","text":"Abstract <p>Almost the most difficult question in ADS</p> <ul> <li>worst-case bound \\(\\ge\\) amortized bound \\(\\ge\\) average-case bound</li> <li>\u5206\u6790\u65b9\u6cd5: <ul> <li>Aggregate analysis | \u805a\u5408\u5206\u6790</li> <li>Accounting method | \u6838\u7b97\u6cd5</li> <li>Potential method | \u52bf\u80fd\u65b9\u6cd5 (Highest-level)</li> </ul> </li> </ul>"},{"location":"Course/ADS/Lec01/#aggregate-analysis","title":"Aggregate Analysis","text":"<p>Show that for all n, a sequence of n operations takes worst-case time \\(T(n)\\) in total. In the worst case, the average cost, or amortized cost per operation is \\(\\frac{T(n)}{n}\\) </p> Stack with MultiPop(int k, Stack S) <pre><code>Algorithm{\nwhile(!IsEmpty(S) $$ k &gt; 0)\n{\nPop(S);\nk --;\n}\n}\n</code></pre> <ul> <li>Consider a sequence of \\(n\\) Push, Pop, and MultiPop operations on an initially empty stack. (sizeof(S) \\(\\le n\\) )<ul> <li>\\(n\\) \u6b21\u64cd\u4f5c, push \u7684\u64cd\u4f5c \\(\\le n\\) (pop \u5fc5\u987b\u8981\u6709 push), \u6700\u591a\u7684\u8d39\u7528 \\(\\approx 2n-2\\)</li> <li>\\(T_{amortized} ~ = ~ O(n) / n ~ = ~ O(1)\\)</li> </ul> </li> </ul>"},{"location":"Course/ADS/Lec01/#accounting-method","title":"Accounting Method","text":"<ul> <li>When an operation\u2019s amortized cost \\(\\hat{c_i}\\) exceeds its actual cost \\(c_i\\) , we assign the difference to specific objects in the data structure as credit (namely \\(\\Delta _i\\)). Credit can help pay for later operations whose amortized cost is less than their actual cost.</li> <li>\u201c\u52ab\u5bcc\u6d4e\u8d2b\u201d\uff0c\u5c06\u65f6\u95f4\u5212\u5206</li> </ul> \u67f1\u72b6\u56fe\u8868\u793a\u5404\u60c5\u51b5\u7684\u65f6\u95f4\u8d39\u7528 <ul> <li>\\(\\frac{\\sum \\hat{c_i}}{n} ~ = \\frac{\\sum c_i}{n} + \\frac{\\sum \\Delta _i}{n} ~ \\le ~ A\\) </li> <li>\u82e5\u5e0c\u671b \\(\\frac{\\sum \\hat{c_i}}{n} \\le A\\) (A \u4e3a\u67d0\u4e2a\u6570\u503c)\uff0c \u867d\u7136 \\(\\Delta _i\\) \u53d6\u503c\u90fd\u6709\u53ef\u80fd\uff0c\u4f46\u5982\u679c \\(\\frac{\\sum \\Delta _i}{n} \\ge 0\\) .</li> <li>\u6b64\u65f6\u5982\u679c\u53ef\u4ee5\u8bc1\u660e \\(\\frac{max \\sum \\hat{c_i}}{n} \\le A ~ \\approx ~ \\frac{\\sum c_i}{n} \\le A\\) (\u5176\u5b9e\u5c31\u7b49\u4ef7\u4e8e\u8ba1\u7b97\u6700\u5927\u7684\u644a\u8fd8\u8d39\u7528 \\(\\le A\\) , \u5373 worst-case \u4e0b\u8d39\u7528 \\(\\le A\\) )</li> </ul> Stack with MultiPop(int k, Stack S) <ul> <li>\\(c_i\\) for Push: 1; Pop: 1; MultiPop: min(sizeof(S), k)</li> <li>\\(\\hat{c_i}\\) for Push: 2; Pop: 0; MultiPop: 0</li> </ul> <p>Starting from an empty stack \u2014\u2014 Credits for</p> <ul> <li>Push: +1; Pop: -1; MultiPop: -1 for each +1 ( \\(\\sum Credits \\ge 0\\) )</li> <li>sizeof(S) \\(\\ge 0 ~~ \\Rightarrow ~~ Credits \\ge 0\\)</li> <li>\\(\\Rightarrow ~~ O(n) = \\sum\\limits_{i=1}^n \\hat{c_i} \\ge \\sum\\limits_{i=1}^n c_i\\) </li> <li>\\(\\Rightarrow ~~ T_{amortized} = O(n)/n = O(1)\\)</li> </ul>"},{"location":"Course/ADS/Lec01/#potential-method","title":"Potential Method","text":"<ul> <li>Take a closer look at the credit \u2014\u2014 \\(\\hat{c_i} - c_i = Credit = \\Phi(D_i) - \\Phi(D_{i-1})\\) ( \\(\\Phi \\rightarrow Potential ~ function\\)  )</li> <li>\\(\\sum\\limits_{i=1}^n \\hat{c_i} = \\sum\\limits_{i=1}^n (c_i + \\Phi (D_i) - \\Phi (D_{i-1})) = (\\sum\\limits_{i=1}^n c_i) + \\Phi (D_n) - \\Phi (D_0)\\)</li> <li>\u5176\u4e2d, \\(\\Phi (D_n) - \\Phi (D_0) \\ge 0\\) (\u6211\u4eec\u5e0c\u671b\u505a\u5230 \\(\\Phi (D_0) = 0  ~,~ \\Phi(D_n) \\ge 0\\) , \\(\\Phi(D_0)\\) \u662f\u5e38\u6570\u4e5f\u6ca1\u6709\u95ee\u9898)</li> <li>In general, a good potential function should always assume its minimum at the start of the sequence</li> </ul> Stack with MultiPop(int k, Stack S) <ul> <li>\\(D_i\\) = the stack that results after the i -th operation </li> <li>\\(\\Phi (D_i)\\) = the number of objects in the stack \\(D_i\\)<ul> <li>\u5219 \\(\\Phi (D_i) \\ge 0 = \\Phi (D_0)\\)</li> <li>Push: \\(\\Phi (D_i) - \\Phi (D_{i-1}) = (sizeof(S) + 1) - sizeof(S) = 1\\)<ul> <li>\\(\\hat{c_i} = c_i + \\Phi (D_i) - \\Phi (D_{i-1}) = 1 + 1 = 2\\)</li> </ul> </li> <li>Pop: \\(\\Phi (D_i) - \\Phi (D_{i-1}) = (sizeof(S) - 1) - sizeof(S) = -1\\)<ul> <li>\\(\\hat{c_i} = c_i + \\Phi (D_i) - \\Phi (D_{i-1}) = 1 - 1 = 0\\)</li> </ul> </li> <li>MultiPop: \\(\\Phi (D_i) - \\Phi (D_{i-1}) = (sizeof(S) - k' ) - sizeof(S) = -k'\\)<ul> <li>\\(\\hat{c_i} = c_i + \\Phi (D_i) - \\Phi (D_{i-1}) = k' - k' = 0\\)</li> </ul> </li> </ul> </li> <li>\\(\\sum\\limits_{i=1}^n \\hat{c_i} = \\sum\\limits_{i=1}^n O(1) = O(n) \\ge (\\sum\\limits_{i=1}^n c_i) ~~ \\Rightarrow ~~ T_{amortized} = O(n)/n = O(1)\\)</li> </ul> <p>[example] : Splay Trees: \\(T_{amortized} = O(log N)\\) </p> <ul> <li>\\(D_i\\) = the root of the resulting tree</li> <li>\\(\\Phi(D_i)\\) : must increase by at most \\(O(log N)\\) over \\(n\\) steps, AND will also cancel out the number of rotations (zig: 1; zig-zag: 2; zig-zig: 2)</li> <li>\\(\\Phi(T) = \\sum\\limits_{i \\in T} log~S(i)\\) where \\(S(i)\\) is the number of descendants of \\(i\\) ( \\(i\\) itself included)</li> </ul> <p>\\(T\\) \u5373 \\(D(i)\\) , \\(log~S(i)\\) called Rank of the subtree \\(\\approx\\) Height of the tree</p> <ul> <li> <p>\\(\\Phi(T) = \\sum\\limits_{i \\in T} Rank(i)\\) </p> <ul> <li>Zig: <ul> <li>\\(\\hat{c_i} = 1 + R_2(X) - R_1(X) + R_2(P) - R_1(P)\\)</li> <li>\\(\\le 1 + R_2(X) - R_1(X)\\) ( \\(R_2(X)\\) \u8868\u793a\u65cb\u8f6c\u540e\u7684\u8fd9\u4e2a\u70b9\u7684\u52bf\u51fd\u6570)</li> </ul> </li> <li> <p>Zig-zag: </p> <ul> <li>\\(\\hat{c_i} = 2 + R_2(X) - R_1(X) + R_2(P) - R_1(P) + R_2(G) - R_1(G)\\)</li> <li>\\(\\le 2(R_2(X) - R_1(X))\\) </li> </ul> <p>\\((a+b)^2 \\ge 4ab ~~ \\Rightarrow ~~ 2log~(a+b) \\ge 2 + log~a + log~b\\) </p> </li> <li> <p>Zig-zig: </p> <ul> <li>\\(\\hat{c_i} = 2 + R_2(X) - R_1(X) + R_2(P) - R_1(P) + R_2(G) - R_1(G)\\)</li> <li>\\(\\le 3(R_2(X) - R_1(X))\\) </li> </ul> </li> <li>[Theorem] : The amortized time to splay a tree with root \\(T\\) at node \\(X\\) is at most \\(3(R(T) - R(X)) + 1 = O(log~N)\\) </li> </ul> </li> </ul>"},{"location":"Course/Crypto/","title":"\u5bc6\u7801\u5b66","text":"<p>Note</p> <p>ZJU - \u5bc6\u7801\u5b66 \u8bfe\u7a0b (bhh \u4e13\u573a)</p> <p>References</p> <p>\u73b0\u4ee3\u5bc6\u7801\u5b66\u7b2c\u4e8c\u7248_\u9648\u9c81\u751f</p> <p>\u9700\u8981 ZJU-ip \u767b\u5f55</p> <p>To Be Continued</p>"},{"location":"Course/Crypto/Lec03/","title":"MD5","text":"<p>MD5 \u662f\u5c06\u660e\u6587\u5904\u7406\u6210 16byte \u7684\u54c8\u5e0c\u6458\u8981</p>"},{"location":"Course/Crypto/Lec03/#_1","title":"\u52a0\u5bc6\u8fc7\u7a0b","text":"\\[ \\begin{aligned} \\rm m&amp;={\\rm md5}(letter)\\\\ \\rm m'&amp;={\\rm rsa}(m,\\rm private\\ key) \\end{aligned} \\]"},{"location":"Course/Crypto/Lec03/#_2","title":"\u68c0\u9a8c\u8fc7\u7a0b","text":"\\[ \\begin{aligned} \\rm md5(letter) == \\rm rsa(m', public\\ key)\\\\ \\end{aligned} \\]"},{"location":"Course/Crypto/Lec03/#_3","title":"\u5b9e\u73b0","text":""},{"location":"Course/Crypto/Lec03/#_4","title":"\u7ed3\u6784\u4f53\u5b9a\u4e49","text":"<pre><code>typedef struct _MD5_CTX\n{\nunsigned long state[4];\nunsigned long count[2]; /* \u5df2\u5904\u7406\u7684\u62a5\u6587\u7684\u4e8c\u8fdb\u5236\u4f4d\u6570,\u6700\u5927\u503c=2^64-1 */\nunsigned char data[4];  /* 64\u5b57\u8282message\u5757 */\n}\n</code></pre>"},{"location":"Course/Crypto/Lec03/#init","title":"Init","text":"<p>\u5bf9state\u8d4b\u521d\u59cb\u503c\uff0c\u6e05\u7a7acount</p>"},{"location":"Course/Crypto/Lec03/#update","title":"Update","text":"<p>\u6bcf64\u4e2a\u5b57\u8282\u4e3a\u4e00\u7ec4\uff0c\u8fdb\u884c\u5904\u7406\u66f4\u65b0</p>"},{"location":"Course/Crypto/Lec03/#final","title":"Final","text":"<p>\u56e0\u4e3a\u4e0d\u662f\u6240\u6709\u7684\u660e\u6587\u90fd\u662f64\u5b57\u8282\u7684\u500d\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5bf9\u7f3a\u5931\u7684\u5185\u5bb9\u8fdb\u884c\u8865\u5145\uff0c\u8865\u5145\u7684\u5185\u5bb9\u5305\u62ec\u586b\u5145\u7269\u548c\u660e\u6587\u957f\u5ea6</p> <ul> <li>\u586b\u5145\u7269   0x80, 0x00, 0x00, \u2026, 0x00</li> <li>\u89c4\u5219</li> </ul>"},{"location":"Course/Crypto/Lec03/#_5","title":"\u7834\u89e3","text":"<p>MD5\u7684\u7834\u89e3\u5173\u952e\u5728\u4e8e\u627e\u5230Collision</p>"},{"location":"Course/Crypto/Lec03/#collision","title":"Collision","text":"<p>\\({\\rm md5}(x)={\\rm md5}(x') \\ \\ (x\\ne x')\\)</p>"},{"location":"Course/Crypto/Lec03/#rainbow-table","title":"rainbow table","text":"<p>\u4e00\u79cd\u8f83\u5f31\u7684MD5\u7834\u89e3\u65b9\u6cd5\uff0c\u5173\u952e\u5728\u4e8e \u9884\u8ba1\u7b97</p> <ul> <li>\u627eN\u7ec4\u6570\u636e</li> <li>\u5bf9N\u7ec4\u6570\u636e\u5206\u522b\u4f7f\u7528MD5\u5904\u7406K\u8f6e</li> <li>\u5bf9\u76ee\u6807\u6570X\u8fdb\u884cMD5\u5904\u7406\uff0c\u5e76\u5c06\u7ed3\u679c\u4e0eN\u4e2a(\u5904\u7406K\u8f6e\u540e\u7684)\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83</li> <li>\u82e5X\u4e0e\u5176\u4e2d\u67d0\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u6839\u636eX\u88abMD5\u5904\u7406\u7684\u8f6e\u6570\u5373\u53ef\u5012\u63a8\u51faCollision</li> <li>\u5426\u5219\u7ee7\u7eed\u5bf9X\u8fdb\u884cMD5\u5904\u7406</li> </ul>"},{"location":"Course/FDS/","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840","text":"<p>Abstract</p> <p>ZJU \u2013 FDS(\u6570\u636e\u7ed3\u6784\u57fa\u7840) \u8bfe\u7a0b\u76f8\u5173\u7b14\u8bb0</p>"},{"location":"Course/FDS/Lec01/","title":"\u7b97\u6cd5\u5206\u6790\u548c\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":""},{"location":"Course/FDS/Lec01/#perface","title":"Perface","text":"<ul> <li>clock() \uff1a\u6355\u6349\u4ece\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u5230 clock() \u88ab\u8c03\u7528\u6240\u8017\u8d39\u7684\u65f6\u95f4\u3002</li> <li>\u8fd9\u4e2a\u65f6\u95f4\u5355\u4f4d\u662f clock tick \uff0c\u5373\u201d\u65f6\u949f\u6253\u70b9\u201c\u3002</li> <li>\u5e38\u6570 CLK_TCK \uff1a\u673a\u5668\u65f6\u949f\u6bcf\u79d2\u6240\u8d70\u7684\u65f6\u949f\u6253\u70b9\u6570\u3002</li> </ul> Note <pre><code>      clock_t start, stop;\n/* clock_t \u662f clock()\u51fd\u6570\u8fd4\u56de\u7684\u53d8\u91cf\u7c7b\u578b */\ndouble duration;\n/* \u8bb0\u5f55\u88ab\u6d4b\u51fd\u6570\u8fd0\u884c\u65f6\u95f4\uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d */\nint main()\n{\n/* \u4e0d\u5728\u6d4b\u8bd5\u8303\u56f4\u5185\u7684\u51c6\u5907\u5de5\u4f5c\u653e\u5728clock()\u8c03\u7528\u4e4b\u524d */\nstart = clock();    /* \u5f00\u59cb\u8ba1\u65f6 */\nMyFunction();\nstop = clock();\nduration = ((double)(stop - start))/CLK_TCK;\n/* \u5176\u4ed6\u4e0d\u5728\u6d4b\u8bd5\u8303\u56f4\u7684\u5904\u7406\u5199\u5728\u540e\u9762\uff0c\u4f8b\u5982\u8f93\u51faduration\u7684\u503c */\nreturn 0;\n}\n</code></pre>"},{"location":"Course/FDS/Lec01/#-","title":"\u7b80\u4ecb-&gt;\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784","text":""},{"location":"Course/FDS/Lec01/#_2","title":"\u6570\u636e\u5bf9\u8c61\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u7ec4\u7ec7\u65b9\u5f0f","text":""},{"location":"Course/FDS/Lec01/#_3","title":"\u903b\u8f91\u7ed3\u6784","text":"<ul> <li>\u4e00\u5bf9\u4e00\u7684\u7ed3\u6784\uff0c\u53eb\u505a\u201d\u7ebf\u6027\u7ed3\u6784\u201c</li> <li>\u4e00\u5bf9\u591a\u7684\u903b\u8f91\u7ed3\u6784\uff0c\u53eb\u505a\u201d\u6811\u578b\u7ed3\u6784\u201c</li> <li>\u591a\u5bf9\u591a\u7684\u590d\u6742\u5173\u7cfb\u7f51\uff0c\u8fd9\u4e2a\u5173\u7cfb\u7f51\u53eb\u505a\u201d\u56fe\u201c</li> </ul>"},{"location":"Course/FDS/Lec01/#_4","title":"\u7269\u7406\u5b58\u50a8\u7ed3\u6784 (\u5982\u6570\u7ec4\u5f62\u5f0f\u3001\u94fe\u8868\u5f62\u5f0f \u00b7\u00b7\u00b7","text":"<p>Note</p> <p>\u63cf\u8ff0\u6570\u636e\u7ed3\u6784</p> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b (Abstract Data Type) | ADT</p> <ol> <li>\u6570\u636e\u7c7b\u578b<ol> <li>\u6570\u636e\u5bf9\u8c61\u96c6</li> <li>\u6570\u636e\u96c6\u5408\u76f8\u5173\u8054\u7684\u64cd\u4f5c\u96c6</li> </ol> </li> <li>\u62bd\u8c61\uff1a\u63cf\u8ff0\u6570\u636e\u7c7b\u578b\u7684\u65b9\u6cd5\u4e0d\u4f9d\u8d56\u4e8e\u5177\u4f53\u5b9e\u73b0<ol> <li>\u4e0e\u5b58\u653e\u548c\u6570\u636e\u7684\u673a\u5668\u65e0\u5173</li> <li>\u4e0e\u6570\u636e\u5b58\u50a8\u7684\u7269\u7406\u7ed3\u6784\u65e0\u5173</li> <li>\u4e0e\u5b9e\u73b0\u64cd\u4f5c\u7684\u7b97\u6cd5\u548c\u7f16\u7a0b\u8bed\u8a00\u5747\u65e0\u5173</li> </ol> </li> </ol> <ul> <li>\u53ea\u63cf\u8ff0\u6570\u636e\u5bf9\u8c61\u96c6\u548c\u76f8\u5173\u64cd\u4f5c\u96c6\u201d\u662f\u4ec0\u4e48\u201c\uff0c\u5e76\u4e0d\u6d89\u53ca\u201d\u5982\u4f55\u505a\u5230\u201c\u7684\u95ee\u9898</li> <li>\u5176\u4e2d\u7684\u62bd\u8c61\u53ef\u4ee5\u4ece\u5982\u4e0b\u770b<ul> <li>e.g\uff1aElementType \u662f\u901a\u7528\u6570\u636e\u7c7b\u578b (\u62bd\u8c61)\uff0c\u9700\u8981 double \uff0c\u5728\u524d\u9762 define \u5373\u53ef</li> <li>e.g\uff1a\u77e9\u9635\u662f\u7528\u4e8c\u7ef4\u6570\u7ec4\u3001\u4e00\u7ef4\u6570\u7ec4\u8fd8\u662f\u5341\u5b57\u94fe\u8868\u5b9e\u73b0\u7684\u90fd\u4e0d\u91cd\u8981\uff0c\u53ea\u662f\u5b9e\u73b0\u4e00\u4e2a\u77e9\u9635</li> <li>e.g\uff1aMatrix Add \u4e2d\u4e0d\u5728\u4e4e\u6309\u884c\u52a0\u8fd8\u662f\u6309\u5217\u52a0\uff0c\u7528\u4ec0\u4e48\u8bed\u8a00\u5b9e\u73b0\u90fd\u4e0d\u5728\u4e4e</li> </ul> </li> </ul> <p>\u62bd\u8c61\u7684\u597d\u5904-&gt;\u4e00\u65b9\u9762\u662f\u63d0\u9ad8\u7a0b\u5e8f\u7684\u590d\u7528\u6027\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u8ba9\u6211\u4eec\u4fa7\u91cd\u53bb\u4e86\u89e3\u7a0b\u5e8f\u7684\u903b\u8f91\u7ed3\u6784</p>"},{"location":"Course/FDS/Lec01/#_5","title":"\u7b97\u6cd5\u5206\u6790","text":""},{"location":"Course/FDS/Lec01/#_6","title":"\u5b9a\u4e49","text":""},{"location":"Course/FDS/Lec01/#algorithm","title":"\u7b97\u6cd5 (Algorithm)","text":"<ol> <li>\u4e00\u4e2a\u6709\u9650\u6307\u4ee4\u96c6</li> <li>\u63a5\u53d7\u4e00\u4e9b\u8f93\u5165 (\u6709\u4e9b\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u8f93\u5165) </li> <li>\u4ea7\u751f\u8f93\u51fa</li> <li>\u4e00\u5b9a\u5728\u6709\u9650\u6b65\u9aa4\u4e4b\u540e\u7ec8\u6b62</li> <li>\u6bcf\u4e00\u6761\u6307\u4ee4\u5fc5\u987b<ol> <li>\u6709\u5145\u5206\u660e\u786e\u7684\u76ee\u6807\uff0c\u4e0d\u53ef\u4ee5\u4ea7\u751f\u6b67\u4e49</li> <li>\u8ba1\u7b97\u673a\u80fd\u5904\u7406\u7684\u8303\u56f4\u4e4b\u5185</li> <li>\u63cf\u8ff0\u5e94\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u4e00\u79cd\u8ba1\u7b97\u673a\u8bed\u8a00\u53ca\u5177\u4f53\u7684\u5b9e\u73b0\u624b\u6bb5</li> </ol> </li> </ol>"},{"location":"Course/FDS/Lec01/#_7","title":"\u8861\u91cf\u7b97\u6cd5\u7684\u4e24\u4e2a\u6307\u6807","text":""},{"location":"Course/FDS/Lec01/#sn","title":"\u7a7a\u95f4\u590d\u6742\u5ea6 S(n)","text":"<p>\u6839\u636e\u7b97\u6cd5\u5199\u6210\u7684\u7a0b\u5e8f\u5728\u6267\u884c\u65f6 \u5360\u7528\u5b58\u50a8\u5355\u5143\u7684\u957f\u5ea6 \u3002\u8fd9\u4e2a\u957f\u5ea6\u5f80\u5f80\u4e0e\u8f93\u5165\u6570\u636e\u7684\u89c4\u6a21\u6709\u5173\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\u7684\u7b97\u6cd5\u53ef\u80fd\u5bfc\u81f4\u4f7f\u7528\u7684\u5185\u5b58\u8d85\u9650\uff0c\u9020\u6210\u7a0b\u5e8f\u975e\u6b63\u5e38\u4e2d\u65ad\u3002</p>"},{"location":"Course/FDS/Lec01/#tn","title":"\u65f6\u95f4\u590d\u6742\u5ea6 T(n)","text":"<p>\u6839\u636e\u7b97\u6cd5\u5199\u6210\u7684\u7a0b\u5e8f\u5728\u6267\u884c\u65f6 \u8017\u8d39\u65f6\u95f4\u7684\u957f\u5ea6 \u3002\u8fd9\u4e2a\u957f\u5ea6\u5f80\u5f80\u4e5f\u4e0e\u8f93\u5165\u6570\u636e\u7684\u89c4\u6a21\u6709\u5173\u3002</p>"},{"location":"Course/FDS/Lec01/#_8","title":"\u590d\u6742\u5ea6\u7684\u6e10\u8fdb\u8868\u793a\u6cd5","text":"<ol> <li> <p>\\(T(n) =  O  (f(n))\\) \u8868\u793a\u5b58\u5728\u5e38\u6570 \\(C&gt;0, n_0 &gt; 0\\), \u4f7f\u5f97\u5f53 \\(n \\ge  n_0\\) \u65f6\u6709 \\(T(n) \\le C\u00d7f(n)\\)</p> </li> <li> <p>\\(T(n) =\\Omega(g(n))\\) \u8868\u793a\u5b58\u5728\u5e38\u6570 \\(C&gt;0\uff0cn_0&gt;0\\), \u4f7f\u5f97\u5f53 \\(n \\ge n_0\\) \u65f6\u6709 \\(T(n) \\ge C\u00d7g(n)\\)</p> </li> <li> <p>\\(T(n) =\\Theta(h(n))\\) \u8868\u793a\u540c\u65f6\u6709 \\(T(n) = O(h(n))\\) \u548c \\(T(n) = \\Omega(h(n))\\)</p> </li> </ol>"},{"location":"Course/FDS/Lec01/#tips","title":"TIPs","text":"<ol> <li> <p>\u82e5\u6709\u4e24\u6bb5\u7b97\u6cd5\u5206\u522b\u6709\u590d\u6742\u5ea6 \\(T_1(n) = O(f_1(n))\u548cT_2(n) = O(f_2(n))\\)\uff0c\u5219</p> <ol> <li> <p>\\(T_1(n) + T_2(n) = max(O(f_1(n)), O(f_2(n)))\\) \u8868\u793a\u4e24\u4e2a\u7b97\u6cd5\u62fc\u63a5\u8d77\u6765</p> </li> <li> <p>\\(T_1(n) \\times T_2(n) = O(f_1(n) \\times f_2(n))\\) \u8868\u793a\u4e24\u4e2a\u7b97\u6cd5\u5d4c\u5957\u8d77\u6765</p> </li> </ol> </li> <li> <p>\u82e5 \\(T(n)\\) \u662f\u5173\u4e8en\u7684k\u9636\u591a\u9879\u5f0f\uff0c\u90a3\u4e48 \\(T(n)= \\Theta (n^k)\\)</p> </li> <li> <p>\u4e00\u4e2afor\u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7b49\u4e8e\u5faa\u73af\u6b21\u6570\u4e58\u4ee5\u5faa\u73af\u4f53\u4ee3\u7801\u7684\u590d\u6742\u5ea6</p> </li> <li> <p>if-else\u7ed3\u6784\u7684\u590d\u6742\u5ea6\u53d6\u51b3\u4e8eif\u7684\u6761\u4ef6\u5224\u65ad\u590d\u6742\u5ea6\u548c\u4e24\u4e2a\u5206\u652f\u90e8\u5206\u7684\u590d\u6742\u5ea6\uff0c\u603b\u4f53\u590d\u6742\u5ea6\u53d6\u4e09\u8005\u4e2d\u6700\u5927</p> </li> </ol>"},{"location":"Course/FDS/Lec01/#checking-your-analysis","title":"Checking Your Analysis","text":"<ol> <li> <p>Method 1</p> <ol> <li> <p>When \\(T(N) = O(N)\\), check if \\(T(2N)/T(N)\\approx 2\\) </p> </li> <li> <p>When \\(T(N) = O(N^2)\\), check if \\(T(2N)/T(N)\\approx 4\\) </p> </li> <li> <p>When \\(T(N) = O(N^3)\\), check if \\(T(2N)/T(N)\\approx 8\\) </p> </li> <li> <p>\u00b7\u00b7\u00b7</p> </li> </ol> </li> <li> <p>Method 2</p> <ol> <li>When \\(T(N) = O(f(N))\\), check if \\(\\lim\\limits_{N\\rightarrow\\infty}\\frac{T(N)}{f(N)} \\approx Constant\\)</li> </ol> </li> </ol> <p>Info</p> <p>\u4e00\u4e2a\u5206\u6790\u590d\u6742\u5ea6\u7684\u65b9\u6cd5</p>"},{"location":"Course/FDS/Lec01/#master","title":"\u4e3b\u5b9a\u7406 | Master","text":""},{"location":"Course/FDS/Lec01/#_9","title":"\u4ecb\u7ecd","text":"<p>Master\u5b9a\u7406\uff0c\u53c8\u79f0\u4e3b\u5b9a\u7406\uff0c\u7528\u4e8e\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97 (\u5e38\u7528\u4e8e\u9012\u5f52\u8c03\u7528\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6) </p>"},{"location":"Course/FDS/Lec01/#_10","title":"\u7528\u6cd5","text":"<p>\u9012\u5f52\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5f62\u5982\uff1a</p> <ol> <li> <p>\\(T(n) = O(1), n = 1\\)</p> </li> <li> <p>\\(T(n) = aT(\\frac{n}{b}) + f(n) , n &gt; 1\\)</p> </li> </ol> <p>\u5176\u4e2d\uff0c\\(a \\ge 1; b &gt; 1 ;\\)\\(f(n)\\) \u8868\u793a\u4e0d\u53c2\u4e0e\u9012\u5f52\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6, \u89c4\u5b9a \\(C_{crit}=log_ba\\)</p> <p>\u7b2c\u4e8c\u6761\u516c\u5f0f\u8868\u793a\uff1a\u5c06\u4e00\u4e2a\u89c4\u6a21\u4e3an\u7684\u95ee\u9898\u5206\u4e3a \\(a\\) \u4e2a\u89c4\u6a21\u4e3a \\(\\frac{n}{b}\\) \u5b50\u95ee\u9898\uff0c\u6bcf\u6b21\u9012\u5f52\u5c06\u5e26\u6765 \\(f(n)\\) \u7684\u989d\u5916\u8ba1\u7b97\uff0c\u7136\u540e\u901a\u8fc7\u5bf9\u8fd9 \\(a\\) \u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u7684\u7efc\u5408\uff0c\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3</p> <p>\u90a3\u4e48\u6709\uff1a</p> <ol> <li>\u5f53 \\(f(n) = O(n^c)\\) \uff0c\u4e14 \\(c &lt; C_{crit}\\) \u65f6\u6709\uff1a \\(T(n) = \\Theta(n^{C_{crit}})\\) </li> </ol> Example <p>\\(T(n) = 8T(\\frac{n}{2}) + 1000n^2\\)</p> <p>\u6b64\u65f6 \\(a=8, b=2, f(n)=1000n^2\\)</p> <p>\\(c=2&lt;3=log_ba=C_{crit}\\)</p> <p>\u6545 \\(T(n)=\\Theta(n^3)\\)</p> <ol> <li>\u5f53 \\(f(n)=O(n^c)\\) , \u4e14 \\(c &gt; C_{crit}\\) \u65f6\u6709\uff1a\\(T(n)=\\Theta(f(n))\\)</li> </ol> Example <p>\\(T(n) = 2T(\\frac{n}{2}) + n^2\\)</p> <p>\u6b64\u65f6 \\(a=2, b=2, f(n)=n^2\\)</p> <p>\\(c=2 &gt; 1=log_ba=C_{crit}\\)</p> <p>\u6545 \\(T(n)=\\Theta(n^2)\\)</p> <ol> <li> <p>\u5f53 \\(f(n)=O(n^c)\\) , \u4e14 \\(c=C_{crit}\\) \u65f6\uff1a\\(T(n)=\\Theta(n^clog~n)\\)</p> </li> <li> <p>\u82e5\u5b58\u5728\u975e\u8d1f\u6574\u6570 \\(k\\) \uff0c\u4f7f\u5f97 \\(f(n)=\\Theta(n^{C_{crit}}log_kn)\\) \uff0c\u90a3\u4e48 \\(T(n)=\\Theta(n^{C_{crit}}log_{k+1}n)\\)</p> </li> </ol> Quote <ol> <li>\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5 - \u4ee3\u7956\u534e - \u535a\u5ba2\u56ed</li> <li>Master\u5b9a\u7406\u5b66\u4e60\u7b14\u8bb0 - water_mi - \u535a\u5ba2\u56ed</li> </ol>"},{"location":"Course/FDS/Lec02/","title":"\u7ebf\u6027\u8868 &amp; \u6808 &amp; \u961f\u5217","text":""},{"location":"Course/FDS/Lec02/#lists","title":"\u7ebf\u6027\u8868 | Lists","text":""},{"location":"Course/FDS/Lec02/#_2","title":"\u7ebf\u6027\u8868\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u63cf\u8ff0","text":"<ol> <li><code>\u7c7b\u578b\u540d\u79f0</code> : \u7ebf\u6027\u8868 | List</li> <li><code>\u6570\u636e\u5bf9\u8c61\u96c6</code> :  \u7ebf\u6027\u8868\u662f n( \\(\\ge\\) 20) \u4e2a\u5143\u7d20\u6784\u6210\u7684\u6709\u5e8f\u5e8f\u5217</li> <li><code>\u64cd\u4f5c\u96c6</code> : \u7ebf\u6027\u8868 L \\(\\in\\) List\uff0c\u6574\u6570 i \u8868\u793a\u4f4d\u7f6e\uff0c\u5143\u7d20 X \\(\\in\\) ElementType.</li> </ol>"},{"location":"Course/FDS/Lec02/#_3","title":"\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u5b9e\u73b0","text":""},{"location":"Course/FDS/Lec02/#_4","title":"\u7ebf\u6027\u8868\u7684\u6570\u7ec4\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u4e3b\u8981\u64cd\u4f5c\u5b9e\u73b0</li> </ul> \u521d\u59cb\u5316 (\u5efa\u7acb\u7a7a\u7684\u987a\u5e8f\u8868) <pre><code>typedef int Position;\ntypedef struct LNode *List;\nstruct LNode {\nElementType Data[MAXSIZE];\nPosition Last;\n};\nList MakeEmpty()\n{\nList Ptrl;\nPtrl = (List)malloc(sizeof(struct LNode));\nPtrl-&gt;Last = -1;\nreturn Ptrl;\n}\n</code></pre> \u67e5\u627e <pre><code>int Find(ElementType X, List Ptrl)\n{\nint i = 0;\nwhile(i &lt;= Ptrl-&gt;Last &amp;&amp; Ptrl-&gt;Data[i] != X)\n{\ni++;\n}\nif(i &gt; Ptrl-&gt;Last)\nreturn -1;\nelse\nreturn i;\n}\n</code></pre> \u5728\u7b2c i (1 &lt;= i &lt;= n+1) \u4e2a\u4f4d\u7f6e\u4e0a\u63d2\u5165\u65b0\u5143\u7d20 X <pre><code>void Insert(ElementType X, int i, List L)\n{\nint j;\nif(Ptrl-&gt;Last == MAXSIZE-1)\n{\nprintf(\"\u8868\u6ee1\");\nreturn ;\n}\nif(i &lt; 1 || i &gt; Ptrl-&gt;Last+2 )\n{\nprintf(\"\u4f4d\u7f6e\u4e0d\u5408\u6cd5\");\nreturn;\n}\nfor(j = Ptrl-&gt;Last; j &gt;= i - 1; j--)\n{\nPtrl-&gt;Data[j+1] = Ptrl-&gt;Data[j];\n}\nPtrl-&gt;Data[i-1] = X;\nPtrl-&gt;Last++;\nreturn;   }\n</code></pre> \u5220\u9664 <pre><code>void Delete( int i, List Ptrl )\n{\nint j;\nif(i &lt; 1 || i &gt; Ptrl-&gt;Last+1)\n{\nprintf(\"\u4e0d\u5b58\u5728\");\nreturn;\n}\nfor(j = i; i &lt;= Ptrl-&gt;Last; j++)\n{\nPtrl-&gt;Data[j-1] = Ptrl-&gt;Data[j];\n}\nPtrl-&gt;Last--;\nreturn E;\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_5","title":"\u7ebf\u6027\u8868\u7684\u94fe\u8868\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u4e0d\u8981\u6c42\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u7269\u7406\u4e0a\u4e5f\u76f8\u90bb</li> <li>\u901a\u8fc7\u4fee\u6539\u201d\u94fe\u201c\u5efa\u7acb\u8d77\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u903b\u8f91\u5173\u7cfb</li> </ul> <p>Tip</p> <p>\u63d2\u5165\u3001\u5220\u9664\u4e0d\u9700\u8981\u79fb\u52a8\u6570\u636e\u5143\u7d20\uff0c\u53ea\u9700\u8981\u4fee\u6539\u201d\u94fe\u201c</p> \u94fe\u8868\u7ed3\u6784 <pre><code>typedef struct LNode *List;\nstruct LNode{\nElementType Data;\nList Next;\n};\nstruct LNode L;\nList Ptrl;\n</code></pre> <ul> <li>\u4e3b\u8981\u64cd\u4f5c:</li> </ul> \u6c42\u8868\u957f <pre><code>int Length(List Ptrl)\n{\nList p = Ptrl;\nint j = 0;\nwhile(p)\n{\np = p-&gt;Next;\nj ++;\n}\nreturn j;\n}\n</code></pre> \u67e5\u627e <pre><code>/*\uff081\uff09\u6309\u5e8f\u53f7\u67e5\u627e*/\nList FindKth(int K, List Ptrl)\n{\nList p = Ptrl;\nwhile(p != NULL &amp;&amp; i &lt; k)\n{\np = p-&gt;Next;\ni++;\n}\nif(i == K)\nreturn p;\nelse\nreturn NULL;\n}\n/*\uff082\uff09\u6309\u503c\u67e5\u627e*/\nList Find(ElementType X, List Ptrl)\n{\nList p = Ptrl;\nwhile(p != NULL &amp;&amp; p-&gt;Data != X)\n{\np = p-&gt;Next;\n}\nreturn p;\n}\n</code></pre> \u5728\u7b2c i-1 (1 &lt;= i &lt;= n+1) \u4e2a\u8282\u70b9\u540e\u63d2\u5165\u4e00\u4e2a\u503c\u4e3a X \u7684\u65b0\u8282\u70b9 <pre><code>List Insert(ElementType X, List Ptrl)\n{\nList p, s;\nif(i == 1)\n{\ns = (List)malloc(sizeof(struct LNode));\ns-&gt;Data = X;\ns-&gt;Next = Ptrl;\nreturn s;\n}\np = Findkth(i-1, Ptrl);\nif(p == NULL)\n{\nprintf(\"\u53c2\u6570i\u9519\u8bef\");\nreturn NULL;\n}\nelse\n{\ns = (List)malloc(sizeof(struct LNode));\ns-&gt;Data = X;\ns-&gt;Next = p-&gt;Next;\np-&gt;Next = s;\nreturn Ptrl;\n}\n}\n</code></pre> \u5220\u9664\u7b2ci\u4e2a\u8282\u70b9\uff081 &lt;= i &lt;= n\uff09 <pre><code>List Delete(int i, List Ptrl)\n{\nList p, s;\nif(i == 1)\n{\ns = Ptrl;\nif( Ptrl != NULL)\nPtrl = Ptrl-&gt;Next;\nelse\nreturn NULL;\nfree(s);\nreturn Ptrl;\n}\np = FindKth(i-1, Ptrl);\nif( p == NULL)\n{\nprintf(\"\u7b2c%d\u4e2a\u8282\u70b9\u4e0d\u5b58\u5728\"\uff0ci-1);\nreturn NULL;\n}\nelse if(p-&gt;Next == NULL)\n{\nprintf(\"\u7b2c%d\u4e2a\u8282\u70b9\u4e0d\u5b58\u5728\"\uff0ci);\nreturn NULL;\n}\nelse\n{\ns = p-&gt;Next;\np-&gt;Next = s-&gt;Next;\nfree(s);\nreturn Ptrl;\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_6","title":"\u5e7f\u4e49\u8868","text":"<ul> <li>\u5e7f\u4e49\u8868\u662f\u7ebf\u6027\u8868\u7684\u63a8\u5e7f</li> <li>\u5bf9\u4e8e\u7ebf\u6027\u8868\u6765\u8bf4\uff0cn \u4e2a\u5143\u7d20\u90fd\u662f\u57fa\u672c\u7684\u5355\u5143\u7d20</li> <li>\u5e7f\u4e49\u8868\u4e2d\uff0c\u8fd9\u4e9b\u5143\u7d20\u4e0d\u4ec5\u53ef\u4ee5\u662f\u5355\u5143\u7d20\u8fd8\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u5e7f\u4e49\u8868</li> </ul> \u5e7f\u4e49\u8868\u7ed3\u6784 <pre><code>typedef struct GNode *Glist;\nstruct GNode{\nint Tag;    /* \u6807\u5fd7\u57df\uff0c0\u8868\u793a\u8282\u70b9\u662f\u5355\u5143\u7d20\uff0c1\u8868\u793a\u662f\u5e7f\u4e49\u8868*/\nunion{      /* \u5b50\u8868\u6307\u9488\u57dfSublist\u4e0e\u5355\u5143\u7d20\u6570\u636e\u57dfData\u590d\u7528\uff0c\u5373\u5171\u7528\u5b58\u50a8\u7a7a\u95f4*/\nElementType Data;\nGList SubList;\n}URegion;\nGList Next; /* \u6307\u5411\u540e\u7ee7\u8282\u70b9 */\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_7","title":"\u591a\u91cd\u94fe\u8868","text":"<p>Note</p> <p>\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u53ef\u80fd\u540c\u65f6\u96b6\u5c5e\u4e8e\u591a\u4e2a\u94fe</p> <ul> <li>\u591a\u91cd\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6307\u9488\u57df\u4f1a\u6709\u591a\u4e2a\uff0c\u5982\u524d\u9762\u7684\u4f8b\u5b50\u5305\u542b\u4e86 Next \u548c Sublist \u4e24\u4e2a\u6307\u9488\u57df\uff1b</li> <li>\u4f46\u5305\u542b\u4e24\u4e2a\u6307\u9488\u57df\u7684\u94fe\u8868\u5e76\u4e0d\u4e00\u5b9a\u662f\u591a\u91cd\u94fe\u8868\uff0c\u6bd4\u5982\u53cc\u5411\u94fe\u8868</li> </ul> <p>Note</p> <ul> <li>\u7528\u4e00\u4e2a\u6807\u8bc6\u57df Tag \u6765\u533a\u5206\u5934\u8282\u70b9\u548c\u975e 0 \u5143\u7d20\u8282\u70b9:</li> <li>\u5934\u8282\u70b9\u7684\u6807\u8bc6\u503c\u4e3a \u201cHead\u201d \uff0c\u77e9\u9635\u975e 0 \u5143\u7d20\u8282\u70b9\u7684\u6807\u8bc6\u503c\u4e3a \u201cTerm\u201d </li> </ul> <p></p> \u7ebf\u6027\u8868\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u987a\u5e8f\u8868 <pre><code>typedef int Position;\ntypedef struct LNode *List;\nstruct LNode {\nElementType Data[MAXSIZE];\nPosition Last;\n};\n/* \u521d\u59cb\u5316 */\nList MakeEmpty()\n{\nList L;\nL = (List)malloc(sizeof(struct LNode));\nL-&gt;Last = -1;\nreturn L;\n}\n/* \u67e5\u627e */\n#define ERROR -1\nPosition Find( List L, ElementType X )\n{\nPosition i = 0;\nwhile( i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i]!= X )\ni++;\nif ( i &gt; L-&gt;Last )  return ERROR; /* \u5982\u679c\u6ca1\u627e\u5230\uff0c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f */\nelse  return i;  /* \u627e\u5230\u540e\u8fd4\u56de\u7684\u662f\u5b58\u50a8\u4f4d\u7f6e */\n}\n/* \u63d2\u5165 */\n/*\u6ce8\u610f:\u5728\u63d2\u5165\u4f4d\u7f6e\u53c2\u6570P\u4e0a\u4e0e\u8bfe\u7a0b\u89c6\u9891\u6709\u6240\u4e0d\u540c\uff0c\u8bfe\u7a0b\u89c6\u9891\u4e2di\u662f\u5e8f\u5217\u4f4d\u5e8f\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u8fd9\u91ccP\u662f\u5b58\u50a8\u4e0b\u6807\u4f4d\u7f6e\uff08\u4ece0\u5f00\u59cb\uff09\uff0c\u4e24\u8005\u5dee1*/\nbool Insert( List L, ElementType X, Position P ) { /* \u5728L\u7684\u6307\u5b9a\u4f4d\u7f6eP\u524d\u63d2\u5165\u4e00\u4e2a\u65b0\u5143\u7d20X */\nPosition i;\nif ( L-&gt;Last == MAXSIZE-1) {\n/* \u8868\u7a7a\u95f4\u5df2\u6ee1\uff0c\u4e0d\u80fd\u63d2\u5165 */\nprintf(\"\u8868\u6ee1\"); return false; }  if ( P&lt;0 || P&gt;L-&gt;Last+1 ) { /* \u68c0\u67e5\u63d2\u5165\u4f4d\u7f6e\u7684\u5408\u6cd5\u6027 */\nprintf(\"\u4f4d\u7f6e\u4e0d\u5408\u6cd5\");\nreturn false; } for( i=L-&gt;Last; i&gt;=P; i-- )\nL-&gt;Data[i+1] = L-&gt;Data[i]; /* \u5c06\u4f4d\u7f6eP\u53ca\u4ee5\u540e\u7684\u5143\u7d20\u987a\u5e8f\u5411\u540e\u79fb\u52a8 */\nL-&gt;Data[P] = X;  /* \u65b0\u5143\u7d20\u63d2\u5165 */\nL-&gt;Last++;       /* Last\u4ecd\u6307\u5411\u6700\u540e\u5143\u7d20 */\nreturn true; } /* \u5220\u9664 */\n/*\u6ce8\u610f:\u5728\u5220\u9664\u4f4d\u7f6e\u53c2\u6570P\u4e0a\u4e0e\u8bfe\u7a0b\u89c6\u9891\u6709\u6240\u4e0d\u540c\uff0c\u8bfe\u7a0b\u89c6\u9891\u4e2di\u662f\u5e8f\u5217\u4f4d\u5e8f\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u8fd9\u91ccP\u662f\u5b58\u50a8\u4e0b\u6807\u4f4d\u7f6e\uff08\u4ece0\u5f00\u59cb\uff09\uff0c\u4e24\u8005\u5dee1*/\nbool Delete( List L, Position P )\n{ /* \u4eceL\u4e2d\u5220\u9664\u6307\u5b9a\u4f4d\u7f6eP\u7684\u5143\u7d20 */\nPosition i;\nif( P&lt;0 || P&gt;L-&gt;Last ) { /* \u68c0\u67e5\u7a7a\u8868\u53ca\u5220\u9664\u4f4d\u7f6e\u7684\u5408\u6cd5\u6027 */\nprintf(\"\u4f4d\u7f6e%d\u4e0d\u5b58\u5728\u5143\u7d20\", P ); return false; }\nfor( i=P+1; i&lt;=L-&gt;Last; i++ )\nL-&gt;Data[i-1] = L-&gt;Data[i]; /* \u5c06\u4f4d\u7f6eP+1\u53ca\u4ee5\u540e\u7684\u5143\u7d20\u987a\u5e8f\u5411\u524d\u79fb\u52a8 */\nL-&gt;Last--; /* Last\u4ecd\u6307\u5411\u6700\u540e\u5143\u7d20 */\nreturn true;   }\n</code></pre> \u7ebf\u6027\u8868\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u94fe\u5f0f\u8868 <pre><code>typedef struct LNode *PtrToLNode;\nstruct LNode {\nElementType Data;\nPtrToLNode Next;\n};\ntypedef PtrToLNode Position;\ntypedef PtrToLNode List;\n/* \u67e5\u627e */\n#define ERROR NULL\nPosition Find( List L, ElementType X )\n{\nPosition p = L; /* p\u6307\u5411L\u7684\u7b2c1\u4e2a\u8282\u70b9 */\nwhile ( p &amp;&amp; p-&gt;Data!=X )\np = p-&gt;Next;\n/* \u4e0b\u5217\u8bed\u53e5\u53ef\u4ee5\u7528 return p; \u66ff\u6362 */\nif ( p )\nreturn p;\nelse\nreturn ERROR;\n}\n/* \u5e26\u5934\u8282\u70b9\u7684\u63d2\u5165 */\n/*\u6ce8\u610f:\u5728\u63d2\u5165\u4f4d\u7f6e\u53c2\u6570P\u4e0a\u4e0e\u8bfe\u7a0b\u89c6\u9891\u6709\u6240\u4e0d\u540c\uff0c\u8bfe\u7a0b\u89c6\u9891\u4e2di\u662f\u5e8f\u5217\u4f4d\u5e8f\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u8fd9\u91ccP\u662f\u94fe\u8868\u8282\u70b9\u6307\u9488\uff0c\u5728P\u4e4b\u524d\u63d2\u5165\u65b0\u8282\u70b9 */\nbool Insert( List L, ElementType X, Position P )\n{ /* \u8fd9\u91cc\u9ed8\u8ba4L\u6709\u5934\u8282\u70b9 */\nPosition tmp, pre;\n/* \u67e5\u627eP\u7684\u524d\u4e00\u4e2a\u8282\u70b9 */        for ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            if ( pre==NULL ) { /* P\u6240\u6307\u7684\u8282\u70b9\u4e0d\u5728L\u4e2d */\nprintf(\"\u63d2\u5165\u4f4d\u7f6e\u53c2\u6570\u9519\u8bef\\n\");\nreturn false;\n}\nelse { /* \u627e\u5230\u4e86P\u7684\u524d\u4e00\u4e2a\u8282\u70b9pre */\n/* \u5728P\u524d\u63d2\u5165\u65b0\u8282\u70b9 */\ntmp = (Position)malloc(sizeof(struct LNode)); /* \u7533\u8bf7\u3001\u586b\u88c5\u8282\u70b9 */\ntmp-&gt;Data = X; tmp-&gt;Next = P;\npre-&gt;Next = tmp;\nreturn true;\n}\n}\n/* \u5e26\u5934\u8282\u70b9\u7684\u5220\u9664 */\n/*\u6ce8\u610f:\u5728\u5220\u9664\u4f4d\u7f6e\u53c2\u6570P\u4e0a\u4e0e\u8bfe\u7a0b\u89c6\u9891\u6709\u6240\u4e0d\u540c\uff0c\u8bfe\u7a0b\u89c6\u9891\u4e2di\u662f\u5e8f\u5217\u4f4d\u5e8f\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u8fd9\u91ccP\u662f\u62df\u5220\u9664\u8282\u70b9\u6307\u9488 */\nbool Delete( List L, Position P )\n{ /* \u8fd9\u91cc\u9ed8\u8ba4L\u6709\u5934\u8282\u70b9 */\nPosition pre;\n/* \u67e5\u627eP\u7684\u524d\u4e00\u4e2a\u8282\u70b9 */        for ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;            if ( pre==NULL || P==NULL) { /* P\u6240\u6307\u7684\u8282\u70b9\u4e0d\u5728L\u4e2d */\nprintf(\"\u5220\u9664\u4f4d\u7f6e\u53c2\u6570\u9519\u8bef\\n\");\nreturn false;\n}\nelse { /* \u627e\u5230\u4e86P\u7684\u524d\u4e00\u4e2a\u8282\u70b9pre */\n/* \u5c06P\u4f4d\u7f6e\u7684\u8282\u70b9\u5220\u9664 */\npre-&gt;Next = P-&gt;Next;\nfree(P);\nreturn true;\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#stacks","title":"\u6808 | Stacks","text":""},{"location":"Course/FDS/Lec02/#_8","title":"\u5806\u6808\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u63cf\u8ff0","text":"<ul> <li>\u7c7b\u578b\u540d\u79f0 : \u5806\u6808 (Stack)</li> <li>\u6570\u636e\u5bf9\u8c61\u96c6 : \u4e00\u4e2a\u6709 0 \u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u7684\u6709\u7a77\u7ebf\u6027\u8868</li> <li>\u64cd\u4f5c\u96c6 : \u957f\u5ea6\u4e3a MaxSize \u7684\u5806\u6808 S \\(\\in\\) Stack \uff0c\u5806\u6808\u5143\u7d20 item \\(\\in\\) ElementType</li> </ul> <p>Note</p> <ol> <li>Stack CreateStack( int MaxSize ): \u751f\u6210\u7a7a\u5806\u6808\uff0c\u5176\u6700\u5927\u957f\u5ea6\u4e3a MaxSize</li> <li>int IsFull( Stack S, int MaxSize ): \u5224\u65ad\u5806\u6808 S \u662f\u5426\u5df2\u6ee1</li> <li>void Push( Stack S, ElementType item ): \u5c06\u5143\u7d20 item \u538b\u5165\u5806\u6808</li> <li>int IsEmpty( Stack S ): \u5224\u65ad\u5806\u6808 S \u662f\u5426\u4e3a\u7a7a</li> <li>ElementType Pop( Stack S ): \u5220\u9664\u5e76\u8fd4\u56de\u6808\u9876\u5143\u7d20</li> </ol>"},{"location":"Course/FDS/Lec02/#_9","title":"\u6808\u7684\u987a\u5e8f\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u6808\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u901a\u5e38\u7531\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u8bb0\u5f55\u6808\u9876\u5143\u7d20\u4f4d\u7f6e\u7684\u53d8\u91cf\u7ec4\u6210</li> </ul> \u5806\u6808\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u987a\u5e8f\u5b58\u50a8 <pre><code>typedef int Position;\nstruct SNode {\nElementType *Data; /* \u5b58\u50a8\u5143\u7d20\u7684\u6570\u7ec4 */\nPosition Top;      /* \u6808\u9876\u6307\u9488 */\nint MaxSize;       /* \u5806\u6808\u6700\u5927\u5bb9\u91cf */\n};\ntypedef struct SNode *Stack;\nStack CreateStack( int MaxSize )\n{\nStack S = (Stack)malloc(sizeof(struct SNode));\nS-&gt;Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));\nS-&gt;Top = -1;\nS-&gt;MaxSize = MaxSize;\nreturn S;\n}\nbool IsFull( Stack S )\n{\nreturn (S-&gt;Top == S-&gt;MaxSize-1);\n}\nbool Push( Stack S, ElementType X )\n{\nif ( IsFull(S) ) {\nprintf(\"\u5806\u6808\u6ee1\");\nreturn false;\n}\nelse {\nS-&gt;Data[++(S-&gt;Top)] = X;\nreturn true;\n}\n}\nbool IsEmpty( Stack S )\n{\nreturn (S-&gt;Top == -1);\n}\nElementType Pop( Stack S )\n{\nif ( IsEmpty(S) ) {\nprintf(\"\u5806\u6808\u7a7a\");\nreturn ERROR; /* ERROR\u662fElementType\u7684\u7279\u6b8a\u503c\uff0c\u6807\u5fd7\u9519\u8bef */\n}\nelse return ( S-&gt;Data[(S-&gt;Top)--] );\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_10","title":"\u5806\u6808\u7684\u94fe\u5f0f\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u6808\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u53eb\u505a\u94fe\u6808\u3002\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u53ea\u80fd\u5728\u94fe\u6808\u7684\u6808\u9876\u8fdb\u884c</li> </ul> <p>\u7528\u94fe\u8868\u7684\u5934\u505a\u6808\u7684 Top \uff0c\u5355\u5411\u94fe\u8868\u7684\u94fe\u5c3e\u4e0d\u53ef\u505a Top</p> \u5806\u6808\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u94fe\u5f0f\u5b58\u50a8 <pre><code>typedef struct SNode *PtrToSNode;\nstruct SNode {\nElementType Data;\nPtrToSNode Next;\n};\ntypedef PtrToSNode Stack;\nStack CreateStack( ) { /* \u6784\u5efa\u4e00\u4e2a\u5806\u6808\u7684\u5934\u8282\u70b9\uff0c\u8fd4\u56de\u8be5\u8282\u70b9\u6307\u9488 */\nStack S;\nS = (Stack)malloc(sizeof(struct SNode));\nS-&gt;Next = NULL;\nreturn S;\n}\nbool IsEmpty ( Stack S )\n{ /* \u5224\u65ad\u5806\u6808S\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u662f\u8fd4\u56detrue\uff1b\u5426\u5219\u8fd4\u56defalse */\nreturn ( S-&gt;Next == NULL );\n}\nbool Push( Stack S, ElementType X )\n{ /* \u5c06\u5143\u7d20X\u538b\u5165\u5806\u6808S */\nPtrToSNode TmpCell;\nTmpCell = (PtrToSNode)malloc(sizeof(struct SNode));\nTmpCell-&gt;Data = X;\nTmpCell-&gt;Next = S-&gt;Next;\nS-&gt;Next = TmpCell;\nreturn true;\n}\nElementType Pop( Stack S )  { /* \u5220\u9664\u5e76\u8fd4\u56de\u5806\u6808S\u7684\u6808\u9876\u5143\u7d20 */\nPtrToSNode FirstCell;\nElementType TopElem;\nif( IsEmpty(S) ) {\nprintf(\"\u5806\u6808\u7a7a\"); return ERROR;\n}\nelse {\nFirstCell = S-&gt;Next; TopElem = FirstCell-&gt;Data;\nS-&gt;Next = FirstCell-&gt;Next;\nfree(FirstCell);\nreturn TopElem;\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_11","title":"\u5806\u6808\u5e94\u7528\uff1a\u8868\u8fbe\u5f0f\u6c42\u503c","text":""},{"location":"Course/FDS/Lec02/#_12","title":"\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c","text":"<p>\u57fa\u672c\u7b56\u7565 \uff1a \u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f (\u540e\u7f00\u8868\u8fbe\u5f0f) \uff0c\u7136\u540e\u6c42\u503c</p>"},{"location":"Course/FDS/Lec02/#_13","title":"\u4e2d\u7f00\u8868\u8fbe\u5f0f\u5982\u4f55\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f","text":"<p>\u4ece\u5934\u5230\u5c3e\u8bfb\u53d6\u4e2d\u7f00\u8868\u8fbe\u5f0f\u7684\u6bcf\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u4e0d\u540c\u5bf9\u8c61\u6309\u4e0d\u540c\u60c5\u51b5\u5904\u7406</p> <ol> <li>\u8fd0\u7b97\u6570\uff1a\u76f4\u63a5\u8f93\u51fa</li> <li>\u5de6\u62ec\u53f7\uff1a\u538b\u5165\u5806\u6808</li> <li>\u53f3\u62ec\u53f7\uff1a\u5c06\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u5f39\u51fa\u5e76\u8f93\u51fa\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\uff08\u51fa\u6808\uff0c\u4e0d\u8f93\u51fa\uff09\uff1b</li> <li>\u8fd0\u7b97\u7b26<ol> <li>\u82e5\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u5219\u628a\u5b83\u5165\u6808</li> <li>\u82e5\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u5219\u5c06\u6808\u9876\u8fd0\u7b97\u7b26\u5f39\u51fa\u5e76\u8f93\u51fa\uff1b\u518d\u6bd4\u8f83\u65b0\u7684\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u76f4\u5230\u8be5\u8fd0\u7b97\u7b26\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u4e3a\u6b62\uff0c\u7136\u540e\u5c06\u8be5\u8fd0\u7b97\u7b26\u5165\u6808</li> </ol> </li> <li>\u82e5\u5404\u5bf9\u8c61\u5904\u7406\u5b8c\u6bd5\uff0c\u5219\u5c06\u5806\u6808\u4e2d\u5b58\u7559\u7684\u8fd0\u7b97\u7b26\u4e00\u5e76\u8f93\u51fa</li> </ol>"},{"location":"Course/FDS/Lec02/#queues","title":"\u961f\u5217 | Queues","text":"<p>Abstract</p> <p>\u961f\u5217\uff1a\u5177\u6709\u4e00\u5b9a\u64cd\u4f5c\u7ea6\u675f\u7684\u7ebf\u6027\u8868 (\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff1a\u53ea\u80fd\u5728\u4e00\u6bb5\u63d2\u5165\uff0c\u800c\u5728\u53e6\u4e00\u7aef\u5220\u9664) 1. \u6570\u636e\u63d2\u5165\uff1a\u5165\u961f\u5217 2. \u6570\u636e\u5220\u9664\uff1a\u51fa\u961f\u5217 3. \u5148\u6765\u5148\u670d\u52a1 4. \u5148\u8fdb\u5148\u51fa</p>"},{"location":"Course/FDS/Lec02/#_14","title":"\u961f\u5217\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u63cf\u8ff0","text":"<ul> <li>\u7c7b\u578b\u540d\u79f0 : \u961f\u5217 (Queue)</li> <li>\u6570\u636e\u5bf9\u8c61\u96c6 : \u4e00\u4e2a\u6709 0 \u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u7684\u6709\u7a77\u7ebf\u6027\u8868</li> <li>\u64cd\u4f5c\u96c6 : \u957f\u5ea6\u4e3a MaxSize \u7684\u961f\u5217 Q \\(\\in\\) Queue \uff0c\u961f\u5217\u5143\u7d20 item \\(\\in\\) ElementType</li> </ul> <p>Note</p> <ol> <li>Queue CreateQueue( int MaxSize ): \u751f\u6210\u957f\u5ea6\u4e3a MaxSize \u7684\u7a7a\u961f\u5217</li> <li>int IsFullQ( Queue Q, int MaxSize ): \u5224\u65ad\u961f\u5217 Q \u662f\u5426\u5df2\u6ee1</li> <li>void AddQ( Queue Q, ElementType item ): \u5c06\u6570\u636e\u5143\u7d20 item \u63d2\u5165\u961f\u5217Q \u4e2d</li> <li>int IsEmptyQ( Queue Q ): \u5224\u65ad\u961f\u5217 Q \u662f\u5426\u4e3a\u7a7a</li> <li>ElementType DeleteQ( Queue Q ): \u5c06\u961f\u5934\u6570\u636e\u5143\u7d20\u4ece\u961f\u5217\u4e2d\u5220\u9664\u5e76\u8fd4\u56de</li> </ol>"},{"location":"Course/FDS/Lec02/#_15","title":"\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u5b9e\u73b0","text":"<ul> <li>\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u901a\u5e38\u7528\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u8bb0\u5f55\u961f\u5217\u5934\u5143\u7d20\u4f4d\u7f6e\u7684\u53d8\u91cf front \u4ee5\u53ca\u4e00\u4e2a\u8bb0\u5f55\u961f\u5217\u5c3e\u5143\u7d20\u4f4d\u7f6e\u7684\u53d8\u91cf rear \u7ec4\u6210</li> </ul>"},{"location":"Course/FDS/Lec02/#_16","title":"\u4e00\u7ef4\u6570\u7ec4\u961f\u5217","text":""},{"location":"Course/FDS/Lec02/#_17","title":"\u987a\u73af\u961f\u5217","text":"<p> \u5224\u65ad\u987a\u73af\u961f\u5217\u7a7a\u548c\u6ee1\u53ef\u4ee5\u7528\u4e24\u79cd\u89e3\u51b3\u65b9\u6848 1. \u4f7f\u7528\u989d\u5916\u6807\u8bb0\uff1aSize \u6216\u8005 Tag \u57df 2. \u4ec5\u4f7f\u7528 n-1 \u4e2a\u6570\u7ec4\u7a7a\u95f4 (Front == Rear\u65f6\u4e3a\u7a7a)</p> \u961f\u5217\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u987a\u5e8f\u5b58\u50a8 <pre><code>typedef int Position;\nstruct QNode {\nElementType *Data;     /* \u5b58\u50a8\u5143\u7d20\u7684\u6570\u7ec4 */\nPosition Front, Rear;  /* \u961f\u5217\u7684\u5934\u3001\u5c3e\u6307\u9488 */\nint MaxSize;           /* \u961f\u5217\u6700\u5927\u5bb9\u91cf */\n};\ntypedef struct QNode *Queue;\nQueue CreateQueue( int MaxSize )\n{\nQueue Q = (Queue)malloc(sizeof(struct QNode));\nQ-&gt;Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));\nQ-&gt;Front = 0;\nQ-&gt;Rear = -1;\nQ-&gt;MaxSize = MaxSize;\nreturn Q;\n}\nbool IsFull( Queue Q )\n{\nreturn ((Q-&gt;Rear+1) % Q-&gt;MaxSize == Q-&gt;Front);\n}\nbool AddQ( Queue Q, ElementType X )\n{\nif ( IsFull(Q) ) {\nprintf(\"\u961f\u5217\u6ee1\");\nreturn false;\n}\nelse {\nQ-&gt;Rear = (Q-&gt;Rear+1) % Q-&gt;MaxSize;\nQ-&gt;Data[Q-&gt;Rear] = X;\nreturn true;\n}\n}\nbool IsEmpty( Queue Q )\n{\nreturn (Q-&gt;Front == Q-&gt;Rear);\n}\nElementType DeleteQ( Queue Q )\n{\nif ( IsEmpty(Q) ) { printf(\"\u961f\u5217\u7a7a\");\nreturn ERROR;\n}\nelse  {\nQ-&gt;Front =(Q-&gt;Front+1) % Q-&gt;MaxSize;\nreturn  Q-&gt;Data[Q-&gt;Front];\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec02/#_18","title":"\u961f\u5217\u7684\u94fe\u8868\u5b58\u50a8\u5b9e\u73b0","text":"\u961f\u5217\u7684\u5b9a\u4e49\u4e0e\u64cd\u4f5c-\u94fe\u5f0f\u5b58\u50a8 <pre><code>typedef struct Node *PtrToNode;\nstruct Node { /* \u961f\u5217\u4e2d\u7684\u8282\u70b9 */\nElementType Data;\nPtrToNode Next;\n};\ntypedef PtrToNode Position;\nstruct QNode {\nPosition Front, Rear;  /* \u961f\u5217\u7684\u5934\u3001\u5c3e\u6307\u9488 */\nint MaxSize;           /* \u961f\u5217\u6700\u5927\u5bb9\u91cf */\n};\ntypedef struct QNode *Queue;\nbool IsEmpty( Queue Q )\n{\nreturn ( Q-&gt;Front == NULL);\n}\nElementType DeleteQ( Queue Q )\n{\nPosition FrontCell; ElementType FrontElem;\nif  ( IsEmpty(Q) ) {\nprintf(\"\u961f\u5217\u7a7a\");\nreturn ERROR;\n}\nelse {\nFrontCell = Q-&gt;Front;\nif ( Q-&gt;Front == Q-&gt;Rear ) /* \u82e5\u961f\u5217\u53ea\u6709\u4e00\u4e2a\u5143\u7d20 */\nQ-&gt;Front = Q-&gt;Rear = NULL; /* \u5220\u9664\u540e\u961f\u5217\u7f6e\u4e3a\u7a7a */\nelse                     Q-&gt;Front = Q-&gt;Front-&gt;Next;\nFrontElem = FrontCell-&gt;Data;\nfree( FrontCell );  /* \u91ca\u653e\u88ab\u5220\u9664\u8282\u70b9\u7a7a\u95f4  */\nreturn  FrontElem;\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/","title":"\u6811 | Tree","text":""},{"location":"Course/FDS/Lec03/#_1","title":"\u6811\u7684\u5b9a\u4e49","text":"<ul> <li>\u6811\uff1an(n \\(\\ge\\) 20)\u4e2a\u8282\u70b9\u6784\u6210\u7684\u6709\u9650\u96c6\u5408\uff1b</li> <li>\u5f53n = 0\u65f6\uff0c\u79f0\u4e3a\u7a7a\u6811\uff1b</li> <li>\u5bf9\u4e8e\u4efb\u4e00\u68f5\u975e\u7a7a\u6811 (n \\(&gt;\\) 0) \uff0c\u5b83\u5177\u5907\u4ee5\u4e0b\u6027\u8d28\uff1a</li> <li>\u6811\u4e2d\u6709\u4e00\u4e2a\u79f0\u4e3a\u201c\u6839\u201d\u7684\u7279\u6b8a\u8282\u70b9\uff0c\u7528r\u8868\u793a\uff1b</li> <li>\u5176\u4f59\u8282\u70b9\u53ef\u5206\u4e3a m(m \\(&gt;\\) 0) \u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u6709\u9650\u96c6 T1 , T2 , \u00b7\u00b7\u00b7, Tm , \u5176\u4e2d\u6bcf\u4e2a\u96c6\u5408\u672c\u8eab\u53c8\u662f\u4e00\u68f5\u6811\uff0c\u79f0\u4e3a\u539f\u6765\u6811\u7684\u201c\u5b50\u6811\u201d</li> </ul>"},{"location":"Course/FDS/Lec03/#_2","title":"\u4e00\u4e9b\u57fa\u672c\u672f\u8bed","text":"<ol> <li>\u8282\u70b9\u7684\u5ea6 (Degree) : \u8282\u70b9\u7684\u5b50\u6811\u4e2a\u6570</li> <li>\u6811\u7684\u5ea6: \u6811\u7684\u6240\u6709\u8282\u70b9\u4e2d\u6700\u5927\u7684\u5ea6\u6570</li> <li>\u53f6\u8282\u70b9 (Leaf) : \u5ea6\u4e3a 0 \u7684\u8282\u70b9</li> <li>\u7236\u8282\u70b9 (Parent) : \u6709\u5b50\u6811\u7684\u8282\u70b9\u662f\u5176\u5b50\u6811\u7684\u6839\u8282\u70b9\u7684\u7236\u8282\u70b9</li> <li>\u5b50\u8282\u70b9 (Child) : \u82e5 A \u8282\u70b9\u662f B \u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5219\u79f0 B \u8282\u70b9\u662f A \u8282\u70b9\u7684\u5b50\u8282\u70b9 (\u5b50\u8282\u70b9\u4e5f\u79f0\u5b69\u5b50\u8282\u70b9)</li> <li>\u5144\u5f1f\u8282\u70b9 (Sibiling) : \u5177\u6709\u540c\u4e00\u7236\u8282\u70b9\u7684\u5404\u8282\u70b9\u5f7c\u6b64\u662f\u5144\u5f1f\u8282\u70b9</li> <li>\u8def\u5f84\u548c\u8def\u5f84\u957f\u5ea6\uff1a\u4ece\u8282\u70b9 n1 \u5230 nk \u7684\u8def\u5f84\u4e3a\u4e00\u4e2a\u8282\u70b9\u5e8f\u5217 n1 , n2 ,\u00b7\u00b7\u00b7, nk , ni \u662f ni+1 \u7684\u7236\u8282\u70b9\u3002\u8def\u5f84\u6240\u5305\u542b\u8fb9\u7684\u4e2a\u6570\u4e3a\u8def\u5f84\u7684\u957f\u5ea6</li> <li>\u7956\u5148\u8282\u70b9 (Ancestor) : \u6cbf\u6811\u6839\u5230\u67d0\u4e00\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u3002</li> <li>\u5b50\u5b59\u8282\u70b9 (Descendant) : \u67d0\u4e00\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u5b59\u3002</li> <li>\u8282\u70b9\u7684\u5c42\u6b21 (Level) : \u89c4\u5b9a\u6839\u8282\u70b9\u5728 1 \u5c42\uff0c\u5176\u4ed6\u4efb\u4e00\u8282\u70b9\u7684\u5c42\u6570\u662f\u5176\u7236\u8282\u70b9\u7684\u5c42\u6570\u52a0 1</li> <li>\u6811\u7684\u6df1\u5ea6 (Depth) : \u6811\u4e2d\u6240\u6709\u8282\u70b9\u4e2d\u6700\u5927\u5c42\u6b21\u662f\u8fd9\u68f5\u6811\u7684\u6df1\u5ea6</li> </ol> Quote"},{"location":"Course/FDS/Lec03/#_3","title":"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":"<ul> <li>\u4e8c\u53c9\u6811 (binary tree) : \u901a\u5e38\u6307\u6709\u6839\u4e8c\u53c9\u6811\u3002\u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u6811\u3002\u901a\u5e38\u5c06\u5b50\u8282\u70b9\u786e\u5b9a\u4e00\u4e2a\u987a\u5e8f\uff0c\u79f0\u5de6\u5b50\u8282\u70b9\u548c\u53f3\u5b50\u8282\u70b9</li> <li>\u7279\u6b8a\u4e8c\u53c9\u6811<ol> <li>\u6ee1\u4e8c\u53c9\u6811 (full/proper binary tree) : \u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5747\u4e3a 0 \u6216 2 \u4e2a \\(leaves = nodes-\\frac{nodes-1}{2}\\) </li> <li>\u5b8c\u7f8e\u4e8c\u53c9\u6811(perfect binary tree): \u6240\u6709\u53f6\u8282\u70b9\u6df1\u5ea6\u5747\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u2014\u2014\u6df1\u5ea6\u4e3a k (k \\(\\ge\\) -1) \u4e14\u6709 2k+1 - 1 \u4e2a\u8282\u70b9</li> <li>\u5b8c\u5168\u4e8c\u53c9\u6811 (complete binary tree) : \u4ec5\u6700\u6df1\u4e24\u5c42\u8282\u70b9\u7684\u5ea6\u53ef\u4ee5\u5c0f\u4e8e2\uff0c\u4e14\u6700\u6df1\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u8fde\u7eed\u4f4d\u7f6e\u4e0a || \u6240\u6709\u8282\u70b9\u7684\u7f16\u53f7\u90fd\u4e0e\u6ee1\u4e8c\u53c9\u6811\u4e2d\u7684\u7f16\u53f7\u76f8\u540c\u7684\u4e8c\u53c9\u6811</li> <li>\u659c\u4e8c\u53c9\u6811 (skewed binary tree) : \u6ca1\u6709\u4efb\u4f55\u5de6/\u53f3\u8282\u70b9\u7684\u6811\uff0c\u79f0\u4e3a\u53f3/\u5de6\u659c\u4e8c\u53c9\u6811</li> </ol> </li> </ul>"},{"location":"Course/FDS/Lec03/#_4","title":"\u4e8c\u53c9\u6811\u7684\u51e0\u4e2a\u91cd\u8981\u6027\u8d28","text":"<ol> <li>\u4e00\u4e2a\u4e8c\u53c9\u6811\u7b2c i \u5c42\u7684\u6700\u5927\u8282\u70b9\u6570\u4e3a: 2i-1 , i \\(\\ge\\) 1</li> <li>\u6df1\u5ea6\u4e3a k \u7684\u4e8c\u53c9\u6811\u6709\u6700\u5927\u8282\u70b9\u603b\u6570\u4e3a: 2k - 1 , k \\(\\ge\\) 1</li> <li>\u5bf9\u4efb\u4f55\u975e\u7a7a\u4e8c\u53c9\u6811\uff0c\u82e5 n0 \u8868\u793a\u53f6\u8282\u70b9\u7684\u4e2a\u6570\u3001n2 \u662f\u5ea6\u4e3a2\u7684\u975e\u53f6\u8282\u70b9\u4e2a\u6570\uff0c\u90a3\u4e48\u4e24\u8005\u6ee1\u8db3\u5173\u7cfb n0 = n2 + 1 <p>\u8282\u70b9\u6570\u76ee = \u6240\u6709\u8282\u70b9\u7684\u5ea6\u6570\u548c + 1</p> </li> </ol>"},{"location":"Course/FDS/Lec03/#_5","title":"\u4e8c\u53c9\u6811\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<ul> <li>\u7c7b\u578b\u540d\u79f0 : \u4e8c\u53c9\u6811</li> <li> <p>\u6570\u636e\u5bf9\u8c61\u96c6 : \u4e00\u4e2a\u6709\u7a77\u7684\u8282\u70b9\u96c6\u5408\u3002\u82e5\u4e0d\u4e3a\u7a7a\uff0c\u5219\u7531\u6839\u8282\u70b9\u548c\u5176\u5de6\u3001\u53f3\u4e8c\u53c9\u5b50\u6811\u7ec4\u6210</p> </li> <li> <p>\u64cd\u4f5c\u96c6 : BT \\(\\in\\) BinTree\uff0cItem \\(\\in\\) ElementType, \u91cd\u8981\u64cd\u4f5c\u6709\uff1a</p> </li> </ul> <p>Note</p> <ol> <li>Bool IsEmpty( BinTree BT ): \u5224\u65ad BT \u662f\u5426\u4e3a\u7a7a</li> <li>void Traversal( BinTree BT ): \u904d\u5386\uff0c\u6309\u67d0\u987a\u5e8f\u8bbf\u95ee\u6bcf\u4e2a\u8282\u70b9</li> <li>BinTree CreateBinTree( ): \u521b\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811</li> </ol>"},{"location":"Course/FDS/Lec03/#_6","title":"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784","text":""},{"location":"Course/FDS/Lec03/#_7","title":"\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784","text":"<ol> <li>\u5b8c\u5168\u4e8c\u53c9\u6811: \u4ece\u4e0a\u5230\u4e0b\u3001\u4ece\u5de6\u81f3\u53f3\u987a\u5e8f\u5b58\u50a8n\u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u7236\u5b50\u5173\u7cfb\uff1b</li> </ol> <p>Example</p> <p>  \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9\u6570: \\(n_0 = \\frac{n+1}{2}\\)         1. \u5f53n\u4e3a\u5076\u6570\u65f6\uff0c\\(n_0 = \\frac{n}{2}\\)         2. \u5f53n\u4e3a\u5947\u6570\u65f6\uff0c\\(n_0 = \\frac{n+1}{2}\\)</p> <ul> <li>\u975e\u6839\u8282\u70b9 (\u5e8f\u53f7 i &gt; 1) \u7684\u7236\u8282\u70b9\u7684\u5e8f\u53f7\u662f \\(\\lfloor \\frac{i}{2} \\rfloor\\) (\u4e0d\u8d85\u8fc7 i/2 \u7684\u6700\u5927\u6574\u6570) <ul> <li>\u8282\u70b9 (\u5e8f\u53f7\u4e3a i ) \u7684\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u5e8f\u53f7\u662f 2i (2i \\(\\le\\) n\uff0c\u5426\u5219\u6ca1\u6709\u5de6\u5b69\u5b50) </li> <li>\u8282\u70b9 (\u5e8f\u53f7\u4e3a i ) \u7684\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u5e8f\u53f7\u662f 2i+1 (2i+1 \\(\\le\\) n\uff0c\u5426\u5219\u6ca1\u6709\u53f3\u5b69\u5b50)  2. \u4e00\u822c\u4e8c\u53c9\u6811: \u4e5f\u53ef\u4ee5\u91c7\u7528\u4e0a\u8ff0\u7ed3\u6784\uff0c\u4f46\u4f1a\u9020\u6210\u7a7a\u95f4\u6d6a\u8d39</li> </ul> </li> </ul> Example <p></p> <ul> <li>\u94fe\u8868\u5b58\u50a8(\u6bcf\u4e2a\u8282\u70b9\u7684\u7ed3\u6784\u53ef\u4ee5\u5982\u4e0b\u8868\u793a)</li> </ul> <p>Note</p> <pre><code>    typedef struct TreeNode *BinTree;\ntypedef BinTree Position;\nstruct TreeNode{\nElementType Data;\nBinTree Left;\nBinTree Right;\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#_8","title":"\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":""},{"location":"Course/FDS/Lec03/#preorder","title":"\u5148\u5e8f\u904d\u5386 | PreOrder","text":"<ul> <li>\u904d\u5386\u8fc7\u7a0b<ol> <li>\u8bbf\u95ee\u6839\u8282\u70b9</li> <li>\u5148\u5e8f\u904d\u5386\u5de6\u5b50\u6811</li> <li>\u5148\u5e8f\u904d\u5386\u53f3\u5b50\u6811</li> </ol> Example <p> print\u7684\u987a\u5e8f \\(\\Rightarrow\\) A B D F E C G H I</p> </li> </ul> \u9012\u5f52\u7b97\u6cd5 <pre><code>  void PreOrderTraversal( BinTree BT)\n{\nif( BT ){\nprintf(\"%d\", BT-&gt;Data);\nPreOrderTraversal(BT-&gt;Left);\nPreOrderTraversal(BT-&gt;Right);\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#inorder","title":"\u4e2d\u5e8f\u904d\u5386 | InOrder","text":"<ul> <li>\u904d\u5386\u8fc7\u7a0b<ol> <li>\u4e2d\u5e8f\u904d\u5386\u5176\u5de6\u5b50\u6811</li> <li>\u8bbf\u95ee\u6839\u8282\u70b9</li> <li>\u4e2d\u5e8f\u904d\u5386\u5176\u53f3\u5b50\u6811</li> </ol> Example <p> print\u7684\u987a\u5e8f \\(\\Rightarrow\\) D B E F A G H C I</p> </li> </ul> \u9012\u5f52\u7b97\u6cd5 <pre><code>  void InOrderTraversal( BInTree BT)\n{\nif( BT ){\nPreOrderTraversal(BT-&gt;Left);\nprintf(\"%d\", BT-&gt;Data);\nPreOrderTraversal(BT-&gt;Right);\n}\n}\n</code></pre> \u975e\u9012\u5f52\u7b97\u6cd5 <pre><code>  void InOrderTraversal(BinTree BT)\n{\nBinTree T = BT;\nStack S = CreatStack(MaxSize);    /*\u521b\u5efa\u5e76\u521d\u59cb\u5316\u5806\u6808S*/\nwhile(T || !IsEmpty(S))\n{\nwhile(T)                  /*\u4e00\u76f4\u5411\u5de6\u5e76\u5c06\u6cbf\u9014\u8282\u70b9\u538b\u5165\u5806\u6808*/\n{\nPush(S, T);\nT = T-&gt;Left;\n}\nif(!IsEmpty(S))\n{\nT = Pop(S);               /*\u8282\u70b9\u5f39\u51fa\u5806\u6808*/\nprintf(\"%5d\", T-&gt;Data);   /*\uff08\u8bbf\u95ee\uff09\u6253\u5370\u8282\u70b9*/\nT = T-&gt;Right;         /*\u8f6c\u5411\u53f3\u5b50\u6811*/\n}\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#postorder","title":"\u540e\u5e8f\u904d\u5386 | PostOrder","text":"<ul> <li>\u904d\u5386\u8fc7\u7a0b<ol> <li>\u540e\u5e8f\u904d\u5386\u5176\u5de6\u5b50\u6811</li> <li>\u540e\u5e8f\u904d\u5386\u5176\u53f3\u5b50\u6811</li> <li>\u8bbf\u95ee\u6839\u8282\u70b9</li> </ol> Example <p> print\u7684\u987a\u5e8f \\(\\Rightarrow\\) D E F B H G I C A</p> </li> </ul> \u9012\u5f52\u7b97\u6cd5 <pre><code>  void PostOrderTraversal( BInTree BT)\n{\nif( BT ){\nPreOrderTraversal(BT-&gt;Left);\nPreOrderTraversal(BT-&gt;Right);\nprintf(\"%d\", BT-&gt;Data);\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#levelorder","title":"\u5c42\u5e8f\u904d\u5386 | LevelOrder","text":"<ul> <li>\u5c42\u5e8f\u57fa\u672c\u8fc7\u7a0b:<ol> <li>\u6839\u8282\u70b9\u5165\u961f</li> <li>\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20</li> <li>\u8bbf\u95ee\u8be5\u5143\u7d20\u6240\u6307\u8282\u70b9</li> <li>\u82e5\u8be5\u5143\u7d20\u6240\u6307\u8282\u70b9\u7684\u5de6\u3001\u53f3\u5b69\u5b50\u8282\u70b9\u975e\u7a7a\uff0c\u5219\u5c06\u5176\u5de6\u3001\u53f3\u5b69\u5b50\u7684\u6307\u9488\u5165\u961f</li> </ol> </li> </ul> \u5c42\u5e8f\u904d\u5386\u7684\u961f\u5217\u5b9e\u73b0 <pre><code>void LevelOrderTraversal(BinTree BT)\n{\nQueue Q;\nBinTree T;\nif(!BT) return;             /*\u82e5\u662f\u7a7a\u6811\u5219\u76f4\u63a5\u8fd4\u56de*/\nQ = CreatQueue(MaxSize);    /*\u521b\u5efa\u5e76\u521d\u59cb\u5316\u961f\u5217Q*/\nAddQ(Q, BT);\nwhile(!IsEmptyQ(Q))\n{\nT = DeleteQ(Q);\nprintf(\"%d\\n\", T-&gt;Data);    /*\u8bbf\u95ee\u53d6\u51fa\u961f\u5217\u7684\u8282\u70b9*/\nif(T-&gt;Left)     AddQ(Q, T-&gt;Left);\nif(T-&gt;Right)\nAddQ(Q, T-&gt;Right);\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#_9","title":"\u5efa\u6811\u53ca\u540c\u6784\u5224\u522b","text":""},{"location":"Course/FDS/Lec03/#_10","title":"\u4e8c\u53c9\u6811\u8868\u793a","text":"<ul> <li>\u7ed3\u6784\u6570\u7ec4\u8868\u793a\u4e8c\u53c9\u6811: \u9759\u6001\u94fe\u8868</li> </ul> \u4e8c\u53c9\u6811\u8868\u793a<pre><code>    #define MaxTree 10\n#define ElementType char\n#define Tree int\n#define Null -1\nstruct TreeNode\n{\nElementType Element;\nTree Left;\nTree Right;\n}T1[MaxTree], T2[MaxTree];\n</code></pre>"},{"location":"Course/FDS/Lec03/#_11","title":"\u7a0b\u5e8f\u6846\u67b6\u642d\u5efa","text":"Pseudocode: main_function<pre><code>    int main()\n{\n\u5efa\u4e8c\u53c9\u68111;\n\u5efa\u4e8c\u53c9\u68112;\n\u5224\u65ad\u662f\u5426\u540c\u6784\u5e76\u8f93\u51fa;\nreturn 0;\n}\n</code></pre> code <p>main<pre><code>int main()\n{\nTree R1, R2;\nR1 = BuildTree(T1);\nR2 = BuildTree(T2);\nif(Isomorphic(R1, R2))\nprintf(\"Yes\\n\");\nelse\nprintf(\"No\\n\");\nreturn 0;\n}\n</code></pre> BuildTree<pre><code>Tree BulidTree(struct TreeNode T[])\n{\n\u00b7\u00b7\u00b7\nscanf(\"%d\\n\", &amp;N);\nif(N)\n{\nfor(i=0; i&lt;N; i++)\n{\nscanf(\"%c %c %c\\n\", &amp;T[i].Element, &amp;cl, &amp;cr);\nif(cl != '-')\n{\nT[i].Left = cl-'0';\ncheck[T[i].Left] = 1;\n}\nelse\n{\nT[i].Left = Null;\nT[i].Right = cr-'0';\ncheck[T[i].Right] = 1;\n}\nfor(i=0; i&lt;N; i++)\nif(!check[i]) break;\nRoot = i;\n}\n}\nreturn Root;\n}\n</code></pre> \u5224\u65ad\u540c\u6784<pre><code>int Isomorphic(Tree R1, Tree R2)\n{\nif((R1==Null) &amp;&amp; (R2==Null))\nreturn 1;\nif(((R1==Null) &amp;&amp; (R2!=Null)) || ((R1!=Null) &amp;&amp; (R2==Null)))\nreturn 0;\nif(T1[R1].Element != T2[R2].Element)\nreturn 0;\nif((T1[R1].Left == Null) &amp;&amp; (T2[R2].Left == Null))\nreturn Isomorphic(T1[R1].Right, T2[R2].Right);\nif(((T1[R1].Left != Null) &amp;&amp; (T2[R2].Left != Null))&amp;&amp;\n((T1[T1[R1].Left].Element) == (T2[T2[R2].Left].Element)))\nreturn (Isomorphic(T1[R1].Left,T2[R2].Left ) &amp;&amp;\nIsomorphic(T1[R1].Right,T2[R2].Right ));\nelse\nreturn (Isomorphic(T1[R1].Left,T2[R2].Right ) &amp;&amp;\nIsomorphic(T1[R1].Right,T2[R2].Left ));\n}\n</code></pre></p>"},{"location":"Course/FDS/Lec03/#binary-search-treebst","title":"\u4e8c\u53c9\u641c\u7d22\u6811 | Binary Search Tree(BST)","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e5f\u79f0\u4e8c\u53c9\u6392\u5e8f\u6811\u6216\u4e8c\u53c9\u67e5\u627e\u6811 (\u4e2d\u5e8f\u904d\u5386\u4e00\u5b9a\u6ee1\u8db3\u9012\u589e)</p> <ul> <li>\u4e00\u68f5\u4e8c\u53c9\u6811\u53ef\u4ee5\u4e3a\u7a7a\uff1b\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a<ol> <li>\u975e\u7a7a\u5de6\u5b50\u6811\u7684\u6240\u6709\u952e\u503c\u5c0f\u4e8e\u5176\u6839\u8282\u70b9\u7684\u952e\u503c</li> <li>\u975e\u7a7a\u53f3\u5b50\u6811\u7684\u6240\u6709\u952e\u503c\u5927\u4e8e\u5176\u6839\u8282\u70b9\u7684\u952e\u503c</li> <li>\u5de6\u3001\u53f3\u5b50\u6811\u90fd\u662f\u4e8c\u53c9\u641c\u7d22\u6811</li> </ol> </li> </ul>"},{"location":"Course/FDS/Lec03/#bst","title":"BST\u7684\u7279\u522b\u51fd\u6570","text":""},{"location":"Course/FDS/Lec03/#find","title":"Find()","text":"<p>\u4eceBST\u4e2d\u67e5\u627e\u5143\u7d20 X, \u8fd4\u56de\u5176\u6240\u5728\u8282\u70b9\u7684\u5730\u5740</p> <ol> <li>\u67e5\u627e\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5982\u679c\u6811\u4e3a\u7a7a\uff0c\u8fd4\u56de NULL</li> <li>\u82e5\u641c\u7d22\u6811\u975e\u7a7a\uff0c\u5219\u5c06\u6839\u8282\u70b9\u5173\u952e\u5b57\u548c X \u8fdb\u884c\u6bd4\u8f83\uff0c\u5e76\u8fdb\u884c\u4e0d\u540c\u5904\u7406:<ol> <li>\u82e5 X \u5c0f\u4e8e\u6839\u8282\u70b9\u952e\u503c\uff0c\u53ea\u9700\u5728\u5de6\u5b50\u6811\u4e2d\u7ee7\u7eed\u641c\u7d22</li> <li>\u82e5\u5927\u4e8e\uff0c\u5219\u5728\u53f3\u5b50\u6811\u4e2d\u7ee7\u7eed\u641c\u7d20</li> <li>\u82e5\u76f8\u7b49\uff0c\u641c\u7d22\u5b8c\u6210\uff0c\u8fd4\u56de\u6307\u5411\u6b64\u8282\u70b9\u7684\u6307\u9488</li> </ol> </li> </ol> code <p><pre><code>Position Find( ElementType X, BinTree BST )\n{\nif( !BST)   return NULL;\nif( X &gt; BST-&gt;Data )\nreturn Find( X, BST-&gt;Right );   /*\u5c3e\u9012\u5f52*/\nelse if( X &lt; BST-&gt;Data)\nreturn Find( X, BST-&gt;Left );    /*\u5c3e\u9012\u5f52*/\nelse\nreturn BST;\n}\n</code></pre> \u7531\u4e8e\u975e\u9012\u5f52\u51fd\u6570\u6267\u884c\u6548\u7387\u9ad8\uff0c\u53ef\u5c06\u201c\u5c3e\u9012\u5f52\u201d\u51fd\u6570\u6539\u4e3a\u8fed\u4ee3\u51fd\u6570 <pre><code>Position IterFind( ElementType X, BinTree BST)\n{\nwhile( BST )\n{\nif( X &gt; BST-&gt;Data )\nBST = BST-&gt;Right;\nelse if( X &lt; BST-&gt;Data )\nBST = BST-&gt;Left;\nelse\nreturn BST;\n}\nreturn NULL;\n}\n</code></pre></p>"},{"location":"Course/FDS/Lec03/#findmin","title":"FindMin()","text":"<ul> <li>\u4eceBST\u4e2d\u67e5\u627e\u5e76\u8fd4\u56de\u6700\u5c0f\u5143\u7d20\u6240\u5728\u8282\u70b9\u7684\u5730\u5740</li> <li>\u6700\u5c0f\u5143\u7d20\u4e00\u5b9a\u5728\u6811\u7684\u6700\u5de6\u5206\u652f\u7684\u7aef\u8282\u70b9\u4e0a</li> </ul> <pre><code>Position FindMin( BinTree BST)\n{\nif( !BST )\nreturn NULL;\nelse if( !BST-&gt;Left)\nreturn BST;\nelse\nreturn FindMin( BST-&gt;Left );\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#findmax","title":"FindMax()","text":"<ul> <li>\u4ece\u4e8c\u53c9\u641c\u7d22\u6811BST\u4e2d\u67e5\u627e\u5e76\u8fd4\u56de\u6700\u5927\u5143\u7d20\u6240\u5728\u8282\u70b9\u7684\u5730\u5740</li> <li>\u6700\u5927\u5143\u7d20\u4e00\u5b9a\u5728\u6811\u7684\u6700\u53f3\u5206\u652f\u7684\u7aef\u8282\u70b9\u4e0a</li> </ul> <pre><code>Position FindMax( BinTree BST)\n{\nif( !BST )\nreturn NULL;\nelse\nwhile( BST-&gt;Right )\nBST = BST-&gt;Right;\nreturn BST;\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#insert","title":"Insert()","text":"<ul> <li>\u63d2\u5165X(\u53ef\u4ee5\u91c7\u7528\u4e0eFind\u7c7b\u4f3c\u7684\u65b9\u6cd5)</li> </ul> <pre><code>BinTree Insert( ElementType X, BinTree BST)\n{\nif( !BST )\n{\nBST = malloc(sizeof(struct TreeNode));\nBST-&gt;Data = X;\nBST-&gt;Left = NULL;\nBST-&gt;Right = NULL;\n}\nelse\n{\nif( X &lt; BST-&gt;Data )\nBST-&gt;Left = Insert( X, BST-&gt;Left);\nelse if( X &gt; BST-&gt;Data)\nBST-&gt;Right = Insert( X, BST-&gt;Right);\n}\nreturn BST;\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#delete","title":"Delete()","text":"<ul> <li>\u8003\u8651\u4e09\u79cd\u60c5\u51b5<ol> <li>\u8981\u5220\u9664\u7684\u8282\u70b9\u662f\u53f6\u8282\u70b9\uff1a\u76f4\u63a5\u5220\u9664\uff0c\u5e76\u518d\u4fee\u6539\u5176\u7236\u8282\u70b9\u6307\u9488\u2014\u2014\u7f6e\u4e3aNULL</li> <li>\u8981\u5220\u9664\u7684\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u8282\u70b9\uff1a\u5c06\u5176\u7236\u8282\u70b9\u7684\u6307\u9488\u6307\u5411\u8981\u5220\u9664\u8282\u70b9\u7684\u5b69\u5b50\u8282\u70b9</li> <li>\u8981\u5220\u9664\u7684\u8282\u70b9\u6709\u5de6\u53f3\u4e24\u9897\u5b50\u6811\uff1a\u7528\u53e6\u4e00\u8282\u70b9\u66ff\u4ee3\u88ab\u5220\u9664\u8282\u70b9\u2014\u2014\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u5143\u7d20 \u6216\u8005 \u5de6\u5b50\u6811\u7684\u6700\u5927\u5143\u7d20</li> </ol> </li> </ul> <pre><code>BinTree Delete( BinTree BST, ElementType X ) { Position Tmp; if( !BST ) printf(\"\u8981\u5220\u9664\u7684\u5143\u7d20\u672a\u627e\u5230\"); else {\nif( X &lt; BST-&gt;Data ) BST-&gt;Left = Delete( BST-&gt;Left, X );   /* \u4ece\u5de6\u5b50\u6811\u9012\u5f52\u5220\u9664 */\nelse if( X &gt; BST-&gt;Data ) BST-&gt;Right = Delete( BST-&gt;Right, X ); /* \u4ece\u53f3\u5b50\u6811\u9012\u5f52\u5220\u9664 */\nelse { /* BST\u5c31\u662f\u8981\u5220\u9664\u7684\u7ed3\u70b9 */\n/* \u5982\u679c\u88ab\u5220\u9664\u7ed3\u70b9\u6709\u5de6\u53f3\u4e24\u4e2a\u5b50\u7ed3\u70b9 */ if( BST-&gt;Left &amp;&amp; BST-&gt;Right ) {\n/* \u4ece\u53f3\u5b50\u6811\u4e2d\u627e\u6700\u5c0f\u7684\u5143\u7d20\u586b\u5145\u5220\u9664\u7ed3\u70b9 */\nTmp = FindMin( BST-&gt;Right );\nBST-&gt;Data = Tmp-&gt;Data;\n/* \u4ece\u53f3\u5b50\u6811\u4e2d\u5220\u9664\u6700\u5c0f\u5143\u7d20 */\nBST-&gt;Right = Delete( BST-&gt;Right, BST-&gt;Data );\n}\nelse { /* \u88ab\u5220\u9664\u7ed3\u70b9\u6709\u4e00\u4e2a\u6216\u65e0\u5b50\u7ed3\u70b9 */\nTmp = BST; if( !BST-&gt;Left )       /* \u53ea\u6709\u53f3\u5b69\u5b50\u6216\u65e0\u5b50\u7ed3\u70b9 */\nBST = BST-&gt;Right; else                   /* \u53ea\u6709\u5de6\u5b69\u5b50 */\nBST = BST-&gt;Left;\nfree( Tmp );\n}\n}\n}\nreturn BST;\n}\n</code></pre> \u5f15\u7533 \u2014\u2014 n \u4e2a\u8282\u70b9\u7ec4\u6210\u591a\u5c11\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 <p>[\u5361\u7279\u5170\u6570] : \\(C_0 = 1, C_n = C_{n-1} \\times \\frac{4n-2}{n+1}\\)</p> Quote <p>CSDN - LeetCode96 n\u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u4e0d\u540c\u4e8c\u53c9\u641c\u7d22\u6811</p>"},{"location":"Course/FDS/Lec03/#threaded-binary-tree","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811 | Threaded binary tree","text":"<ul> <li>Rule 1: \u82e5\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5c06\u5176\u7a7a\u5de6\u513f\u5b50\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u524d\u9a71 (\u4e0a\u4e00\u4e2a\u904d\u5386\u7684\u8282\u70b9)</li> <li>Rule 2: \u7a7a\u53f3\u513f\u5b50\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u7684\u540e\u7ee7 (\u82e5\u524d\u9a71/\u540e\u7ee7\u5747\u65e0\uff0c\u5219\u5f15\u51fa\u4e3a NULL)</li> <li>Rule 3: \u7ebf\u7d22\u4e8c\u53c9\u6811\u5fc5\u987b\u6709\u4e00\u4e2a\u5934\u8282\u70b9\u4e14\u5176\u5de6\u513f\u5b50\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9</li> </ul> <p>\u5373\u5f53\u6ca1\u6709\u5de6 (\u6216\u53f3) \u513f\u5b50\u65f6, \u5176\u5de6 (\u6216\u53f3) \u513f\u5b50\u624d\u4f1a\u88ab\u6362\u6210 thread</p> <pre><code>typedef  struct  ThreadedTreeNode  *PtrTo  ThreadedNode;\ntypedef  struct  PtrToThreadedNode  ThreadedTree;\ntypedef  struct  ThreadedTreeNode {\nint     LeftThread;   /* if it is TRUE, then Left */\nThreadedTree  Left;      /* is a thread, not a child ptr. */ ElementType Element;\nint     RightThread; /* if it is TRUE, then Right */\nThreadedTree  Right;    /* is a thread, not a child ptr. */\n}\n</code></pre> <p>Quote</p> <p>CSDN-\u7ebf\u7d22\u4e8c\u53c9\u6811</p>"},{"location":"Course/FDS/Lec03/#priority-queues","title":"\u4f18\u5148\u961f\u5217 | Priority Queues","text":"<p>Abstract</p> <ul> <li>\u4f18\u5148\u961f\u5217 (priority queue) \u4e5f\u79f0\u4e3a\u5806 (heap)</li> <li>\u7279\u6b8a\u7684\u201d\u961f\u5217\u201d\uff0c\u53d6\u51fa\u5143\u7d20\u7684\u987a\u5e8f\u662f\u6309\u7167\u5143\u7d20\u7684\u4f18\u5148\u7ea7 (\u5173\u952e\u5b57) \u5927\u5c0f\uff0c\u800c\u4e0d\u662f\u5143\u7d20\u8fdb\u5165\u961f\u5217\u7684\u5148\u540e\u987a\u5e8f</li> </ul> \u5806\u7684\u4e00\u4e9b\u4f8b\u5b50 <p> \u56fe\u7247\u6458\u81ea MOOC</p>"},{"location":"Course/FDS/Lec03/#_12","title":"\u82e5\u91c7\u7528\u6570\u7ec4\u6216\u94fe\u8868\u5b9e\u73b0","text":"<ul> <li>\u6570\u7ec4: <ul> <li>\u63d2\u5165 \u2014\u2014 \u5143\u7d20\u603b\u662f\u63d2\u5165\u5c3e\u90e8          ~ \\(\\Theta (1)\\) </li> <li>\u5220\u9664 \u2014\u2014 <ul> <li>\u67e5\u627e\u6700\u5927 (\u6216\u6700\u5c0f) \u5173\u952e\u5b57      ~ \\(\\Theta (n)\\) </li> <li>\u4ece\u6570\u7ec4\u4e2d\u5220\u53bb\u9700\u8981\u79fb\u52a8\u7684\u5143\u7d20     ~ \\(O(n)\\) </li> </ul> </li> </ul> </li> <li>\u94fe\u8868:<ul> <li>\u63d2\u5165 \u2014\u2014 \u5143\u7d20\u603b\u662f\u63d2\u5165\u94fe\u8868\u5934\u90e8       ~ \\(\\Theta (1)\\) </li> <li>\u5220\u9664 \u2014\u2014<ul> <li>\u67e5\u627e\u6700\u5927 (\u6216\u6700\u5c0f) \u5173\u952e\u5b57       ~ \\(\\Theta (n)\\) </li> <li>\u5220\u53bb\u8282\u70b9                     ~ \\(\\Theta (1)\\) </li> </ul> </li> </ul> </li> <li>\u6709\u5e8f\u6570\u7ec4:<ul> <li>\u63d2\u5165 \u2014\u2014 <ul> <li>\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e                ~ \\(O(n)\\) \u6216 \\(O(log_2 n)\\) </li> <li>\u79fb\u52a8\u5143\u7d20\u5e76\u63d2\u5165                ~ \\(O(n)\\) </li> </ul> </li> <li>\u5220\u9664 \u2014\u2014 \u5220\u53bb\u6700\u540e\u4e00\u4e2a\u5143\u7d20           ~ \\(\\Theta (1)\\)</li> </ul> </li> <li>\u6709\u5e8f\u94fe\u8868: <ul> <li>\u63d2\u5165 \u2014\u2014 <ul> <li>\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e                ~ \\(O(n)\\) </li> <li>\u63d2\u5165\u5143\u7d20                      ~ \\(\\Theta (1)\\) </li> </ul> </li> <li>\u5220\u9664 \u2014\u2014 \u5220\u9664\u9996\u5143\u7d20\u6216\u6700\u540e\u5143\u7d20      ~ \\(\\Theta (1)\\) </li> </ul> </li> </ul>"},{"location":"Course/FDS/Lec03/#binary-heap","title":"\u4e8c\u53c9\u5806 | binary heap","text":"<ul> <li>\u4e8c\u53c9\u5806\u662f\u4e00\u79cd\u5b8c\u5168\u4e8c\u53c9\u6811 \u2014\u2014 \u4efb\u610f\u8282\u70b9\u7684\u503c\u90fd \\(\\le\\) (\u6216 \\(\\ge\\) ) \u7236\u8282\u70b9\u7684\u503c(\u5373\u6700\u5927\u6700\u5c0f\u5806)</li> </ul> <p>\u5f15\u7533</p> <ul> <li>D-heap | D-\u5806 \u662f\u6307\u6bcf\u4e2a\u8282\u70b9\u6709 d \u4e2a\u513f\u5b50<ul> <li>\u82e5D-\u5806\u4f7f\u7528\u6570\u7ec4\u5b58\u50a8\uff0c\u4e14\u4e00\u4e2a\u8282\u70b9\u7684\u4e0b\u6807\u4e3a i (\u6839\u7ed3\u70b9 i = 1)</li> <li>\u5176\u7236\u8282\u70b9\u7684\u4f4d\u7f6e\u662f \\(\\lfloor (i + d - 2)/d \\rfloor\\) (\u4e0d\u5927\u4e8e\u5176\u7684\u6700\u5927\u6574\u6570)</li> <li>\u5176\u7b2c\u4e00\u4e2a\u513f\u5b50\u4f4d\u4e8e \\((i - 1)d + 2\\) </li> <li>\u6700\u540e\u4e00\u4e2a\u513f\u5b50\u4f4d\u4e8e \\(id + 1\\) </li> </ul> </li> </ul> \u4e00\u9053 PTA \u4f8b\u9898 <p></p>"},{"location":"Course/FDS/Lec03/#_13","title":"\u5806\u7684\u64cd\u4f5c","text":"<p>\u4ee5\u6700\u5927\u5806\u4e3a\u4f8b</p> <ol> <li>\u6700\u5927\u5806\u7684\u521b\u5efa <pre><code>typedef struct HeapStruct *MaxHeap;\nstruct HeapStruct{\nElementType *Elements;  /*\u5b58\u50a8\u5806\u5143\u7d20\u7684\u6570\u7ec4*/\nint Size;   /*\u5806\u7684\u5f53\u524d\u5143\u7d20\u4e2a\u6570*/\nint Capacity;   /*\u5806\u7684\u6700\u5927\u5bb9\u91cf*/\n};\nMaxHeap Create( int MaxSize )\n{\nMaxHeap H = malloc(sizeof( struct HeapStruct));\nH-&gt;Elements = malloc((MaxSize+1) * sizeof(ELementType));\nH-&gt;Size = 0;\nH-&gt;Capacity = MaxSize;\nH-&gt;Elements[0] = MaxData;\n/*\u5b9a\u4e49\u201c\u54e8\u5175\u201d\u4e3a\u5927\u4e8e\u5806\u4e2d\u6240\u6709\u53ef\u80fd\u5143\u7d20\u7684\u503c\uff0c\u4fbf\u4e8e\u4ee5\u540e\u66f4\u5feb\u64cd\u4f5c*/\nreturn H;\n}\n</code></pre></li> <li>\u63d2\u5165\u2014\u2014\u5148\u653e\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u548c\u7236\u8282\u70b9\u6bd4\u8f83\u4ea4\u6362\u00b7\u00b7\u00b7 <pre><code>void Insert(MaxHeap H, ElementType item)\n{\n/*\u5c06\u5143\u7d20item\u63d2\u5165\u5230\u6700\u5927\u5806H\uff0c\u5176\u4e2dH-&gt;Elements[0]\u5df2\u7ecf\u5b9a\u4e49\u4e3a\u54e8\u5175*/\nint i;\nif(IsFull(H))\n{\nprintf(\"\u6700\u5927\u5806\u5df2\u6ee1\");\nreturn ;\n}\ni = ++H-&gt;Size;  /*i\u6307\u5411\u63d2\u5165\u540e\u5806\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e*/\nfor(; H-&gt;Elements[i/2] &lt; item; i /=2)\nH-&gt;Elements[i] = H-&gt;Elements[i/2];  /*\u5411\u4e0b\u8fc7\u6ee4\u8282\u70b9*/\nH-&gt;Elements[i] = item;  /*\u5c06item\u63d2\u5165*/\n}\n</code></pre> <p><code>H-&gt;Elements[0]</code> \u662f\u54e8\u5175\u5143\u7d20\uff0c\u5b83\u4e0d\u5c0f\u4e8e\u5806\u4e2d\u7684\u6700\u5927\u5143\u7d20\uff0c\u63a7\u5236\u5faa\u73af\u7ed3\u675f</p> </li> <li>\u5220\u9664\u2014\u2014\u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u653e\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u548c\u513f\u5b50\u6bd4\u8f83\u4ea4\u6362\u00b7\u00b7\u00b7 <pre><code>ElementType DeleteMax( MaxHeap H)\n{\n/*\u4ece\u6700\u5927\u5806H\u4e2d\u53d6\u51fa\u952e\u503c\u4e3a\u6700\u5927\u7684\u5143\u7d20\uff0c\u5e76\u5220\u9664\u4e00\u4e2a\u8282\u70b9*/\nint Parent, Child;\nElementType MaxItem, temp;\nif( IsEmpty(H))\n{\nprintf(\"\u6700\u5927\u5806\u5df2\u4e3a\u7a7a\");\nreturn ;\n}\nMaxItem = H-&gt;Elements[1];   /*\u53d6\u51fa\u6839\u8282\u70b9\u6700\u5927\u503c*/\n/*\u7528\u6700\u5927\u5806\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5411\u4e0a\u8fc7\u6ee4\u4e0b\u5c42\u8282\u70b9*/\ntemp = H-&gt;Elements[H-&gt;Size--];\nfor( Parent=1; Parent*2 &lt;= H-&gt;Size; Parent = Child)\n{\nChild = Parent * 2;\nif((Child != H-&gt;Size) &amp;&amp; (H-&gt;Elements[Child] &lt; H-&gt;Elements[Child+1]))\nChild ++;   /*Child\u6307\u5411\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u8f83\u5927\u8005*/\nif( temp &gt;= H-&gt;Elements[Child])\nbreak;\nelse    /*\u79fb\u52a8temp\u5143\u7d20\u5230\u4e0b\u4e00\u5c42*/\nH-&gt;Elements[Parent] = H-&gt;Elements[Child];\n}\nH-&gt;Elements[Parent] = temp;\nreturn MaxItem;\n}\n</code></pre></li> <li>Percolate: \u81ea\u4e0a\u800c\u4e0b\u6216\u81ea\u4e0b\u800c\u4e0a\u5806\u5316(\u5c06\u5143\u7d20\u5411\u4e0a\u6216\u5411\u4e0b\u79fb\u52a8)<ul> <li>\u53ef\u4ee5\u5b9e\u73b0\u975e\u6700\u503c\u5143\u7d20\u7684\u5220\u9664</li> </ul> </li> <li>\u6784\u5efa\u4e00\u4e2a\u5806 \u2014\u2014 \u5c06\u5df2\u5b58\u5728\u7684 N \u4e2a\u5143\u7d20\u6309\u5806\u8981\u6c42\u5b58\u653e\u5230\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4<ul> <li>\u901a\u8fc7\u63d2\u5165\u64cd\u4f5c\uff0c\u5c06 N \u4e2a\u5143\u7d20\u76f8\u7ee7\u63d2\u5165\u5230\u4e00\u4e2a\u521d\u59cb\u5316\u4e3a\u7a7a\u7684\u6808\u4e2d\uff0c\u65f6\u95f4\u4ee3\u4ef7\u6700\u5927\u4e3a \\(O(NlogN)\\) </li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N)\\) \u7684\u5efa\u7acb\u65b9\u6cd5<ol> <li>\u5c06 N \u4e2a\u5143\u7d20\u6309\u8f93\u5165\u987a\u5e8f\u5b58\u5165\uff0c\u5148\u6ee1\u8db3\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u7279\u6027</li> <li>\u8c03\u6574\u8282\u70b9\u4f4d\u7f6e\uff0c\u5373\u8fdb\u884c Percolate \u64cd\u4f5c\u4ee5\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6709\u5e8f\u7279\u6027</li> </ol> </li> </ul> </li> </ol> \u5b8c\u6574\u4ee3\u7801 <pre><code>typedef struct HNode *Heap; /* \u5806\u7684\u7c7b\u578b\u5b9a\u4e49 */\nstruct HNode {\nElementType *Data; /* \u5b58\u50a8\u5143\u7d20\u7684\u6570\u7ec4 */\nint Size;          /* \u5806\u4e2d\u5f53\u524d\u5143\u7d20\u4e2a\u6570 */\nint Capacity;      /* \u5806\u7684\u6700\u5927\u5bb9\u91cf */\n};\ntypedef Heap MaxHeap; /* \u6700\u5927\u5806 */\ntypedef Heap MinHeap; /* \u6700\u5c0f\u5806 */\n#define MAXDATA 1000  /* \u8be5\u503c\u5e94\u6839\u636e\u5177\u4f53\u60c5\u51b5\u5b9a\u4e49\u4e3a\u5927\u4e8e\u5806\u4e2d\u6240\u6709\u53ef\u80fd\u5143\u7d20\u7684\u503c */\nMaxHeap CreateHeap( int MaxSize )\n{ /* \u521b\u5efa\u5bb9\u91cf\u4e3aMaxSize\u7684\u7a7a\u7684\u6700\u5927\u5806 */\nMaxHeap H = (MaxHeap)malloc(sizeof(struct HNode));\nH-&gt;Data = (ElementType *)malloc((MaxSize+1)*sizeof(ElementType));\nH-&gt;Size = 0;\nH-&gt;Capacity = MaxSize;\nH-&gt;Data[0] = MAXDATA; /* \u5b9a\u4e49\"\u54e8\u5175\"\u4e3a\u5927\u4e8e\u5806\u4e2d\u6240\u6709\u53ef\u80fd\u5143\u7d20\u7684\u503c*/\nreturn H;\n}\nbool IsFull( MaxHeap H )\n{\nreturn (H-&gt;Size == H-&gt;Capacity);\n}\nbool Insert( MaxHeap H, ElementType X )\n{ /* \u5c06\u5143\u7d20X\u63d2\u5165\u6700\u5927\u5806H\uff0c\u5176\u4e2dH-&gt;Data[0]\u5df2\u7ecf\u5b9a\u4e49\u4e3a\u54e8\u5175 */\nint i;\nif ( IsFull(H) ) { printf(\"\u6700\u5927\u5806\u5df2\u6ee1\");\nreturn false;\n}\ni = ++H-&gt;Size; /* i\u6307\u5411\u63d2\u5165\u540e\u5806\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e */\nfor ( ; H-&gt;Data[i/2] &lt; X; i/=2 )\nH-&gt;Data[i] = H-&gt;Data[i/2]; /* \u4e0a\u6ee4X */\nH-&gt;Data[i] = X; /* \u5c06X\u63d2\u5165 */\nreturn true;\n}\n#define ERROR -1 /* \u9519\u8bef\u6807\u8bc6\u5e94\u6839\u636e\u5177\u4f53\u60c5\u51b5\u5b9a\u4e49\u4e3a\u5806\u4e2d\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\u5143\u7d20\u503c */\nbool IsEmpty( MaxHeap H )\n{\nreturn (H-&gt;Size == 0);\n}\nElementType DeleteMax( MaxHeap H )\n{ /* \u4ece\u6700\u5927\u5806H\u4e2d\u53d6\u51fa\u952e\u503c\u4e3a\u6700\u5927\u7684\u5143\u7d20\uff0c\u5e76\u5220\u9664\u4e00\u4e2a\u8282\u70b9 */\nint Parent, Child;\nElementType MaxItem, X;\nif ( IsEmpty(H) ) {\nprintf(\"\u6700\u5927\u5806\u5df2\u4e3a\u7a7a\");\nreturn ERROR;\n}\nMaxItem = H-&gt;Data[1]; /* \u53d6\u51fa\u6839\u8282\u70b9\u5b58\u653e\u7684\u6700\u5927\u503c */\n/* \u7528\u6700\u5927\u5806\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5411\u4e0a\u8fc7\u6ee4\u4e0b\u5c42\u8282\u70b9 */\nX = H-&gt;Data[H-&gt;Size--]; /* \u6ce8\u610f\u5f53\u524d\u5806\u7684\u89c4\u6a21\u8981\u51cf\u5c0f */\nfor( Parent=1; Parent*2&lt;=H-&gt;Size; Parent=Child ) {\nChild = Parent * 2;\nif( (Child!=H-&gt;Size) &amp;&amp; (H-&gt;Data[Child]&lt;H-&gt;Data[Child+1]) )\nChild++;  /* Child\u6307\u5411\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u8f83\u5927\u8005 */\nif( X &gt;= H-&gt;Data[Child] ) break; /* \u627e\u5230\u4e86\u5408\u9002\u4f4d\u7f6e */\nelse  /* \u4e0b\u6ee4X */\nH-&gt;Data[Parent] = H-&gt;Data[Child];\n}\nH-&gt;Data[Parent] = X;\nreturn MaxItem;\n} /*----------- \u5efa\u9020\u6700\u5927\u5806 -----------*/\nvoid PercDown( MaxHeap H, int p )\n{ /* \u4e0b\u6ee4\uff1a\u5c06H\u4e2d\u4ee5H-&gt;Data[p]\u4e3a\u6839\u7684\u5b50\u5806\u8c03\u6574\u4e3a\u6700\u5927\u5806 */\nint Parent, Child;\nElementType X;\nX = H-&gt;Data[p]; /* \u53d6\u51fa\u6839\u8282\u70b9\u5b58\u653e\u7684\u503c */\nfor( Parent=p; Parent*2&lt;=H-&gt;Size; Parent=Child ) {\nChild = Parent * 2;\nif( (Child!=H-&gt;Size) &amp;&amp; (H-&gt;Data[Child]&lt;H-&gt;Data[Child+1]) )\nChild++;  /* Child\u6307\u5411\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u8f83\u5927\u8005 */\nif( X &gt;= H-&gt;Data[Child] ) break; /* \u627e\u5230\u4e86\u5408\u9002\u4f4d\u7f6e */\nelse  /* \u4e0b\u6ee4X */\nH-&gt;Data[Parent] = H-&gt;Data[Child];\n}\nH-&gt;Data[Parent] = X;\n}\nvoid BuildHeap( MaxHeap H )\n{ /* \u8c03\u6574H-&gt;Data[]\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6709\u5e8f\u6027  */\n/* \u8fd9\u91cc\u5047\u8bbe\u6240\u6709H-&gt;Size\u4e2a\u5143\u7d20\u5df2\u7ecf\u5b58\u5728H-&gt;Data[]\u4e2d */\nint i;\n/* \u4ece\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\uff0c\u5230\u6839\u8282\u70b91 */\nfor( i = H-&gt;Size/2; i&gt;0; i-- )\nPercDown( H, i );\n}\n</code></pre>"},{"location":"Course/FDS/Lec03/#disjoint-set","title":"\u5e76\u67e5\u96c6 | disjoint set","text":"<p>Abstract</p> <p>\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u4e24\u79cd\u64cd\u4f5c: </p> <ul> <li>Union | \u5408\u5e76\u96c6\u5408</li> <li>Find | \u67e5\u8be2\u5143\u7d20\u6240\u5728\u96c6\u5408</li> </ul> <p>\u5e76\u67e5\u96c6\u4e2d\u96c6\u5408\u5b58\u50a8\u7684\u4e24\u79cd\u5b9e\u73b0: </p> <ul> <li>\u6811\u7ed3\u6784\u5b58\u50a8: \u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u96c6\u5408\u5143\u7d20</li> </ul> <p>Example</p> <p></p> <ul> <li>\u6570\u7ec4\u5b58\u50a8: \u5c06\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u63cf\u8ff0\u4e3a <pre><code>typedef struct{\nElementType Data;\nint Parent;\n}SetType;\n</code></pre></li> </ul> <p>Example</p> <p></p>"},{"location":"Course/FDS/Lec03/#find_1","title":"\u96c6\u5408\u8fd0\u7b97 \u2014\u2014 Find","text":"<p>\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u6240\u5728\u96c6\u5408(\u7528\u6839\u8282\u70b9\u8868\u793a)</p> <pre><code>int Find( SetType S[], ELementType X)\n{\n/*\u5728\u6570\u7ec4S\u4e2d\u67e5\u627e\u503c\u4e3aX\u7684\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408*/\n/*MaxSize\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u4e3a\u6570\u7ec4S\u7684\u6700\u5927\u957f\u5ea6*/\nint i;\nfor( i=0; i &lt; MaxSize &amp;&amp; S[i].Data != X; i++);\nif( i &gt;= MaxSize )\nreturn -1;  /*\u672a\u627e\u5230X,\u8fd4\u56de -1*/\nfor( ; S[i].Parent &gt;= 0; i = S[i].Parent);\nreturn i;   /*\u627e\u5230X\u6240\u5c5e\u7684\u96c6\u5408\uff0c\u8fd4\u56de\u6811\u6839\u8282\u70b9\u5728\u6570\u7ec4S\u4e2d\u7684\u4e0b\u6807*/ }\n</code></pre>"},{"location":"Course/FDS/Lec03/#union","title":"\u96c6\u5408\u8fd0\u7b97 \u2014\u2014 Union","text":"<ol> <li>\u5206\u522b\u627e\u5230 X1 \u548c X2 \u4e24\u4e2a\u5143\u7d20\u6240\u5728\u96c6\u5408\u6811\u7684\u6839\u8282\u70b9</li> <li>\u82e5\u4e0d\u540c\u6839\uff0c\u5219\u5c06\u5176\u4e2d\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u6570\u7ec4\u4e0b\u6807\u8bbe\u4e3a\u53e6\u4e00\u6839\u8282\u70b9\u7684\u6570\u7ec4\u4e0b\u6807 <pre><code>void Union( SetType S[], ElementType X1, ElementType X2)\n{\nint Root1, Root2;\nRoot1 = Find(S, X1);\nRoot2 = Find(S, X2);\nif( Root1 != Root2)\nS[Root2].Parent = Root1;\n}\n</code></pre> <p>\u4e3a\u6539\u5584\u5408\u5e76\u540e\u7684\u67e5\u627e\u6027\u80fd\uff0c\u53ef\u4ee5\u91c7\u7528\u5c06\u5c0f\u7684\u96c6\u5408\u5408\u5e76\u5230\u76f8\u5bf9\u5927\u7684\u96c6\u5408\u4e2d(\u5e76\u7528\u5229\u7528\u6570\u7ec4\u4e0b\u6807\u63d0\u793a\u96c6\u5408\u4e2d\u5143\u7d20\u6570\u91cf) \u56fe\u7247\u6458\u81ea MOOC</p> </li> </ol>"},{"location":"Course/FDS/Lec03/#smart-union-union-by-size","title":"Smart Union \u2014\u2014 Union-by-Size","text":"<ul> <li>\u6309\u5927\u5c0f\u5408\u5e76 (union-by-size) \u59cb\u7ec8\u5c06\u5c0f\u7684\u6811\u5408\u5e76\u5230\u5927\u7684\u6811\u4e0a\uff0c\u8fdb\u800c\u51cf\u5c0f\u6811\u7684\u9ad8\u5ea6</li> <li>\u4ee4 S[root] = -size (size \u8868\u793a\u6811\u7684\u5927\u5c0f\u5e76\u521d\u59cb\u5316\u4e3a -1)</li> </ul> <p>Lemma</p> <ul> <li>Let \\(T\\) be a tree created by union-by-size with N nodes, then \\(height(T) \\le \\lfloor log_2N \\rfloor + 1\\)</li> <li>Proof: \u901a\u8fc7\u5f52\u7eb3\u6cd5\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u96c6\u5408\u540d\u6700\u591a\u66f4\u6539 \\(log_2 N\\) \u6b21</li> <li>\u4e14 N \u6b21 union \u548c M \u6b21 find \u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O( N + M log_2 N )\\) </li> </ul> Quote <p></p> <p>\u5728\u6570\u7ec4\u4e2d\u91c7\u7528\u6811\u7684\u5927\u5c0f\u7684\u8d1f\u503c\u6765\u8bb0\u5f55\uff0c\u4ee5\u8bc1\u660e\u82e5\u4f7f\u7528\u6309\u5927\u5c0f\u6c42\u5e76\u5219\u8fde\u7eed M \u6b21\u8fd0\u7b97\u9700\u8981 \\(O(M)\\) \u5e73\u5747\u65f6\u95f4\u3002\u8fd9\u662f\u56e0\u4e3a\u5f53\u968f\u673a\u7684 Union \u6267\u884c\u65f6\u6574\u4e2a\u7b97\u6cd5\u4e00\u822c\u53ea\u6709\u4e00\u4e9b\u5f88\u5c0f\u7684\u96c6\u5408\uff08\u901a\u5e38\u542b\u4e00\u4e2a\u5143\u7d20\uff09\u4e0e\u5927\u96c6\u5408\u5408\u5e76\u3002</p>"},{"location":"Course/FDS/Lec03/#smart-union-union-by-height","title":"Smart Union \u2014\u2014 Union-by-Height","text":"<ul> <li>\u6309\u9ad8\u5ea6\u5408\u5e76 (union-by-height) \u59cb\u7ec8\u5c06\u6d45\u7684\u6811\u6210\u4e3a\u6df1\u7684\u6811</li> <li>\u540c\u6837\u4fdd\u8bc1\u4e86\u6240\u6709\u7684\u6811\u7684\u6df1\u5ea6\u6700\u591a\u662f \\(O(log N)\\) </li> </ul> Quote"},{"location":"Course/FDS/Lec03/#path-compression","title":"\u8def\u5f84\u538b\u7f29 | Path Compression","text":"<ul> <li>\u8def\u5f84\u538b\u7f29\u5728\u4e00\u6b21 Find \u64cd\u4f5c\u671f\u95f4\u6267\u884c\u3002\u8bbe\u64cd\u4f5c\u4e3a Find(X)\uff0c\u6b64\u65f6\u8def\u5f84\u538b\u7f29\u7684\u6548\u679c\u662f: \u4ece X \u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f7f\u5176\u7236\u8282\u70b9\u53d8\u6210\u6839\u3002 <pre><code>SetType Find(ElementType X, DisjSet S)\n{\nreturn (S[X] &lt;= 0) ? X : S[X] = Find(S[X], S);\n}\n</code></pre></li> <li>\u8def\u5f84\u538b\u7f29\u5bf9\u4e8e\u57fa\u672c\u7684 Find \u64cd\u4f5c\u552f\u4e00\u7684\u53d8\u5316\u662f\u4f7f\u5f97 S[X] \u7b49\u4e8e\u7531 Find \u8fd4\u56de\u7684\u503c</li> <li>\u5728\u96c6\u5408\u7684\u6839\u88ab\u9012\u5f52\u627e\u5230\u540e\uff0c X \u5c31\u76f4\u63a5\u6307\u5411\u5b83\uff0c\u56e0\u6b64\u5b9e\u73b0\u8def\u5f84\u538b\u7f29</li> </ul>"},{"location":"Course/FDS/Lec04/","title":"\u56fe | Graph","text":""},{"location":"Course/FDS/Lec04/#definitions","title":"Definitions","text":"<ol> <li>Length of a path: \u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u76ee</li> <li>Simple path: Path \u4e2d\u7684\u70b9 vi1, vi2, \u00b7\u00b7\u00b7, vin \u90fd\u4e0d\u540c</li> <li>\u65e0\u5411\u56fe<ol> <li>connected: \u82e5\u5b58\u5728\u4e00\u6761\u4ece vi \u5230 vj \u7684\u8def\u5f84\uff0c\u5219\u79f0 vi \u548c vj \u8fde\u901a</li> <li>connected graph: \u4efb\u610f\u70b9\u4e4b\u95f4\u90fd\u8fde\u901a\uff0c\u79f0\u65e0\u5411\u56fe\u662f\u8fde\u901a\u7684</li> <li>connected component: \u65e0\u5411\u56fe\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe</li> </ol> </li> <li>tree: \u8fde\u901a\u7684\u65e0\u73af\u56fe</li> <li>DAG: directed acyclic graph | \u6709\u5411\u65e0\u73af\u56fe </li> <li>Strongly connected component: \u6709\u5411\u56fe\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe</li> <li>Degree(v): <ol> <li>\u5bf9\u6709\u5411\u56fe\uff0c\u5ea6\u5206\u4e3a\u5165\u5ea6\u548c\u51fa\u5ea6</li> <li>\u5bf9\u65e0\u5411\u56fe\uff0c\u5ea6\u6570\u662f\u4e0e\u5176\u76f8\u90bb\u7684\u8282\u70b9\u6570</li> <li>\u8fb9\u6570\u7b49\u4e8e\u6240\u6709\u8282\u70b9\u7684\u5ea6\u6570\u548c\u9664\u4ee5 2</li> </ol> </li> </ol>"},{"location":"Course/FDS/Lec04/#_1","title":"\u56fe\u7684\u8868\u793a","text":"<ol> <li>\u90bb\u63a5\u77e9\u9635 G[N][N] \u2014\u2014 N \u4e2a\u9876\u70b9\u4ece 0 \u5230 N-1 \u7f16\u53f7<ul> <li>G[i][j] = &lt; vi, vj &gt; \u662f G \u4e2d\u7684\u8fb9 ? 1 : 0</li> </ul> </li> </ol> <p>Tip</p> <ul> <li>\u5bf9\u4e8e\u65e0\u5411\u56fe\u7684\u5b58\u50a8\uff0c\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a N(N+1)/2 \u7684\u4e00\u7ef4\u6570\u7ec4 A \u5b58\u50a8 {G00, G10, G11, \u00b7\u00b7\u00b7, G(n-1)0, \u00b7\u00b7\u00b7, G(n-1)(n-1)}, \u5219 Gij \u5728 A \u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807\u662f: i * (i + 1) / 2 + j</li> <li>\u5bf9\u4e8e\u7f51\u7edc\uff0c\u53ea\u8981\u628a G[i][j] \u7684\u503c\u5b9a\u4e49\u4e3a\u8fb9 &lt; vi, vj &gt; \u7684\u6743\u91cd\u5373\u53ef</li> </ul> <ol> <li>\u90bb\u63a5\u8868\u8868\u793a\u6cd5 \u2014\u2014 G[N] \u4e3a\u6307\u9488\u6570\u7ec4\uff0c\u5bf9\u5e94\u77e9\u9635\u6bcf\u884c\u8981\u7ed9\u94fe\u8868\u4e14\u53ea\u5b58\u975e 0 \u5143\u7d20 <ul> <li>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u8fb9\u4f1a\u88ab\u5b58\u50a8\u4e24\u6b21</li> <li>\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u65e0\u6cd5\u904d\u5386\u5165\u5ea6\uff0c\u5982\u679c\u8981\u67e5\u8be2\u5165\u5ea6\u53ef\u91c7\u7528\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5:<ul> <li>\u589e\u52a0\u9006\u90bb\u63a5\u8868  </li> <li>\u91c7\u7528\u591a\u91cd\u94fe\u8868  </li> </ul> </li> </ul> </li> </ol>"},{"location":"Course/FDS/Lec04/#_2","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>Abstract</p> <ul> <li>AOV \u7f51\u7edc \u2014\u2014 \u5b9a\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u8fb9\u8868\u793a\u5148\u540e\u5173\u7cfb</li> <li>\u82e5\u5b58\u5728\u4e00\u6761\u4ece i \u5230 j \u7684\u8def\u5f84\uff0c\u5219\u79f0 i \u4e3a j  \u7684\u524d\u9a71 (predecessor), j \u662f i \u7684\u540e\u7ee7 (successor)</li> <li>\u82e5\u5b58\u5728\u4e00\u6761\u8fb9 &lt; i, j &gt;\uff0c\u5219\u79f0 i \u662f j \u7684\u76f4\u63a5\u524d\u9a71 (immediate predecessor) \uff0cj \u662f i \u7684\u76f4\u63a5\u540e\u7ee7</li> </ul>"},{"location":"Course/FDS/Lec04/#_3","title":"\u62d3\u6251\u5e8f","text":"<ul> <li>\u82e5\u5728\u56fe\u4e2d\u4ece V \u5230 W \u6709\u4e00\u6761\u6709\u5411\u8def\u5f84\uff0c\u5219 V \u4e00\u5b9a\u6392\u5728 W \u4e4b\u524d\u3002\u6ee1\u8db3\u6b64\u6761\u4ef6\u7684\u9876\u70b9\u5e8f\u5217\u79f0\u4e3a\u4e00\u4e2a\u62d3\u6251\u5e8f (\u83b7\u5f97\u4e00\u4e2a\u62d3\u6251\u5e8f\u7684\u8fc7\u7a0b\u5c31\u662f\u62d3\u6251\u6392\u5e8f)</li> <li>AOV \u5982\u679c\u6709\u5408\u7406\u7684\u62d3\u6251\u5e8f\uff0c\u5219\u5fc5\u5b9a\u662f\u6709\u5411\u65e0\u73af\u56fe (Directed Acyclic Graph, DAG) <p> \u5982\u679c\u6709\u5411\u56fe\u4e2d\u51fa\u73b0\u73af\uff0c\u4e00\u5b9a\u4e0d\u53ef\u80fd\u5f97\u5230\u4e00\u4e2a\u5408\u7406\u7684\u62d3\u6251\u5e8f</p> </li> </ul>"},{"location":"Course/FDS/Lec04/#_4","title":"\u62d3\u6251\u6392\u5e8f\u7b97\u6cd5","text":"<pre><code>void Topsort(Graph G)\n{\nint Counter;\nVertex V, W;\nfor(Counter = 0; Counter &lt; NumVertex; Counter ++)\n{\nV = FindNeVertexOfDegreeZero();     /* O(|V|) */\nif(V == NotAVertex)\n{\nError(\"Graph has a cycle\");\nbreak;\n}\nTopNum[V] = Counter;    /*or output V*/\nfor(each W adjacent to V)\nIndegree[W] --;\n}\n}\n</code></pre> <ul> <li>\u4e0a\u8ff0\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $T = O(|V|^2) $</li> <li>Improvement: \u968f\u65f6\u5c06\u5165\u5ea6\u53d8\u4e3a 0 \u7684\u9876\u70b9\u653e\u5230\u4e00\u4e2a\u5bb9\u5668\u4e2d(\u6808\u6216\u961f\u5217\u7b49)</li> </ul> Improvement<pre><code>void Topsort( Graph G )\n{   Queue  Q;\nint  Counter = 0;\nVertex  V, W;\nQ = CreateQueue( NumVertex );  MakeEmpty( Q );\nfor ( each vertex V )\nif ( Indegree[ V ] == 0 )   Enqueue( V, Q );\nwhile ( !IsEmpty( Q ) )\n{\nV = Dequeue( Q );\nTopNum[ V ] = ++ Counter; /* assign next */\nfor ( each W adjacent to V )\nif ( \u2013 \u2013 Indegree[ W ] == 0 )  Enqueue( W, Q );\n}  /* end-while */\nif ( Counter != NumVertex )\nError( \u201cGraph has a cycle\u201d );\nDisposeQueue( Q ); /* free memory */}\n</code></pre> <p>\u82e5\u6709\u73af\u5219\u4e00\u5b9a\u4f1a\u5b58\u5728\u627e\u4e0d\u5230\u5165\u5ea6\u4e3a 0 \u7684\u70b9\uff0c\u6765\u8fdb\u5165\u6784\u6210\u73af\u7684\u5b50\u56fe</p> \u90bb\u63a5\u8868\u5b58\u50a8\u2014\u62d3\u6251\u6392\u5e8f\u7b97\u6cd5 <pre><code>bool TopSort( LGraph Graph, Vertex TopOrder[] )\n{ /* \u5bf9Graph\u8fdb\u884c\u62d3\u6251\u6392\u5e8f,  TopOrder[]\u987a\u5e8f\u5b58\u50a8\u6392\u5e8f\u540e\u7684\u9876\u70b9\u4e0b\u6807 */\nint Indegree[MaxVertexNum], cnt;\nVertex V;\nPtrToAdjVNode W;\nQueue Q = CreateQueue( Graph-&gt;Nv );\n/* \u521d\u59cb\u5316Indegree[] */\nfor (V=0; V&lt;Graph-&gt;Nv; V++)\nIndegree[V] = 0;\n/* \u904d\u5386\u56fe\uff0c\u5f97\u5230Indegree[] */\nfor (V=0; V&lt;Graph-&gt;Nv; V++)\nfor (W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next)\nIndegree[W-&gt;AdjV] ++; /* \u5bf9\u6709\u5411\u8fb9&lt;V, W-&gt;AdjV&gt;\u7d2f\u8ba1\u7ec8\u70b9\u7684\u5165\u5ea6 */\n/* \u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u5165\u5217 */\nfor (V=0; V&lt;Graph-&gt;Nv; V++)\nif ( Indegree[V]==0 )\nAddQ(Q, V);\n/* \u4e0b\u9762\u8fdb\u5165\u62d3\u6251\u6392\u5e8f */ cnt = 0; while( !IsEmpty(Q) ){\nV = DeleteQ(Q); /* \u5f39\u51fa\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u9876\u70b9 */\nTopOrder[cnt ++] = V; /* \u5c06\u4e4b\u5b58\u4e3a\u7ed3\u679c\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20 */\n/* \u5bf9V\u7684\u6bcf\u4e2a\u90bb\u63a5\u70b9W-&gt;AdjV */\nfor ( W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next )\nif ( --Indegree[W-&gt;AdjV] == 0 )/* \u82e5\u5220\u9664V\u4f7f\u5f97W-&gt;AdjV\u5165\u5ea6\u4e3a0 */\nAddQ(Q, W-&gt;AdjV); /* \u5219\u8be5\u9876\u70b9\u5165\u5217 */ } /* while\u7ed3\u675f*/\nif ( cnt != Graph-&gt;Nv )\nreturn false; /* \u8bf4\u660e\u56fe\u4e2d\u6709\u56de\u8def, \u8fd4\u56de\u4e0d\u6210\u529f\u6807\u5fd7 */ else\nreturn true;\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#_5","title":"\u6700\u77ed\u8def\u7b97\u6cd5","text":"<p>\u6700\u77ed\u8def\u5f84\u95ee\u9898\u7684\u62bd\u8c61</p> <p>\u5728\u7f51\u7edc\u4e2d\uff0c\u6c42\u4e24\u4e2a\u4e0d\u540c\u9876\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u6700\u5c0f\u7684\u90a3\u4e00\u6761\u8def\u5f84\u3002\u8fd9\u6761\u8def\u5f84\u5373\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84 (Shortest Path) , \u7b2c\u4e00\u4e2a\u9876\u70b9\u4e3a\u6e90\u70b9 (Source) , \u6700\u540e\u4e00\u4e2a\u9876\u70b9\u4e3a\u7ec8\u70b9 (Destination)</p>"},{"location":"Course/FDS/Lec04/#_6","title":"\u95ee\u9898\u5206\u7c7b","text":"<ol> <li>\u5355\u6e90\u6700\u77ed\u8def\u5f84: \u4ece\u56fa\u5b9a\u6e90\u70b9\u51fa\u53d1\uff0c\u6c42\u5176\u5230\u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84<ol> <li>(\u6709\u5411) \u65e0\u6743\u56fe</li> <li>(\u6709\u5411) \u6709\u6743\u56fe</li> </ol> </li> <li>\u591a\u6e90\u6700\u77ed\u8def\u5f84: \u6c42\u4efb\u610f\u4e24\u9876\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84</li> </ol>"},{"location":"Course/FDS/Lec04/#_7","title":"\u65e0\u6743\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def","text":"<p>\u6309\u7167\u9012\u589e (\u9012\u51cf) \u7684\u987a\u5e8f\u627e\u51fa\u5230\u5404\u9876\u70b9\u7684\u6700\u77ed\u8def \u91c7\u7528 BFS (Breadth-first search)</p> <p>Implementation</p> <pre><code>Table[i].Dist = distance from s to vi  /* initialized to be Infinity except for s */\nTable[i].Known = 1 if vi is checked; or 0 if not\nTable[ i ].Path = for tracking the path   /* initialized to be 0 */\n</code></pre> <ol> <li>Normal: <pre><code>void Unweighted( Table T )\n{   int  CurrDist;\nVertex  V, W;\nfor ( CurrDist = 0; CurrDist &lt; NumVertex; CurrDist ++ ) {\nfor ( each vertex V )\nif ( !T[ V ].Known &amp;&amp; T[ V ].Dist == CurrDist ) {\nT[ V ].Known = true;\nfor ( each W adjacent to V )\nif ( T[ W ].Dist == Infinity ) {\nT[ W ].Dist = CurrDist + 1;\nT[ W ].Path = V;\n} /* end-if Dist == Infinity */\n} /* end-if !Known &amp;&amp; Dist == CurrDist */\n}  /* end-for CurrDist */\n}\n</code></pre> <p>\\(T = O(|V|^2)\\) </p> </li> <li>Improvement: <pre><code>void Unweighted( Table T )\n{   /* T is initialized with the source vertex S given */\nQueue  Q;\nVertex  V, W;\nQ = CreateQueue (NumVertex );  MakeEmpty( Q );\nEnqueue( S, Q ); /* Enqueue the source vertex */\nwhile ( !IsEmpty( Q ) ) {\nV = Dequeue( Q );\nT[ V ].Known = true; /* not really necessary */\nfor ( each W adjacent to V )\nif ( T[ W ].Dist == Infinity ) {\nT[ W ].Dist = T[ V ].Dist + 1;\nT[ W ].Path = V;\nEnqueue( W, Q );\n} /* end-if Dist == Infinity */\n} /* end-while */\nDisposeQueue( Q ); /* free memory */\n}\n</code></pre> <p>\\(T = O(|V|+|E|)\\) </p> </li> </ol> \u90bb\u63a5\u8868\u5b58\u50a8 - \u65e0\u6743\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5 <pre><code>/* dist[]\u548cpath[]\u5168\u90e8\u521d\u59cb\u5316\u4e3a-1 */\nvoid Unweighted ( LGraph Graph, int dist[], int path[], Vertex S )\n{\nQueue Q;\nVertex V;\nPtrToAdjVNode W;\nQ = CreateQueue( Graph-&gt;Nv ); /* \u521b\u5efa\u7a7a\u961f\u5217, MaxSize\u4e3a\u5916\u90e8\u5b9a\u4e49\u7684\u5e38\u6570 */\ndist[S] = 0; /* \u521d\u59cb\u5316\u6e90\u70b9 */\nAddQ (Q, S);\nwhile( !IsEmpty(Q) ){\nV = DeleteQ(Q);\nfor ( W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next ) /* \u5bf9V\u7684\u6bcf\u4e2a\u90bb\u63a5\u70b9W-&gt;AdjV */\nif ( dist[W-&gt;AdjV]==-1 ) { /* \u82e5W-&gt;AdjV\u672a\u88ab\u8bbf\u95ee\u8fc7 */\ndist[W-&gt;AdjV] = dist[V]+1; /* W-&gt;AdjV\u5230S\u7684\u8ddd\u79bb\u66f4\u65b0 */\npath[W-&gt;AdjV] = V; /* \u5c06V\u8bb0\u5f55\u5728S\u5230W-&gt;AdjV\u7684\u8def\u5f84\u4e0a */\nAddQ(Q, W-&gt;AdjV);\n}\n} /* while\u7ed3\u675f*/\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#_8","title":"\u6709\u6743\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def","text":"<p>\u6309\u7167\u9012\u589e\u7684\u987a\u5e8f\u627e\u51fa\u5230\u5404\u9876\u70b9\u7684\u6700\u77ed\u8def</p>"},{"location":"Course/FDS/Lec04/#dijkstra","title":"Dijkstra \u7b97\u6cd5","text":"<ul> <li>\u4ee4 S = {\u6e90\u70b9 s + \u5df2\u7ecf\u786e\u5b9a\u4e86\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9 vi }</li> <li>\u5bf9\u4efb\u4e00\u672a\u6536\u5f55\u7684\u9876\u70b9 v, \u5b9a\u4e49 dist[v] \u4e3a s \u5230 v \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u4f46\u8be5\u8def\u5f84\u4ec5\u7ecf\u8fc7 s \u4e2d\u7684\u9876\u70b9\u3002</li> <li>\u7531\u4e8e\u8def\u5f84\u6309\u7167\u9012\u589e\u987a\u5e8f\u751f\u6210<ul> <li>\u771f\u6b63\u7684\u6700\u77ed\u8def\u5fc5\u987b\u53ea\u7ecf\u8fc7 S \u4e2d\u7684\u9876\u70b9</li> <li>\u6bcf\u6b21\u4ece\u672a\u6536\u5f55\u7684\u9876\u70b9\u4e2d\u9009\u4e00\u4e2a dist \u6700\u5c0f\u7684\u6536\u5f55</li> <li>\u589e\u52a0\u4e00\u4e2a v \u8fdb\u5165 S\uff0c\u53ef\u80fd\u5f71\u54cd\u53e6\u4e00\u4e2a w \u7684 dist \u503c(dist[w] = min{dist[w], dist[v] + &lt; v, w &gt; \u7684\u6743\u91cd})</li> </ul> </li> </ul> <p>code</p> \u4f2a\u7801<pre><code>void Dijkstra(Table T)\n{\nVertex V, W;\nfor(;;)     /* O(|V|) */\n{\nV = smallest unknown distance vertex;\nif(V == NotAVertex)\nbreak;\nT[V].Known = true;\nfor(each W adjacent to V)\nif(!T[W].Known)\nif(T[V].Dist + Cvw &lt; T[W].Dist)\n{\nDecrease(T[W].Dist to T[V].Dist + Cvw);\nT[W].Path = V;\n}/* end-if update W */\n}/* end-for(;;) */\n}\n/* \u4e0d\u80fd\u89e3\u51b3\u6709\u8d1f\u8fb9\u7684\u60c5\u51b5 */\n</code></pre> Dijkstra\u7b97\u6cd5\u7684\u58f0\u660e <pre><code>typedef int Vertex;\nstruct TableEntry\n{\nList Header;      /* Adjacency list */\nint Known;\nDistType Dist;\nVertex Path;\n};\n/* Vertices are numbered from 0 */\n#define NotAVertex (-1)\ntypedef struct TableEntry Table[NumVertex];\n</code></pre> \u8868\u521d\u59cb\u5316\u4f8b\u7a0b <pre><code>void InitTable(Vertex Start, Graph G, Table T)\n{\nint i;\nReadGraph(G, T);  /* Read graph somehow */\nfor(i = 0; i &lt; NumVertex; i++)\n{\nT[i].Known = False;\nT[i].Dist = Infinity;\nT[i].Path = NotAVertex;\n}\nT[Start].dist = 0;\n}\n</code></pre> \u663e\u793a\u5b9e\u9645\u6700\u77ed\u8def\u5f84\u7684\u4f8b\u7a0b <pre><code>/* Print shortest path to V after Dijkstra has run */\n/* Assume that the path exists */\nvoid PrintPath(Vertex V, Table T)\n{\nif(T[V].Path != NotAVertex)\n{\nPrintPath(T[V].Path, T);\nprintf(\" to\");\n}\nprintf(\"%v\", V);  // %v \u662f\u4f2a\u4ee3\u7801\n}\n</code></pre> <ul> <li>\u56e0\u4e3a\u5224\u5b9a\u6761\u4ef6 T[V].Dist + Cvw &lt; T[W].Dist\uff0cT[i].Dist \u8981\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77</li> <li>\u4f18\u5316\u5982\u4e0b\uff1a<ul> <li>Implementation 1: \u76f4\u63a5\u626b\u63cf\u6240\u6709\u672a\u6536\u5f55\u9876\u70b9 \u2014\u2014 \\(O(|V|)\\) <ul> <li>\\(T = O(|V|^2 + |E|)\\) \u2014\u2014 \u5bf9\u4e8e\u7a20\u5bc6\u56fe\u6548\u679c\u597d</li> </ul> </li> <li>Implementation 2: \u5c06 dist \u5b58\u5728\u6700\u5c0f\u5806\u4e2d \u2014\u2014 \\(O(log|V|)\\) <ul> <li>\u66f4\u65b0 T[W].Dist \u7684\u503c \u2014\u2014 \\(O(log|V|)\\) </li> <li>$ T = O(|V|log|V| + |E|log|V|) = O(|E|log|V|) $  \u2014\u2014 \u5bf9\u7a00\u758f\u56fe\u6548\u679c\u597d(\u6307 V \u548c E \u4e00\u4e2a\u6570\u91cf\u7ea7)</li> </ul> </li> </ul> </li> </ul> \u90bb\u63a5\u77e9\u9635\u5b58\u50a8 - \u6709\u6743\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5 <pre><code>Vertex FindMinDist( MGraph Graph, int dist[], int collected[] )\n{ /* \u8fd4\u56de\u672a\u88ab\u6536\u5f55\u9876\u70b9\u4e2ddist\u6700\u5c0f\u8005 */\nVertex MinV, V;\nint MinDist = INFINITY;\nfor (V=0; V&lt;Graph-&gt;Nv; V++) {\nif ( collected[V]==false &amp;&amp; dist[V]&lt;MinDist) {\n/* \u82e5V\u672a\u88ab\u6536\u5f55\uff0c\u4e14dist[V]\u66f4\u5c0f */\nMinDist = dist[V]; /* \u66f4\u65b0\u6700\u5c0f\u8ddd\u79bb */\nMinV = V; /* \u66f4\u65b0\u5bf9\u5e94\u9876\u70b9 */\n}\n}\nif (MinDist &lt; INFINITY) /* \u82e5\u627e\u5230\u6700\u5c0fdist */\nreturn MinV; /* \u8fd4\u56de\u5bf9\u5e94\u7684\u9876\u70b9\u4e0b\u6807 */\nelse return ERROR;  /* \u82e5\u8fd9\u6837\u7684\u9876\u70b9\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u9519\u8bef\u6807\u8bb0 */\n}\nbool Dijkstra( MGraph Graph, int dist[], int path[], Vertex S )\n{\nint collected[MaxVertexNum];\nVertex V, W;\n/* \u521d\u59cb\u5316\uff1a\u6b64\u5904\u9ed8\u8ba4\u90bb\u63a5\u77e9\u9635\u4e2d\u4e0d\u5b58\u5728\u7684\u8fb9\u7528 INFINITY \u8868\u793a */\nfor ( V=0; V&lt;Graph-&gt;Nv; V++ ) {\ndist[V] = Graph-&gt;G[S][V];\nif ( dist[V] &lt; INFINITY )\npath[V] = S;\nelse\npath[V] = -1;\ncollected[V] = false;\n}\n/* \u5148\u5c06\u8d77\u70b9\u6536\u5165\u96c6\u5408 */\ndist[S] = 0;\ncollected[S] = true;\nwhile (1) {\n/* V = \u672a\u88ab\u6536\u5f55\u9876\u70b9\u4e2d dist \u6700\u5c0f\u8005 */\nV = FindMinDist( Graph, dist, collected );\nif ( V == ERROR ) /* \u82e5\u8fd9\u6837\u7684V\u4e0d\u5b58\u5728 */\nbreak;      /* \u7b97\u6cd5\u7ed3\u675f */\ncollected[V] = true;  /* \u6536\u5f55V */\nfor( W=0; W&lt;Graph-&gt;Nv; W++ ) /* \u5bf9\u56fe\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9W */\n/* \u82e5W\u662fV\u7684\u90bb\u63a5\u70b9\u5e76\u4e14\u672a\u88ab\u6536\u5f55 */\nif ( collected[W]==false &amp;&amp; Graph-&gt;G[V][W]&lt;INFINITY ) {\nif ( Graph-&gt;G[V][W]&lt;0 ) /* \u82e5\u6709\u8d1f\u8fb9 */\nreturn false; /* \u4e0d\u80fd\u6b63\u786e\u89e3\u51b3\uff0c\u8fd4\u56de\u9519\u8bef\u6807\u8bb0 */\n/* \u82e5\u6536\u5f55V\u4f7f\u5f97dist[W]\u53d8\u5c0f */\nif ( dist[V]+Graph-&gt;G[V][W] &lt; dist[W] ) {\ndist[W] = dist[V]+Graph-&gt;G[V][W]; /* \u66f4\u65b0dist[W] */\npath[W] = V; /* \u66f4\u65b0S\u5230W\u7684\u8def\u5f84 */\n}\n}\n} /* while\u7ed3\u675f*/\nreturn true; /* \u7b97\u6cd5\u6267\u884c\u5b8c\u6bd5\uff0c\u8fd4\u56de\u6b63\u786e\u6807\u8bb0 */\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#_9","title":"\u5e26\u8d1f\u6743\u56fe","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(T = O(|V| \\times |E|)\\) <pre><code>void  WeightedNegative( Table T )\n{   Queue  Q;\nVertex  V, W;\nQ = CreateQueue (NumVertex );  MakeEmpty( Q );\nEnqueue( S, Q ); /* Enqueue the source vertex */\nwhile ( !IsEmpty( Q ) ) {\nV = Dequeue( Q );   /* each vertex can dequeue at most |V| times */\nfor ( each W adjacent to V )\nif ( T[ V ].Dist + Cvw &lt; T[ W ].Dist )  /* no longer once per edge */\n{\nT[ W ].Dist = T[ V ].Dist + Cvw;\nT[ W ].Path = V;\nif ( W is not already in Q )\nEnqueue( W, Q );\n} /* end-if update */\n} /* end-while */\nDisposeQueue( Q ); /* free memory */\n}\n/* negative-cost cycle will cause indefinite loop */\n</code></pre></p>"},{"location":"Course/FDS/Lec04/#acyclic-graph","title":"\u65e0\u73af\u56fe | Acyclic Graph","text":"<p>\u6b64\u90e8\u5206\u4e3b\u8981\u662f\u5176\u5728 AOE (Activity On Edge) \u7f51\u7edc\u7684\u5e94\u7528  \u4e00\u822c\u7528\u4e8e\u5b89\u6392\u9879\u76ee\u7684\u5de5\u5e8f</p> <ul> <li>\u6bcf\u4e2a\u7ed3\u70b9\u5b58\u50a8\u4e00\u4e2a\u6700\u65e9\u5b8c\u6210\u65f6\u95f4\u548c\u6700\u665a\u5b8c\u6210\u65f6\u95f4</li> <li>\u6bcf\u6761\u8fb9\u5b58\u5728\u4e00\u4e2a\u6301\u7eed\u65f6\u95f4 (\u8fb9\u6743 C ) \u548c\u4e00\u4e2a\u677e\u5f1b\u65f6\u95f4</li> <li>\u76f8\u5173\u8ba1\u7b97:<ul> <li>EC (earliest completion): \u6700\u65e9\u5b8c\u6210\u65f6\u95f4\uff0c\u4ece\u524d\u5f80\u540e\u8ba1\u7b97</li> <li>LC (latest completion): \u6700\u665a\u5b8c\u6210\u65f6\u95f4\uff0c\u7528\u9700\u8981\u6700\u957f\u7684\u65f6\u95f4\u4ece\u540e\u5411\u524d\u4f9d\u6b21\u51cf\u53bb</li> <li>Slack Time: \u677e\u5f1b\u65f6\u95f4 | \u673a\u52a8\u65f6\u95f4\uff0c\u6700\u65e9\u5b8c\u6210\u7684\u65f6\u95f4\u548c\u8981\u6c42\u7684\u6700\u665a\u5b8c\u6210\u7684\u65f6\u95f4\u4e4b\u95f4\u7684\u65f6\u95f4</li> <li>Critical Path: \u5173\u952e\u8def\u5f84\uff0c\u53ef\u80fd\u4e0d\u6b62\u4e00\u6761\u4f46\u627e\u51fa\u4e00\u6761\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u90fd\u662f\u5173\u952e\u70b9\uff08\u677e\u5f1b\u65f6\u95f4\u4e3a 0\uff09\u7684\u5c31\u884c</li> </ul> </li> </ul> Quote <p> \u56fe\u7247\u6458\u81ea\u8bfe\u7a0bPPT  CSDN-AOE\u7f51\u7edc(\u5927\u529b\u6d77\u68e0\u7684\u535a\u5ba2)</p> \u62d3\u5c55 <p>\u591a\u6e90\u6700\u77ed\u8def</p> <p>\u7b97\u6cd5\u2014\u2014(\u76f4\u63a5\u5c06\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\u8c03\u7528 |V| \u904d or Floyd \u7b97\u6cd5)</p> Floyd \u7b97\u6cd5<pre><code>void Floyd()\n{\nfor( i = 0; i &lt; N; i++)\n{\nfor( j = 0; j &lt; N; j++)\n{\nD[i][j] = G[i][j];\npath[i][j] = -1;\n/*path\u7528\u4e8e\u8bb0\u5f55\u8def\u5f84*/\n}\n}\nfor( k = 0; k &lt; N; k++)\n{\nfor( i = 0; i &lt; N; i++)\n{\nfor( j = 0; j &lt; N; j++)\n{\nif( D[i][k] + D[k][j] &lt; D[i][j])\n{\nD[i][j] = D[i][k] + D[k][j];\npath[i][j] = k;\n/*\u5982\u679c\u5c06i\u5230j\u7684\u6700\u77ed\u8def\u5f84*/\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#minimum-spanning-tree","title":"\u6700\u5c0f\u751f\u6210\u6811 | Minimum Spanning Tree","text":"<ul> <li>\u662f\u4e00\u68f5\u6811\uff0c\u4e14\uff1a<ul> <li>\u65e0\u56de\u8def</li> <li>\u8fde\u901a\u7684</li> <li>|V|\u4e2a\u9876\u70b9\u4e00\u5b9a\u6709|V| -1\u6761\u8fb9</li> </ul> </li> <li>\u662f\u751f\u6210\u6811<ul> <li>\u5305\u542b\u5168\u90e8\u9876\u70b9</li> <li>|V| -1\u6761\u8fb9\u90fd\u5728\u56fe\u4e2d</li> </ul> </li> <li>\u8fb9\u7684\u6743\u91cd\u548c\u6700\u5c0f</li> </ul> <p>\u5411\u751f\u6210\u6811\u4e2d\u4efb\u52a0\u4e00\u6761\u8fb9\u90fd\u4e00\u5b9a\u6784\u6210\u56de\u8def \u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728 \\(\\Leftrightarrow\\) \u56fe\u8fde\u901a</p>"},{"location":"Course/FDS/Lec04/#prim","title":"Prim \u7b97\u6cd5","text":"<p>\u7a20\u5bc6\u56fe\u4e00\u822c\u7528\u6b64\u7b97\u6cd5\uff0c\u6bcf\u6b21\u5bfb\u627e\u7684\u662f\u548c\u5df2\u7ecf\u6536\u7f57\u8fdb\u6700\u5c0f\u751f\u6210\u6811\u6240\u6709\u9876\u70b9\u76f8\u90bb\u7684\u8fb9 \u7c7b\u4f3c Dijkstra \u7b97\u6cd5, \\(T = O( |V| ^2 )\\) </p> code \u90bb\u63a5\u77e9\u9635\u5b58\u50a8<pre><code>/* \u90bb\u63a5\u77e9\u9635\u5b58\u50a8 - Prim\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5 */\nVertex FindMinDist( MGraph Graph, WeightType dist[] )\n{ /* \u8fd4\u56de\u672a\u88ab\u6536\u5f55\u9876\u70b9\u4e2ddist\u6700\u5c0f\u8005 */\nVertex MinV, V;\nWeightType MinDist = INFINITY;\nfor (V=0; V&lt;Graph-&gt;Nv; V++) {\nif ( dist[V]!=0 &amp;&amp; dist[V]&lt;MinDist) {\n/* \u82e5V\u672a\u88ab\u6536\u5f55\uff0c\u4e14dist[V]\u66f4\u5c0f */\nMinDist = dist[V]; /* \u66f4\u65b0\u6700\u5c0f\u8ddd\u79bb */\nMinV = V; /* \u66f4\u65b0\u5bf9\u5e94\u9876\u70b9 */\n}\n}\nif (MinDist &lt; INFINITY) /* \u82e5\u627e\u5230\u6700\u5c0fdist */\nreturn MinV; /* \u8fd4\u56de\u5bf9\u5e94\u7684\u9876\u70b9\u4e0b\u6807 */\nelse return ERROR;  /* \u82e5\u8fd9\u6837\u7684\u9876\u70b9\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de-1\u4f5c\u4e3a\u6807\u8bb0 */\n}\nint Prim( MGraph Graph, LGraph MST )\n{ /* \u5c06\u6700\u5c0f\u751f\u6210\u6811\u4fdd\u5b58\u4e3a\u90bb\u63a5\u8868\u5b58\u50a8\u7684\u56fe MST\uff0c\u8fd4\u56de\u6700\u5c0f\u6743\u91cd\u548c */\nWeightType dist[MaxVertexNum], TotalWeight;\nVertex parent[MaxVertexNum], V, W;\nint VCount;\nEdge E;\n/* \u521d\u59cb\u5316\u3002\u9ed8\u8ba4\u521d\u59cb\u70b9\u4e0b\u6807\u662f0 */\nfor (V=0; V&lt;Graph-&gt;Nv; V++) {\n/* \u8fd9\u91cc\u5047\u8bbe\u82e5V\u5230W\u6ca1\u6709\u76f4\u63a5\u7684\u8fb9\uff0c\u5219Graph-&gt;G[V][W]\u5b9a\u4e49\u4e3aINFINITY */\ndist[V] = Graph-&gt;G[0][V];\nparent[V] = 0; /* \u6682\u4e14\u5b9a\u4e49\u6240\u6709\u9876\u70b9\u7684\u7236\u7ed3\u70b9\u90fd\u662f\u521d\u59cb\u70b90 */ }\nTotalWeight = 0; /* \u521d\u59cb\u5316\u6743\u91cd\u548c     */\nVCount = 0;      /* \u521d\u59cb\u5316\u6536\u5f55\u7684\u9876\u70b9\u6570 */\n/* \u521b\u5efa\u5305\u542b\u6240\u6709\u9876\u70b9\u4f46\u6ca1\u6709\u8fb9\u7684\u56fe\u3002\u6ce8\u610f\u7528\u90bb\u63a5\u8868\u7248\u672c */\nMST = CreateGraph(Graph-&gt;Nv);\nE = (Edge)malloc( sizeof(struct ENode) ); /* \u5efa\u7acb\u7a7a\u7684\u8fb9\u7ed3\u70b9 */\n/* \u5c06\u521d\u59cb\u70b90\u6536\u5f55\u8fdbMST */\ndist[0] = 0;\nVCount ++;\nparent[0] = -1; /* \u5f53\u524d\u6811\u6839\u662f0 */\nwhile (1) {\nV = FindMinDist( Graph, dist );\n/* V = \u672a\u88ab\u6536\u5f55\u9876\u70b9\u4e2ddist\u6700\u5c0f\u8005 */\nif ( V==ERROR ) /* \u82e5\u8fd9\u6837\u7684V\u4e0d\u5b58\u5728 */\nbreak;   /* \u7b97\u6cd5\u7ed3\u675f */\n/* \u5c06V\u53ca\u76f8\u5e94\u7684\u8fb9&lt;parent[V], V&gt;\u6536\u5f55\u8fdbMST */\nE-&gt;V1 = parent[V];\nE-&gt;V2 = V;\nE-&gt;Weight = dist[V];\nInsertEdge( MST, E );\nTotalWeight += dist[V];\ndist[V] = 0;\nVCount++;\nfor( W=0; W&lt;Graph-&gt;Nv; W++ ) /* \u5bf9\u56fe\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9W */\nif ( dist[W]!=0 &amp;&amp; Graph-&gt;G[V][W]&lt;INFINITY ) {\n/* \u82e5W\u662fV\u7684\u90bb\u63a5\u70b9\u5e76\u4e14\u672a\u88ab\u6536\u5f55 */\nif ( Graph-&gt;G[V][W] &lt; dist[W] ) {\n/* \u82e5\u6536\u5f55V\u4f7f\u5f97dist[W]\u53d8\u5c0f */\ndist[W] = Graph-&gt;G[V][W]; /* \u66f4\u65b0dist[W] */\nparent[W] = V; /* \u66f4\u65b0\u6811 */\n}\n}\n} /* while\u7ed3\u675f*/\nif ( VCount &lt; Graph-&gt;Nv ) /* MST\u4e2d\u6536\u7684\u9876\u70b9\u4e0d\u5230|V|\u4e2a */\nTotalWeight = ERROR;\nreturn TotalWeight;   /* \u7b97\u6cd5\u6267\u884c\u5b8c\u6bd5\uff0c\u8fd4\u56de\u6700\u5c0f\u6743\u91cd\u548c\u6216\u9519\u8bef\u6807\u8bb0 */\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#kruskal","title":"Kruskal \u7b97\u6cd5","text":"<p>\u5c06\u6bcf\u4e2a\u9876\u70b9\u90fd\u770b\u4f5c\u4e00\u68f5\u6811\uff0c\u6536\u96c6\u7684\u662f\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u6536\u5165\u6784\u6210\u56de\u8def\u5c31\u4e0d\u6536\u5165\uff0c\u5982\u679c\u4e0d\u6784\u6210\u5c31\u6536\u5165\uff08\u4ece\u8fb9\u6743\u91cd\u6700\u5c0f\u5f00\u59cb\u6536\uff0c\u6536\u5230\u8fb9\u7684\u6570\u91cf\u4e3a|V|-1\u4e3a\u6b62\uff09</p> <ul> <li>\u7a00\u758f\u56fe\u4e00\u822c\u7528\u6b64\u7b97\u6cd5\uff08\u8fb9\u7684\u6570\u91cf\u548c\u9876\u70b9\u6570\u91cf\u7ea7\u5dee\u4e0d\u591a\uff09</li> <li>\\(T = O(|E|log|E|)\\) </li> </ul> \u4f2a\u7801<pre><code>void Kruskal ( Graph G )\n{   T = { } ;\nwhile ( T contains less than |V| \uf02d1 edges &amp;&amp; E is not empty ) {\nchoose a least cost edge (v, w) from E ;    /* DeleteMin */\ndelete (v, w) from E ;\nif  ( (v, w) does not create a cycle in T )     add (v, w) to T ;   /* Union / Find */\nelse\ndiscard (v, w) ;\n}\nif( T contains fewer than |V| - 1 edges )\nError ( \u201cNo spanning tree\u201d ) ;}\n</code></pre> code \u90bb\u63a5\u77e9\u9635\u5b58\u50a8<pre><code>/* \u90bb\u63a5\u8868\u5b58\u50a8 - Kruskal\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5 */\n/*-------------------- \u9876\u70b9\u5e76\u67e5\u96c6\u5b9a\u4e49 --------------------*/\ntypedef Vertex ElementType; /* \u9ed8\u8ba4\u5143\u7d20\u53ef\u4ee5\u7528\u975e\u8d1f\u6574\u6570\u8868\u793a */\ntypedef Vertex SetName;     /* \u9ed8\u8ba4\u7528\u6839\u7ed3\u70b9\u7684\u4e0b\u6807\u4f5c\u4e3a\u96c6\u5408\u540d\u79f0 */\ntypedef ElementType SetType[MaxVertexNum]; /* \u5047\u8bbe\u96c6\u5408\u5143\u7d20\u4e0b\u6807\u4ece0\u5f00\u59cb */\nvoid InitializeVSet( SetType S, int N )\n{ /* \u521d\u59cb\u5316\u5e76\u67e5\u96c6 */\nElementType X;\nfor ( X=0; X&lt;N; X++ ) S[X] = -1;\n}\nvoid Union( SetType S, SetName Root1, SetName Root2 )\n{ /* \u8fd9\u91cc\u9ed8\u8ba4Root1\u548cRoot2\u662f\u4e0d\u540c\u96c6\u5408\u7684\u6839\u7ed3\u70b9 */\n/* \u4fdd\u8bc1\u5c0f\u96c6\u5408\u5e76\u5165\u5927\u96c6\u5408 */\nif ( S[Root2] &lt; S[Root1] ) { /* \u5982\u679c\u96c6\u54082\u6bd4\u8f83\u5927 */\nS[Root2] += S[Root1];     /* \u96c6\u54081\u5e76\u5165\u96c6\u54082  */\nS[Root1] = Root2;\n}\nelse {                         /* \u5982\u679c\u96c6\u54081\u6bd4\u8f83\u5927 */\nS[Root1] += S[Root2];     /* \u96c6\u54082\u5e76\u5165\u96c6\u54081  */\nS[Root2] = Root1;\n}\n}\nSetName Find( SetType S, ElementType X )\n{ /* \u9ed8\u8ba4\u96c6\u5408\u5143\u7d20\u5168\u90e8\u521d\u59cb\u5316\u4e3a-1 */\nif ( S[X] &lt; 0 ) /* \u627e\u5230\u96c6\u5408\u7684\u6839 */\nreturn X;\nelse\nreturn S[X] = Find( S, S[X] ); /* \u8def\u5f84\u538b\u7f29 */\n}\nbool CheckCycle( SetType VSet, Vertex V1, Vertex V2 )\n{ /* \u68c0\u67e5\u8fde\u63a5V1\u548cV2\u7684\u8fb9\u662f\u5426\u5728\u73b0\u6709\u7684\u6700\u5c0f\u751f\u6210\u6811\u5b50\u96c6\u4e2d\u6784\u6210\u56de\u8def */\nVertex Root1, Root2;\nRoot1 = Find( VSet, V1 ); /* \u5f97\u5230V1\u6240\u5c5e\u7684\u8fde\u901a\u96c6\u540d\u79f0 */\nRoot2 = Find( VSet, V2 ); /* \u5f97\u5230V2\u6240\u5c5e\u7684\u8fde\u901a\u96c6\u540d\u79f0 */\nif( Root1==Root2 ) /* \u82e5V1\u548cV2\u5df2\u7ecf\u8fde\u901a\uff0c\u5219\u8be5\u8fb9\u4e0d\u80fd\u8981 */\nreturn false;\nelse { /* \u5426\u5219\u8be5\u8fb9\u53ef\u4ee5\u88ab\u6536\u96c6\uff0c\u540c\u65f6\u5c06V1\u548cV2\u5e76\u5165\u540c\u4e00\u8fde\u901a\u96c6 */\nUnion( VSet, Root1, Root2 );\nreturn true;\n}\n}\n/*-------------------- \u5e76\u67e5\u96c6\u5b9a\u4e49\u7ed3\u675f --------------------*/\n/*-------------------- \u8fb9\u7684\u6700\u5c0f\u5806\u5b9a\u4e49 --------------------*/\nvoid PercDown( Edge ESet, int p, int N )\n{ /* \u6539\u7f16\u4ee3\u78014.24\u7684PercDown( MaxHeap H, int p )    */\n/* \u5c06N\u4e2a\u5143\u7d20\u7684\u8fb9\u6570\u7ec4\u4e2d\u4ee5ESet[p]\u4e3a\u6839\u7684\u5b50\u5806\u8c03\u6574\u4e3a\u5173\u4e8eWeight\u7684\u6700\u5c0f\u5806 */\nint Parent, Child;\nstruct ENode X;\nX = ESet[p]; /* \u53d6\u51fa\u6839\u7ed3\u70b9\u5b58\u653e\u7684\u503c */\nfor( Parent=p; (Parent*2+1)&lt;N; Parent=Child ) {\nChild = Parent * 2 + 1;\nif( (Child!=N-1) &amp;&amp; (ESet[Child].Weight&gt;ESet[Child+1].Weight) )\nChild++;  /* Child\u6307\u5411\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u8f83\u5c0f\u8005 */\nif( X.Weight &lt;= ESet[Child].Weight ) break; /* \u627e\u5230\u4e86\u5408\u9002\u4f4d\u7f6e */\nelse  /* \u4e0b\u6ee4X */\nESet[Parent] = ESet[Child];\n}\nESet[Parent] = X;\n}\nvoid InitializeESet( LGraph Graph, Edge ESet )\n{ /* \u5c06\u56fe\u7684\u8fb9\u5b58\u5165\u6570\u7ec4ESet\uff0c\u5e76\u4e14\u521d\u59cb\u5316\u4e3a\u6700\u5c0f\u5806 */\nVertex V;\nPtrToAdjVNode W;\nint ECount;\n/* \u5c06\u56fe\u7684\u8fb9\u5b58\u5165\u6570\u7ec4ESet */\nECount = 0;\nfor ( V=0; V&lt;Graph-&gt;Nv; V++ )\nfor ( W=Graph-&gt;G[V].FirstEdge; W; W=W-&gt;Next )\nif ( V &lt; W-&gt;AdjV ) { /* \u907f\u514d\u91cd\u590d\u5f55\u5165\u65e0\u5411\u56fe\u7684\u8fb9\uff0c\u53ea\u6536V1&lt;V2\u7684\u8fb9 */\nESet[ECount].V1 = V;\nESet[ECount].V2 = W-&gt;AdjV;\nESet[ECount++].Weight = W-&gt;Weight;\n}\n/* \u521d\u59cb\u5316\u4e3a\u6700\u5c0f\u5806 */\nfor ( ECount=Graph-&gt;Ne/2; ECount&gt;=0; ECount-- )\nPercDown( ESet, ECount, Graph-&gt;Ne );\n}\nint GetEdge( Edge ESet, int CurrentSize )\n{ /* \u7ed9\u5b9a\u5f53\u524d\u5806\u7684\u5927\u5c0fCurrentSize\uff0c\u5c06\u5f53\u524d\u6700\u5c0f\u8fb9\u4f4d\u7f6e\u5f39\u51fa\u5e76\u8c03\u6574\u5806 */\n/* \u5c06\u6700\u5c0f\u8fb9\u4e0e\u5f53\u524d\u5806\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8fb9\u4ea4\u6362 */\nSwap( &amp;ESet[0], &amp;ESet[CurrentSize-1]);\n/* \u5c06\u5269\u4e0b\u7684\u8fb9\u7ee7\u7eed\u8c03\u6574\u6210\u6700\u5c0f\u5806 */\nPercDown( ESet, 0, CurrentSize-1 );\nreturn CurrentSize-1; /* \u8fd4\u56de\u6700\u5c0f\u8fb9\u6240\u5728\u4f4d\u7f6e */\n}\n/*-------------------- \u6700\u5c0f\u5806\u5b9a\u4e49\u7ed3\u675f --------------------*/\nint Kruskal( LGraph Graph, LGraph MST )\n{ /* \u5c06\u6700\u5c0f\u751f\u6210\u6811\u4fdd\u5b58\u4e3a\u90bb\u63a5\u8868\u5b58\u50a8\u7684\u56feMST\uff0c\u8fd4\u56de\u6700\u5c0f\u6743\u91cd\u548c */\nWeightType TotalWeight;\nint ECount, NextEdge;\nSetType VSet; /* \u9876\u70b9\u6570\u7ec4 */\nEdge ESet;    /* \u8fb9\u6570\u7ec4 */\nInitializeVSet( VSet, Graph-&gt;Nv ); /* \u521d\u59cb\u5316\u9876\u70b9\u5e76\u67e5\u96c6 */\nESet = (Edge)malloc( sizeof(struct ENode)*Graph-&gt;Ne );\nInitializeESet( Graph, ESet ); /* \u521d\u59cb\u5316\u8fb9\u7684\u6700\u5c0f\u5806 */\n/* \u521b\u5efa\u5305\u542b\u6240\u6709\u9876\u70b9\u4f46\u6ca1\u6709\u8fb9\u7684\u56fe\u3002\u6ce8\u610f\u7528\u90bb\u63a5\u8868\u7248\u672c */\nMST = CreateGraph(Graph-&gt;Nv);\nTotalWeight = 0; /* \u521d\u59cb\u5316\u6743\u91cd\u548c     */\nECount = 0;      /* \u521d\u59cb\u5316\u6536\u5f55\u7684\u8fb9\u6570 */\nNextEdge = Graph-&gt;Ne; /* \u539f\u59cb\u8fb9\u96c6\u7684\u89c4\u6a21 */\nwhile ( ECount &lt; Graph-&gt;Nv-1 ) {  /* \u5f53\u6536\u96c6\u7684\u8fb9\u4e0d\u8db3\u4ee5\u6784\u6210\u6811\u65f6 */\nNextEdge = GetEdge( ESet, NextEdge ); /* \u4ece\u8fb9\u96c6\u4e2d\u5f97\u5230\u6700\u5c0f\u8fb9\u7684\u4f4d\u7f6e */\nif (NextEdge &lt; 0) /* \u8fb9\u96c6\u5df2\u7a7a */\nbreak;\n/* \u5982\u679c\u8be5\u8fb9\u7684\u52a0\u5165\u4e0d\u6784\u6210\u56de\u8def\uff0c\u5373\u4e24\u7aef\u7ed3\u70b9\u4e0d\u5c5e\u4e8e\u540c\u4e00\u8fde\u901a\u96c6 */\nif ( CheckCycle( VSet, ESet[NextEdge].V1, ESet[NextEdge].V2 )==true ) {\n/* \u5c06\u8be5\u8fb9\u63d2\u5165MST */\nInsertEdge( MST, ESet+NextEdge );\nTotalWeight += ESet[NextEdge].Weight; /* \u7d2f\u8ba1\u6743\u91cd */\nECount++; /* \u751f\u6210\u6811\u4e2d\u8fb9\u6570\u52a01 */\n}\n}\nif ( ECount &lt; Graph-&gt;Nv-1 )\nTotalWeight = -1; /* \u8bbe\u7f6e\u9519\u8bef\u6807\u8bb0\uff0c\u8868\u793a\u751f\u6210\u6811\u4e0d\u5b58\u5728 */\nreturn TotalWeight;\n}\n</code></pre>"},{"location":"Course/FDS/Lec04/#dfs","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 | DFS","text":"<pre><code>void DFS ( Vertex V )  /* this is only a template */\n{   visited[ V ] = true;  /* mark this vertex to avoid cycles */\nfor ( each W adjacent to V )\nif ( !visited[ W ] )\nDFS( W );\n} /* T = O( |E| + |V| ) as long as adjacency lists are used */\n</code></pre> <p>\u662f\u5148\u5e8f\u904d\u5386\u7684\u4e00\u79cd\u63a8\u5e7f</p>"},{"location":"Course/FDS/Lec04/#binconnectivity","title":"\u53cc\u8fde\u901a | Binconnectivity","text":"<ul> <li>\u82e5\u4e00\u4e2a\u56fe\u4e0d\u662f\u53cc\u8fde\u901a\u7684\uff0c\u90a3\u4e48\u5c06\u5176\u5220\u9664\u540e\u56fe\u4e0d\u518d\u8fde\u901a\u7684\u9876\u70b9\u53eb\u505a\u5272\u70b9 (articulation point)</li> <li>\u82e5\u4e00\u4e2a\u8fde\u901a\u7684\u65e0\u5411\u56fe\u4e2d\u7684\u4efb\u4e00\u9876\u70b9\u5220\u9664\u540e\uff0c\u5269\u4e0b\u7684\u56fe\u4ecd\u7136\u8fde\u901a (\u5373\u8fde\u901a\u4e14\u65e0\u5272\u70b9) \uff0c\u5219\u79f0\u5176\u4e3a\u53cc\u8fde\u901a</li> <li>\u53cc\u8fde\u901a\u5206\u91cf (biconnected component) \u662f\u6781\u5927\u7684\u53cc\u8fde\u901a\u5b50\u56fe</li> </ul> \u5177\u6709\u5272\u70b9 C \u548c D \u7684\u56fe <ul> <li> <p>Tarjan\u7b97\u6cd5</p> \u5bf9\u9876\u70b9\u7684 Num \u8d4b\u503c\u4f8b\u7a0b <pre><code>/* Assign Num and compute Parents */\nvoid AssignNum(Vertex V)\n{\nVertex W;\nNum[V] = Counter ++;\nVisited[V] = True;\nfor each W adjacent to V\nif(!Visited[W])\n{\nParent[W] = V;\nAssignNum(W);\n}\n}\n</code></pre> \u901a\u8fc7 DFS \u5efa\u7acb\u7684\u6700\u5c0f\u751f\u6210\u6811 <p> </p> <p>back edge: ( \\(u, v\\) ) \\(\\notin\\) tree and \\(u\\) (or \\(v\\) ) is an ancestor of \\(v\\) (or \\(u\\) ) Note: If \\(u\\) is an ancestor of \\(v\\) , then Num( \\(u\\) ) &lt; Num( \\(v\\) )</p> <ul> <li>Num[v] \u8868\u793a v \u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\u6233\uff0c\u5373 DFS \u65f6\u7b2c\u51e0\u4e2a\u88ab\u8bbf\u95ee\uff08\u4ece0\u5f00\u59cb\uff09</li> <li>\u8ffd\u6eaf\u503c low[x]<ul> <li>\u5bf9\u4e8e\u56fe\u4e2d\u4ece x \u5230 y \u7684\u8fb9 : </li> <li>\u5982\u679c &lt; x, y &gt; \u5728\u6811\u4e0a\uff0c\u5219 low[x] = min(Num[x], low[y])</li> <li>\u5982\u679c &lt; x, y &gt; \u4e0d\u5728\u6811\u4e0a\uff0c\u5219 low[x] = min(Num[x], Num[y])</li> </ul> </li> <li>\u5bfb\u627e\u5272\u70b9\uff1a<ul> <li>\u5982\u679c u \u662f root\uff0c\u5219 u \u662f\u5272\u70b9\u5f53\u4e14\u4ec5\u5f53 u \u6709\u81f3\u5c11\u4e24\u4e2a\u513f\u5b50</li> <li>\u5982\u679c u \u4e0d\u662f root\uff0c\u5219 u \u662f\u5272\u70b9\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a\u513f\u5b50 v\uff0c\u6ee1\u8db3 Num[u] \\(\\leq\\) low[v]</li> </ul> </li> <li>\u8ba1\u7b97 Low \u5e76\u68c0\u9a8c\u662f\u5426\u5272\u70b9 (\u5ffd\u7565\u5bf9\u6839\u7684\u68c0\u9a8c)  <pre><code>/* Assign Low; also check for articulation points */\nvoid AssignLow(Vertex V)\n{\nVertex W;\nLow[V] = Num[V];    /* Rule 1 */\nfor each W adjacent to V\n{\nif(Num[W] &gt; Num[V]) /* Forward edge */\n{\nAssignLow(W);\nif(Low[W] &gt;= Num[V])\nprintf(\"%v is an articulation point\\n\", v);\nLow[V] = Min(Low[V], Low[W]);\n}\nelse if(Parent[V] != W) /* Back edge */\nLow[V] = Min(Low[V], Num[W]);   /* Rule 2 */\n}\n}\n</code></pre></li> <li>\u5728\u4e00\u6b21 DFS \u4e2d\u5bf9\u5272\u70b9\u7684\u68c0\u6d4b (\u5ffd\u7565\u5bf9\u6839\u7684\u68c0\u6d4b) <pre><code>void FindArt(Vertex V)\n{\nVertex W;\nVisited[V] = True;\nLow[V] = Num[V] = Counter ++;\nfor(each W adjacent to V)\n{\nif(!Visited[W])\n{\nParent[W] = V;\nFindArt(W);\nif(Low[W] &gt;= Num[V])\n{\nprintf(\"%v is an articulation point\\n\", v);\n}\nLow[V] = Min(Low[V], Low[W]);\n}\nelse\nif(Parent[V] != W)\n{\nLow[V] = Min(Low[V], Num[W]);\n}\n}\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"Course/FDS/Lec04/#_10","title":"\u6b27\u62c9\u56de\u8def &amp; \u6b27\u62c9\u8def\u5f84","text":"<ul> <li>\u6b27\u62c9\u8def\u5f84 (Euler path | Euler tour) \u2014\u2014 \u4e00\u7b14\u753b | \u5305\u542b\u6240\u6709\u8fb9\u7684\u7b80\u5355\u8def\u5f84<ul> <li>\u5982\u679c\u6b63\u597d\u6709\u4e24\u4e2a\u5ea6\u4e3a\u5947\u6570\u7684\u9876\u70b9\uff0c\u6b27\u62c9\u8def\u5f84\u5c31\u662f\u53ef\u80fd\u7684\u3002\u5fc5\u987b\u4ece\u4e00\u4e2a\u5947\u5ea6\u7684\u9876\u70b9\u5f00\u59cb \u201c\u753b\u201d</li> </ul> </li> <li>\u6b27\u62c9\u56de\u8def (Euler circuit) \u2014\u2014 \u4e00\u7b14\u753b\u5e76\u4e14\u7ed3\u675f\u70b9\u548c\u8d77\u59cb\u70b9\u91cd\u5408 | \u5305\u542b\u6240\u6709\u8fb9\u7684\u7b80\u5355\u73af<ul> <li>\u53ea\u6709\u5f53\u56fe\u8fde\u901a\u4e14\u6bcf\u4e2a\u9876\u70b9\u5ea6\u4e3a\u5076\u6570\uff0c\u6b27\u62c9\u56de\u8def\u624d\u6709\u53ef\u80fd</li> </ul> </li> <li>\u5bf9\u65e0\u5411\u56fe<ul> <li>\u6b27\u62c9\u56de\u8def\u7684\u5224\u5b9a: \u56fe\u8fde\u901a\u4e14\u6240\u6709\u9876\u70b9\u7684\u5ea6\u4e3a\u5076\u6570</li> <li>\u6b27\u62c9\u8def\u5f84\u7684\u5224\u5b9a: \u56fe\u8fde\u901a\u4e14\u6709\u4e14\u4ec5\u6709\u4e24\u4e2a\u9876\u70b9\u7684\u5ea6\u6570\u662f\u5947\u6570</li> </ul> </li> <li>\u6709\u5411\u56fe<ul> <li>\u6b27\u62c9\u56de\u8def\u7684\u5224\u5b9a: \u5f31\u8fde\u901a\u4e14\u6240\u6709\u9876\u70b9\u7684\u51fa\u5ea6\u7b49\u4e8e\u5165\u5ea6</li> <li>\u6b27\u62c9\u8def\u5f84\u7684\u5224\u5b9a: \u5f31\u8fde\u901a\u4e14\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\u6bd4\u5165\u5ea6\u5927 1 \u53ca\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u6bd4\u51fa\u5ea6\u5927 1\uff0c\u5176\u4f59\u9876\u70b9\u7684\u51fa\u5ea6\u7b49\u4e8e\u5165\u5ea6 <p>\u5f31\u8fde\u901a \u2014\u2014 \u5c06\u6709\u5411\u56fe\u7684\u6240\u6709\u6709\u5411\u8fb9\u66ff\u6362\u4e3a\u65e0\u5411\u8fb9\u5f97\u5230\u7684\u56fe\u662f\u8fde\u901a</p> </li> </ul> </li> <li>DFS \u904d\u5386\u6574\u5f20\u56fe\u5373\u53ef\u6c42\u5f97\u8def\u5f84</li> </ul>"},{"location":"Course/FDS/Lec05/","title":"\u6392\u5e8f | Sort","text":""},{"location":"Course/FDS/Lec05/#_1","title":"\u7b80\u5355\u6392\u5e8f","text":"<p>\u9884\u5907\u77e5\u8bc6</p> <p><code>void XSort(ElementType A[], int N)</code></p> <ol> <li>\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u8ba8\u8bba\u4ece\u5c0f\u5230\u5927\u7684\u6574\u6570\u6392\u5e8f</li> <li>N\u662f\u6b63\u6574\u6570</li> <li>\u53ea\u8ba8\u8bba\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\uff08&gt; = &lt; \u6709\u5b9a\u4e49\uff09</li> <li>\u53ea\u8ba8\u8bba\u5185\u90e8\u6392\u5e8f</li> <li>\u7a33\u5b9a\u6027\uff1a\u4efb\u610f\u4e24\u4e2a\u76f8\u7b49\u7684\u6570\u636e\uff0c\u6392\u5e8f\u524d\u540e\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d1\u751f\u6539\u53d8</li> <li>\u6ca1\u6709\u4e00\u79cd\u6392\u5e8f\u662f\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u8868\u73b0\u6700\u597d\u7684</li> </ol> <ul> <li> <p>\u63d2\u5165\u6392\u5e8f</p> <p>code</p> <pre><code>void InsertionSort( ElementType A[], int N )\n{ int P, i;\nElementType Tmp;\nfor(P = 1; P &lt; N; P++) {\nTmp = A[P];     /* \u53d6\u51fa\u672a\u6392\u5e8f\u5e8f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20*/\nfor(i = P; i &gt; 0 &amp;&amp; A[i-1] &gt; Tmp; i--)\nA[i] = A[i-1];  /*\u4f9d\u6b21\u4e0e\u5df2\u6392\u5e8f\u5e8f\u5217\u4e2d\u5143\u7d20\u6bd4\u8f83\u5e76\u53f3\u79fb*/\nA[i] = Tmp;     /* \u653e\u8fdb\u5408\u9002\u7684\u4f4d\u7f6e */\n}\n}\n</code></pre> <ul> <li>\u6700\u597d\u60c5\u51b5: \u8f93\u5165 A[] \u662f\u6709\u5e8f\u7684, \\(T(N) = O(N)\\)</li> <li>\u6700\u574f\u60c5\u51b5: \u8f93\u5165 A[] \u662f\u9006\u5e8f\u7684, \\(T(N) = O(N^2)\\)</li> </ul> </li> </ul> \u5f15\u7533\u2013\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u754c <ul> <li>\u5bf9\u4e8e\u4e0b\u6807 i &lt; j, \u5982\u679c A[i] &gt; A[j], \u5219\u79f0 (i, j) \u662f\u4e00\u5bf9\u9006\u5e8f\u5bf9 (inversion)</li> <li>\u5192\u6ce1\u548c\u63d2\u5165\u6392\u5e8f\u6bcf\u6b21\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u90fd\u6b63\u597d\u6d88\u53bb\u4e00\u4e2a\u9006\u5e8f\u5bf9<ul> <li>\u63d2\u5165\u6392\u5e8f: \\(T(N, I) = O(N + I)\\)</li> <li>\u5176\u4e2d I \u662f\u539f\u59cb\u5e8f\u5217\u4e2d\u9006\u5e8f\u5bf9\u7684\u6570\u91cf</li> </ul> </li> <li>\u5b9a\u7406:<ul> <li>\u4efb\u610f N \u4e2a\u4e0d\u540c\u5143\u7d20\u7ec4\u6210\u7684\u5e8f\u5217\u5e73\u5747\u5177\u6709 \\(\\frac{N\uff08N-1\uff09}{4}\\) \u4e2a\u9006\u5e8f\u5bf9</li> <li>\u4efb\u4f55\u4ec5\u4ee5\u4ea4\u6362\u76f8\u90bb\u5143\u7d20\u6765\u6392\u5e8f\u7684\u7b97\u6cd5\uff0c\u5176\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\Omega (N^2)\\) ( \\(\\Omega\\) \u6307\u7684\u662f\u4e0b\u754c)</li> </ul> </li> </ul> <p>\u8981\u63d0\u9ad8\u7b97\u6cd5\u6548\u7387\uff0c\u9700\u8981   1. \u6bcf\u6b21\u6d88\u53bb\u4e0d\u6b62\u4e00\u5bf9\u9006\u5e8f\u5bf9   2. \u6bcf\u6b21\u5c3d\u91cf\u4ea4\u6362\u76f8\u9694\u8f83\u8fdc\u7684\u5143\u7d20</p>"},{"location":"Course/FDS/Lec05/#shell-sort","title":"\u5e0c\u5c14\u6392\u5e8f | Shell Sort","text":"<p>Abstract</p> <ul> <li>\u5b9a\u4e49\u589e\u91cf\u5e8f\u5217 \\(h_t &gt; h_{t-1} &gt; \u00b7\u00b7\u00b7 &gt; h_1 = 1\\)</li> <li>\u5bf9\u6bcf\u4e2a \\(h_t\\) \u8fdb\u884c \u201c\\(h_t\\) -\u95f4\u9694\u201d \u6392\u5e8f </li> </ul> <p>\u201c\\(h_t\\) -\u95f4\u9694\u201d \u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u5728\u6267\u884c \u201c\\(h_{t-1}\\) -\u95f4\u9694\u201d \u6392\u5e8f\u540e\uff0c\u4ecd\u7136\u662f \u201c\\(h_t\\) -\u95f4\u9694\u201d \u6709\u5e8f\u7684</p>"},{"location":"Course/FDS/Lec05/#_2","title":"\u5e0c\u5c14\u589e\u91cf\u5e8f\u5217","text":"<ul> <li>\\(h_t = \\lfloor N / 2\\rfloor\\) , \\(h_k = \\lfloor h_k+1 / 2 \\rfloor\\) </li> <li>\u6700\u574f\u60c5\u51b5: \u53ea\u5728 1-sort \u6392\u5e8f, \\(T(N) = O(N^2)\\)</li> </ul> <pre><code>void Shellsort( ElementType A[ ], int N ) { int  i, j, Increment; ElementType  Tmp; for( Increment = N / 2; Increment &gt; 0; Increment /= 2 )  /*h sequence */\nfor( i = Increment; i &lt; N; i++ ) { /* insertion sort */\nTmp = A[ i ]; for ( j = i; j &gt;= Increment; j - = Increment ) if( Tmp &lt; A[ j - Increment ] ) A[ j ] = A[ j - Increment ]; else break; A[ j ] = Tmp; } /* end for-I and for-Increment loops */\n}\n</code></pre>"},{"location":"Course/FDS/Lec05/#_3","title":"\u66f4\u591a\u589e\u91cf\u5e8f\u5217","text":"<p>Question</p> <p>\u5f53\u589e\u91cf\u5143\u7d20\u4e0d\u4e92\u8d28\u65f6\uff0c\u5bfc\u81f4\u5c0f\u589e\u91cf\u53ef\u80fd\u4e0d\u8d77\u4f5c\u7528, \u5982: </p> <ol> <li>Hibbard \u589e\u91cf\u5e8f\u5217<ol> <li>\\(h_k = 2^k - 1\\) \u2014\u2014 \u76f8\u90bb\u5143\u7d20\u4e92\u8d28</li> <li>\u6700\u574f\u60c5\u51b5: \\(T(N) = \\Theta (N^{3/2})\\)</li> <li>\u731c\u60f3: \\(T_{avg}(N) =O(N^{5/4})\\)</li> </ol> </li> <li>Sedgewick \u589e\u91cf\u5e8f\u5217 \u2014\u2014  { 1\uff0c5\uff0c19\uff0c41\uff0c109\uff0c\u00b7\u00b7\u00b7 }<ol> <li>\\(9\\times 4^i - 9\\times 2^i + 1\\) \u6216 \\(4^i - 3\\times 2^i + 1\\) </li> <li>\u731c\u60f3: \\(T_{avg}(N) = O(N^{7/6})\\), \\(T_{worst}(N) = O(N^{4/3})\\) </li> </ol> </li> </ol> <p>\u5f53\u5143\u7d20\u6570\u91cf\u8f83\u5927\u65f6\uff0c\u91c7\u7528\u5e0c\u5c14\u6392\u5e8f + Sedgewick \u589e\u91cf\u5e8f\u5217\u8f83\u4e3a\u9ad8\u6548</p>"},{"location":"Course/FDS/Lec05/#_4","title":"\u5806\u6392\u5e8f","text":"<ul> <li>\u4f7f\u7528\u5806\u7ed3\u6784\u6392\u5e8f</li> <li>\u7b97\u6cd5\u4e00: \u5c06\u5143\u7d20\u63d2\u5165\u5806\u4e2d\u518d\u4f9d\u6b21 DeleteMin <pre><code>void Heap_Sort(ElementType A[], int N)\n{\nint i;\nBuildHeap(A);   /* O(N) */\nfor(i = 0; i &lt; N; i++)\n{\nTempA[i] = DeleteMin(A);    /* O(logN) */\n}\nfor(i = 0; i &lt; N; i++)  /* O(N) */\n{\nA[i] = TempA[i];\n}\n}\n</code></pre><ul> <li>\\(T(N) = O(N logN)\\)</li> <li>\u4f46\u9700\u8981\u989d\u5916\u7684 \\(O(N)\\) \u7a7a\u95f4\uff0c\u5e76\u4e14\u590d\u5236\u5143\u7d20\u9700\u8981\u65f6\u95f4</li> </ul> </li> <li>\u7b97\u6cd5\u4e8c: \u4ee5\u7ebf\u6027\u65f6\u95f4\u5efa\u7acb\u5806(Percolate), \u518d\u5faa\u73af\u5c06\u5806\u9876\u5143\u7d20\u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u518d Percolate<ul> <li>\u4ee5\u6700\u5927\u5806\u4e3a\u4f8b: <pre><code>void Heap_Sort(ElementType A[], int N)\n{\nfor(i = N/2; i &gt;= 0; i--)   /* BuildHeap */\n{\nPercDown(A, i, N);\n}\nfor(i = N-1; i &gt; 0; i--)    /* \u76f8\u5f53\u4e8e DeleteMax */\n{\nSwap(&amp;A[0], &amp;A[i]);\nPercDown(A, 0, i);\n}\n}\n</code></pre></li> </ul> </li> <li>\u5806\u6392\u5e8f\u5904\u7406 N \u4e2a\u4e0d\u540c\u5143\u7d20\u7684\u968f\u673a\u6392\u5217\u7684\u5e73\u5747\u6bd4\u8f83\u6b21\u6570\u4e3a \\(2NlogN - O(NloglogN)\\) </li> </ul> <p>\u867d\u7136\u5806\u6392\u5e8f\u7ed9\u51fa\u6700\u4f73\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u5b9e\u9645\u6548\u679c\u4e0d\u5982\u5e0c\u5c14\u6392\u5e8f + Sedgewick \u589e\u91cf</p> \u8865\u5168\u51fd\u6570 <pre><code>void Swap( ElementType *a, ElementType *b )\n{\nElementType t = *a; *a = *b; *b = t;\n}\nvoid PercDown( ElementType A[], int p, int N )\n{ /* \u5c06N\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u4e2d\u4ee5A[p]\u4e3a\u6839\u7684\u5b50\u5806\u8c03\u6574\u4e3a\u6700\u5927\u5806 */\nint Parent, Child;\nElementType X;\nX = A[p]; /* \u53d6\u51fa\u6839\u7ed3\u70b9\u5b58\u653e\u7684\u503c */\nfor( Parent=p; (Parent*2+1)&lt;N; Parent=Child ) {\nChild = Parent * 2 + 1;\nif( (Child!=N-1) &amp;&amp; (A[Child]&lt;A[Child+1]) )\nChild++;  /* Child\u6307\u5411\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u8f83\u5927\u8005 */\nif( X &gt;= A[Child] ) break; /* \u627e\u5230\u4e86\u5408\u9002\u4f4d\u7f6e */\nelse  /* \u4e0b\u6ee4X */\nA[Parent] = A[Child];\n}\nA[Parent] = X;\n}\n</code></pre>"},{"location":"Course/FDS/Lec05/#_5","title":"\u5f52\u5e76\u6392\u5e8f","text":"<ul> <li>\u5173\u952e\u662f\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868\u53d8\u6210\u4e00\u4e2a\u6709\u5e8f\u5217\u8868 (\u53ef\u4ee5\u9012\u5f52\u8fdb\u884c\u3001\u5206\u800c\u6cbb\u4e4b)</li> <li>\u9012\u5f52\u7b97\u6cd5: <ul> <li>\u5206\u800c\u6cbb\u4e4b  </li> <li>\\(T(N) = T(N/2) + T(N/2) + O(N)\\) \\(\\rightarrow\\) \\(T(N) = O(NlogN)\\)</li> </ul> code <pre><code>/* L = \u5de6\u8fb9\u8d77\u59cb\u4f4d\u7f6e, R = \u53f3\u8fb9\u8d77\u59cb\u4f4d\u7f6e, RightEnd = \u53f3\u8fb9\u7ec8\u70b9\u4f4d\u7f6e*/\nvoid Merge( ElementType A[], ElementType TmpA[], int L, int R, int RightEnd )\n{ /* \u5c06\u6709\u5e8f\u7684A[L]~A[R-1]\u548cA[R]~A[RightEnd]\u5f52\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217 */\nint LeftEnd, NumElements, Tmp;\nint i;\nLeftEnd = R - 1; /* \u5de6\u8fb9\u7ec8\u70b9\u4f4d\u7f6e */\nTmp = L;         /* \u6709\u5e8f\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e */\nNumElements = RightEnd - L + 1;\nwhile( L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd ) {\nif ( A[L] &lt;= A[R] )\nTmpA[Tmp++] = A[L++]; /* \u5c06\u5de6\u8fb9\u5143\u7d20\u590d\u5236\u5230TmpA */\nelse\nTmpA[Tmp++] = A[R++]; /* \u5c06\u53f3\u8fb9\u5143\u7d20\u590d\u5236\u5230TmpA */\n}\nwhile( L &lt;= LeftEnd )\nTmpA[Tmp++] = A[L++]; /* \u76f4\u63a5\u590d\u5236\u5de6\u8fb9\u5269\u4e0b\u7684 */\nwhile( R &lt;= RightEnd )\nTmpA[Tmp++] = A[R++]; /* \u76f4\u63a5\u590d\u5236\u53f3\u8fb9\u5269\u4e0b\u7684 */\nfor( i = 0; i &lt; NumElements; i++, RightEnd -- )\nA[RightEnd] = TmpA[RightEnd]; /* \u5c06\u6709\u5e8f\u7684TmpA[]\u590d\u5236\u56deA[] */\n}\nvoid Msort( ElementType A[], ElementType TmpA[], int L, int RightEnd )\n{ /* \u6838\u5fc3\u9012\u5f52\u6392\u5e8f\u51fd\u6570 */ int Center;\nif ( L &lt; RightEnd ) {\nCenter = (L+RightEnd) / 2;\nMsort( A, TmpA, L, Center );              /* \u9012\u5f52\u89e3\u51b3\u5de6\u8fb9 */ Msort( A, TmpA, Center+1, RightEnd );     /* \u9012\u5f52\u89e3\u51b3\u53f3\u8fb9 */  Merge( A, TmpA, L, Center+1, RightEnd );  /* \u5408\u5e76\u4e24\u6bb5\u6709\u5e8f\u5e8f\u5217 */ }\n}\nvoid MergeSort( ElementType A[], int N )\n{ /* \u5f52\u5e76\u6392\u5e8f */\nElementType *TmpA;\nTmpA = (ElementType *)malloc(N*sizeof(ElementType));\nif ( TmpA != NULL ) {\nMsort( A, TmpA, 0, N-1 );\nfree( TmpA );\n}\nelse printf( \"\u7a7a\u95f4\u4e0d\u8db3\" );\n}\n</code></pre> </li> <li> <p>\u975e\u9012\u5f52\u7b97\u6cd5: </p> code <pre><code>/* \u8fd9\u91ccMerge\u51fd\u6570\u5728\u9012\u5f52\u7248\u672c\u4e2d\u7ed9\u51fa */\n/* length = \u5f53\u524d\u6709\u5e8f\u5b50\u5217\u7684\u957f\u5ea6*/\nvoid Merge_pass( ElementType A[], ElementType TmpA[], int N, int length )\n{ /* \u4e24\u4e24\u5f52\u5e76\u76f8\u90bb\u6709\u5e8f\u5b50\u5217 */\nint i, j;\nfor ( i=0; i &lt;= N-2*length; i += 2*length )\nMerge( A, TmpA, i, i+length, i+2*length-1 );\nif ( i+length &lt; N ) /* \u5f52\u5e76\u6700\u540e2\u4e2a\u5b50\u5217*/\nMerge( A, TmpA, i, i+length, N-1);\nelse /* \u6700\u540e\u53ea\u52691\u4e2a\u5b50\u5217*/\nfor ( j = i; j &lt; N; j++ ) TmpA[j] = A[j];\n}\nvoid Merge_Sort( ElementType A[], int N )\n{ int length; ElementType *TmpA;\nlength = 1; /* \u521d\u59cb\u5316\u5b50\u5e8f\u5217\u957f\u5ea6*/\nTmpA = malloc( N * sizeof( ElementType ) );\nif ( TmpA != NULL ) {\nwhile( length &lt; N ) {\nMerge_pass( A, TmpA, N, length );\nlength *= 2;\nMerge_pass( TmpA, A, N, length );\nlength *= 2;\n}\nfree( TmpA );\n}\nelse printf( \"\u7a7a\u95f4\u4e0d\u8db3\" );\n}\n</code></pre> </li> </ul> <p>\u5f52\u5e76\u6392\u5e8f\u5728\u5916\u6392\u5e8f\u4e2d\u8f83\u4e3a\u6709\u7528</p>"},{"location":"Course/FDS/Lec05/#_6","title":"\u5feb\u901f\u6392\u5e8f","text":"<pre><code>void Quicksort(ElementType A[], int N)\n{\nif(N &lt; 2)\nreturn;\npivot = \u4ece A[] \u4e2d\u9009\u4e00\u4e2a\u4e3b\u5143;\n\u5c06 S = { A[] \\ pivot } \u5206\u6210\u4e24\u4e2a\u72ec\u7acb\u5b50\u96c6 A1 \u548c A2;\nA[] = Quicksort(A1, N1) + {pivot} + Quicksort(A2, N2);\n}\n</code></pre> <p>\u5206\u800c\u6cbb\u4e4b:  \u5feb\u901f\u6392\u5e8f\u7684\u6700\u597d\u60c5\u51b5 \u2014\u2014 \u6bcf\u6b21\u6b63\u597d\u4e2d\u5206 \u2014\u2014 \\(T(N) = O(NlogN)\\) \u4e24\u4e2a\u4e3b\u8981\u6b65\u9aa4: \u9009\u4e3b\u5143\u3001\u5b50\u96c6\u5212\u5206</p> <ul> <li>\u4e00\u6b21\u5212\u5206\u8fc7\u7a0b: </li> </ul>      \u5047\u8bbe\u5bf9\u4ee5\u4e0b\u5341\u4e2a\u6570\u5b57\u5feb\u901f\u6392\u5e8f      6 1 2 7 9 3 4 5 10 8      \u5047\u5982\u9009\u53d6\u7b2c\u4e00\u4e2a\u6570\u5b57\u4e3a pivot, \u5373 pivot = 6, \u8981\u4f7f\u5f97 6 \u5de6\u8fb9\u7684\u6570\u5b57\u90fd &lt;= 6, \u5de6\u8fb9\u7684\u6570\u90fd &gt;= 6. \u90a3\u4e48\u5b9a\u4e49\u5de6\u8fb9\u4e00\u4e2a \"\u54e8\u5175\" i (i \u4ece 1 \u5f00\u59cb), \u53f3\u8fb9\u4e3a j      6 1 2 7 9 3 4 5 10 8 i j      \u9996\u5148\u4ece\u53f3\u5411\u5de6\u79fb\u52a8 j \u76f4\u5230\u627e\u5230\u5c0f\u4e8e 6 \u7684\u6570, \u518d\u4ece\u5de6\u5411\u53f3\u627e\u5230\u5927\u4e8e 6 \u7684\u6570      6 1 2 7 9 3 4 5 10 8 i j      \u4ea4\u6362\u4ed6\u4eec      6 1 2 5 9 3 4 7 10 8 i j      \u79fb\u52a8 \"\u54e8\u5175\" (\u63d0\u9192 : \u6bcf\u6b21\u5fc5\u987b j \u5148\u51fa\u53d1)      6 1 2 5 9 3 4 7 10 8 i j 6 1 2 5 9 3 4 7 10 8 i j      \u4ea4\u6362      6 1 2 5 4 3 9 7 10 8 i j      \u7ee7\u7eed\u79fb\u52a8, \u6b64\u65f6 j \u5411\u5de6\u79fb\u52a8\u53d1\u73b0 3 &lt; 6 \u505c\u4e0b. \u79fb\u52a8 i , \u6b64\u65f6 i \u4e0e j \u76f8\u9047 \u2014\u2014&gt; \u7b2c\u4e00\u6b21 \"\u63a2\u6d4b\" \u7ed3\u675f\uff0c\u5c06 pivot = 6 \u548c 3 \u4ea4\u6362      3 1 2 5 4 6 9 7 10 8 i j      \u968f\u540e\u4ee5 6 \u4e3a\u5206\u754c\u70b9\u62c6\u5206\u6210\u4e24\u4e2a\u5e8f\u5217 (\"3 1 2 5 4\" &amp; \"9 7 10 8\") \u518d\u4f9d\u6b21 \"\u63a2\u6d4b\" \u00b7\u00b7\u00b7"},{"location":"Course/FDS/Lec05/#_7","title":"\u9009\u4e3b\u5143","text":"<ul> <li>\u9519\u8bef\u65b9\u6cd5: pivot = arr[0] (\u5bf9\u4e8e\u5df2\u7ecf\u6392\u5217\u597d\u987a\u5e8f\u7684\u7ec4\u5408\u4ecd\u4f1a\u6d88\u8017\u6389 \\(O(N^2)\\) \u7684\u65f6\u95f4)</li> <li>\u5b89\u5168\u65b9\u6cd5: pivot = random element in arr (\u989d\u5916\u5e26\u6765\u7684\u5f00\u9500: \u968f\u673a\u6570\u7684\u751f\u6210)</li> <li> <p>\u4e09\u6570\u4e2d\u503c\u5206\u5272 | Median-of-Partitioning: pivot = median(left + center + right)</p> Median3 <pre><code>ElementType Median3(ElementType A[], int Left, int Right)\n{\nint Center = (Left + Right) / 2;\nif(A[Left] &gt; A[Center])\n{\nSwap(&amp;A[Left], &amp;A[Center]);\n}\nelse if(A[Left] &gt; A[Right])\n{\nSwap(&amp;A[Left], &amp;A[Right]);\n}\nelse if(A[Right] &lt; A[Center])\n{\nSwap(&amp;A[Right], &amp;A[Center]);\n}\n/* A[Left] &lt;= A[Center] &lt;= A[Right] */\nSwap(&amp;A[Center], &amp;A[Right-1]);  //\u5c06 pivot \u85cf\u5230\u53f3\u8fb9\n/* \u53ea\u9700\u8981\u8003\u8651 A[Left+1] ... A[Right-2] */\nreturn A[Right-1];  /* \u8fd4\u56de pivot */\n}\n</code></pre> </li> </ul>"},{"location":"Course/FDS/Lec05/#_8","title":"\u5b50\u96c6\u5212\u5206","text":"<ul> <li>\u5f53\u6709\u5143\u7d20\u6b63\u597d\u7b49\u4e8e pivot \u65f6<ul> <li>\u505c\u4e0b\u6765\u4ea4\u6362 \u221a</li> <li>\u4e0d\u7406\u4ed6\uff0c\u7ee7\u7eed\u79fb\u52a8\u6307\u9488 \u00d7</li> </ul> </li> </ul> \u8865\u5145 <ul> <li>\u5c0f\u6570\u7ec4<ul> <li>\u5bf9\u4e8e N (N \\(\\le\\) 20), \u5feb\u901f\u6392\u5e8f\u6162\u4e8e\u63d2\u5165\u6392\u5e8f</li> <li>\u53ef\u4ee5\u5728\u9012\u5f52\u5230 N \u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\u5c06\u5feb\u901f\u6392\u5e8f\u66f4\u6539\u4e3a\u63d2\u5165\u6392\u5e8f</li> </ul> </li> <li>\u590d\u6742\u5ea6 \u2013 \\(T(N) = T(i) + T(N-i-1) + cN\\)<ul> <li>\\(T_{worst}(N) = T(N-1) + cN ~ \\rightarrow ~ T(N) = O(N^2)\\)</li> <li>\\(T_{best}(N) = 2T(N/2) + cN ~ \\rightarrow ~ T(N) = O(NlogN)\\)</li> <li>Average Case: <ul> <li>\u5047\u8bbe\u5bf9\u6bcf\u4e2a i, \\(T(i)\\) \u7684\u5e73\u5747\u503c\u662f \\(\\frac{1}{N}[\\sum\\limits_{j=0}^{N-1} T(j)]\\) </li> <li>\\(T(N) = \\frac{2}{N}[\\sum\\limits_{j=0}^{N-1} T(j)] + cN ~ \\rightarrow ~ T(N) = O(NlogN)\\)</li> </ul> </li> </ul> </li> </ul> \u5b8c\u6574\u7b97\u6cd5 <pre><code>/* \u5feb\u901f\u6392\u5e8f */\nElementType Median3( ElementType A[], int Left, int Right )\n{ int Center = (Left+Right) / 2;\nif ( A[Left] &gt; A[Center] )\nSwap( &amp;A[Left], &amp;A[Center] );\nif ( A[Left] &gt; A[Right] )\nSwap( &amp;A[Left], &amp;A[Right] );\nif ( A[Center] &gt; A[Right] )\nSwap( &amp;A[Center], &amp;A[Right] );\n/* \u6b64\u65f6A[Left] &lt;= A[Center] &lt;= A[Right] */\nSwap( &amp;A[Center], &amp;A[Right-1] ); /* \u5c06\u57fa\u51c6Pivot\u85cf\u5230\u53f3\u8fb9*/\n/* \u53ea\u9700\u8981\u8003\u8651A[Left+1] \u2026 A[Right-2] */\nreturn  A[Right-1];  /* \u8fd4\u56de\u57fa\u51c6Pivot */\n}\nvoid Qsort( ElementType A[], int Left, int Right )\n{ /* \u6838\u5fc3\u9012\u5f52\u51fd\u6570 */ int Pivot, Cutoff, Low, High;\nif ( Cutoff &lt;= Right-Left ) { /* \u5982\u679c\u5e8f\u5217\u5143\u7d20\u5145\u5206\u591a\uff0c\u8fdb\u5165\u5feb\u6392 */\nPivot = Median3( A, Left, Right ); /* \u9009\u57fa\u51c6 */ Low = Left; High = Right-1;\nwhile (1) { /*\u5c06\u5e8f\u5217\u4e2d\u6bd4\u57fa\u51c6\u5c0f\u7684\u79fb\u5230\u57fa\u51c6\u5de6\u8fb9\uff0c\u5927\u7684\u79fb\u5230\u53f3\u8fb9*/\nwhile ( A[++Low] &lt; Pivot ) ;\nwhile ( A[--High] &gt; Pivot ) ;\nif ( Low &lt; High ) Swap( &amp;A[Low], &amp;A[High] );\nelse break;\n}\nSwap( &amp;A[Low], &amp;A[Right-1] );   /* \u5c06\u57fa\u51c6\u6362\u5230\u6b63\u786e\u7684\u4f4d\u7f6e */ Qsort( A, Left, Low-1 );    /* \u9012\u5f52\u89e3\u51b3\u5de6\u8fb9 */ Qsort( A, Low+1, Right );   /* \u9012\u5f52\u89e3\u51b3\u53f3\u8fb9 */  }\nelse InsertionSort( A+Left, Right-Left+1 ); /* \u5143\u7d20\u592a\u5c11\uff0c\u7528\u7b80\u5355\u6392\u5e8f */ }\nvoid QuickSort( ElementType A[], int N )\n{ /* \u7edf\u4e00\u63a5\u53e3 */\nQsort( A, 0, N-1 );\n}\n</code></pre>"},{"location":"Course/FDS/Lec05/#_9","title":"\u57fa\u6570\u6392\u5e8f","text":"<p>Abstract</p> <ul> <li>\u8fd9\u4e4b\u4e0a\u7684\u6392\u5e8f\u7b97\u6cd5\u90fd\u6709\u4e00\u4e2a\u5171\u540c\u70b9 : </li> <li>\u4ec5\u4ec5\u57fa\u4e8e\u6bd4\u8f83\u5927\u5c0f\u51b3\u5b9a\u6392\u5e8f\u4f4d\u7f6e\uff0c\u6240\u6709\u8fd9\u4e9b\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u9700\u8981\u8fdb\u884c \\(\\Omega (NlogN)\\) \u6b21\u6bd4\u8f83</li> <li>\u53ea\u7528\u5230\u6bd4\u8f83\u7684\u4efb\u4f55\u6392\u5e8f\u7b97\u6cd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u90fd\u9700\u8981 \\(\\lceil log(N!) \\rceil\\) \u6b21\u6bd4\u8f83\u5e76\u5e73\u5747\u9700\u8981 \\(log(N!)\\) \u6b21\u6bd4\u8f83</li> </ul>"},{"location":"Course/FDS/Lec05/#_10","title":"\u6876\u6392\u5e8f","text":"<ul> <li>\u5982\u679c\u8f93\u5165\u6570\u636e\u90fd\u5c0f\u4e8e M\uff0c\u5219\u53ef\u4ee5\u7528\u4e00\u4e2a\u5927\u5c0f\u4e3a M \u7684\u6570\u7ec4\u6765\u8bb0\u5f55\u67d0\u4e2a\u503c\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u8fd9\u4e2a\u6570\u7ec4\u79f0\u4e3a\u6876 (bucket)</li> <li>\u6876\u521d\u59cb\u5316\u4e3a 0\uff0c\u904d\u5386\u8f93\u5165\u6570\u636e\uff0c\u5c06\u6bcf\u4e2a\u6570\u636e\u5bf9\u5e94\u7684\u6876\u52a0 1</li> <li>\u6700\u540e\u904d\u5386\u6876\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5bf9\u4e8e bucket[x] = y\uff0c\u5c06 x \u8f93\u51fa y \u6b21</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N+M)\\) (\u5982\u679c N \\(\\ll\\) M, \u7528\u57fa\u6570\u6392\u5e8f)</li> </ul> Example <ul> <li>\u5047\u8bbe\u6709 N \u4e2a\u5b66\u751f, \u4ed6\u4eec\u7684\u6210\u7ee9\u662f 0 \u5230 100 \u4e4b\u95f4\u7684\u6574\u6570 (\u4e8e\u662f\u6709 M = 101 \u4e2a\u4e0d\u540c\u7684\u6210\u7ee9\u503c) \u3002\u5982\u4f55\u5728\u7ebf\u6027\u65f6\u95f4\u5c06\u5b66\u751f\u6309\u6210\u7ee9\u6392\u5e8f:  <pre><code>void BucketSort(ElementType A[], int N)\n{\ncount[] \u521d\u59cb\u5316;\nwhile(\u8bfb\u5165\u4e00\u4e2a\u5b66\u751f\u6210\u7ee9)\n\u5c06\u5176\u63d2\u5165 count[grade] \u94fe\u8868\nfor(i = 0; i &lt; M; i++)\nif(count[i])\n\u8f93\u51fa\u6574\u4e2a count[i] \u94fe\u8868\n}\n</code></pre></li> </ul>"},{"location":"Course/FDS/Lec05/#_11","title":"\u57fa\u6570\u6392\u5e8f","text":"<ul> <li>\u4ece\u4f4e\u4f4d\uff08LSD\uff0cLeast Significant Digit\uff09\u5230\u9ad8\u4f4d\uff08MSD\uff09\uff0c\u5bf9\u6bcf\u4e00\u4f4d\u8fdb\u884c\u8fdb\u884c\u6392\u5e8f (\u6b21\u4f4d\u4f18\u5148)</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(P(N+B))\\) , \u5176\u4e2d \\(P\\) \u4e3a\u8f6e\u6570, \\(N\\) \u4e3a\u5143\u7d20\u4e2a\u6570, \\(B\\) \u4e3a\u6876\u4e2a\u6570</li> </ul> Example <p> \u56fe\u7247\u6458\u81ea MOOC</p> <p>\u6b64\u95ee\u9898\u4e2d\uff0cP \u5373\u662f logB</p> code-LSD <pre><code>/* \u57fa\u6570\u6392\u5e8f - \u6b21\u4f4d\u4f18\u5148 */\n/* \u5047\u8bbe\u5143\u7d20\u6700\u591a\u6709MaxDigit\u4e2a\u5173\u952e\u5b57\uff0c\u57fa\u6570\u5168\u662f\u540c\u6837\u7684Radix */\n#define MaxDigit 4\n#define Radix 10\n/* \u6876\u5143\u7d20\u7ed3\u70b9 */\ntypedef struct Node *PtrToNode;\nstruct Node {\nint key;\nPtrToNode next;\n};\n/* \u6876\u5934\u7ed3\u70b9 */\nstruct HeadNode {\nPtrToNode head, tail;\n};\ntypedef struct HeadNode Bucket[Radix];\nint GetDigit ( int X, int D )\n{ /* \u9ed8\u8ba4\u6b21\u4f4dD=1, \u4e3b\u4f4dD&lt;=MaxDigit */\nint d, i;\nfor (i=1; i&lt;=D; i++) {\nd = X % Radix;\nX /= Radix;\n}\nreturn d;\n}\nvoid LSDRadixSort( ElementType A[], int N )\n{ /* \u57fa\u6570\u6392\u5e8f - \u6b21\u4f4d\u4f18\u5148 */\nint D, Di, i;\nBucket B;\nPtrToNode tmp, p, List = NULL; for (i=0; i&lt;Radix; i++) /* \u521d\u59cb\u5316\u6bcf\u4e2a\u6876\u4e3a\u7a7a\u94fe\u8868 */\nB[i].head = B[i].tail = NULL;\nfor (i=0; i&lt;N; i++) { /* \u5c06\u539f\u59cb\u5e8f\u5217\u9006\u5e8f\u5b58\u5165\u521d\u59cb\u94fe\u8868List */\ntmp = (PtrToNode)malloc(sizeof(struct Node));\ntmp-&gt;key = A[i];\ntmp-&gt;next = List;\nList = tmp;\n}\n/* \u4e0b\u9762\u5f00\u59cb\u6392\u5e8f */ for (D=1; D&lt;=MaxDigit; D++) { /* \u5bf9\u6570\u636e\u7684\u6bcf\u4e00\u4f4d\u5faa\u73af\u5904\u7406 */\n/* \u4e0b\u9762\u662f\u5206\u914d\u7684\u8fc7\u7a0b */\np = List;\nwhile (p) {\nDi = GetDigit(p-&gt;key, D); /* \u83b7\u5f97\u5f53\u524d\u5143\u7d20\u7684\u5f53\u524d\u4f4d\u6570\u5b57 */\n/* \u4eceList\u4e2d\u6458\u9664 */\ntmp = p; p = p-&gt;next;\n/* \u63d2\u5165B[Di]\u53f7\u6876\u5c3e */\ntmp-&gt;next = NULL;\nif (B[Di].head == NULL)\nB[Di].head = B[Di].tail = tmp;\nelse {\nB[Di].tail-&gt;next = tmp;\nB[Di].tail = tmp;\n}\n}\n/* \u4e0b\u9762\u662f\u6536\u96c6\u7684\u8fc7\u7a0b */\nList = NULL; for (Di=Radix-1; Di&gt;=0; Di--) { /* \u5c06\u6bcf\u4e2a\u6876\u7684\u5143\u7d20\u987a\u5e8f\u6536\u96c6\u5165List */\nif (B[Di].head) { /* \u5982\u679c\u6876\u4e0d\u4e3a\u7a7a */\n/* \u6574\u6876\u63d2\u5165List\u8868\u5934 */\nB[Di].tail-&gt;next = List;\nList = B[Di].head;\nB[Di].head = B[Di].tail = NULL; /* \u6e05\u7a7a\u6876 */\n}\n}\n}\n/* \u5c06List\u5012\u5165A[]\u5e76\u91ca\u653e\u7a7a\u95f4 */\nfor (i=0; i&lt;N; i++) {\ntmp = List;\nList = List-&gt;next;\nA[i] = tmp-&gt;key;\nfree(tmp);\n} }\n</code></pre> code-MSD <pre><code>/* \u57fa\u6570\u6392\u5e8f - \u4e3b\u4f4d\u4f18\u5148 */\n/* \u5047\u8bbe\u5143\u7d20\u6700\u591a\u6709MaxDigit\u4e2a\u5173\u952e\u5b57\uff0c\u57fa\u6570\u5168\u662f\u540c\u6837\u7684Radix */\n#define MaxDigit 4\n#define Radix 10\n/* \u6876\u5143\u7d20\u7ed3\u70b9 */\ntypedef struct Node *PtrToNode;\nstruct Node{\nint key;\nPtrToNode next;\n};\n/* \u6876\u5934\u7ed3\u70b9 */\nstruct HeadNode {\nPtrToNode head, tail;\n};\ntypedef struct HeadNode Bucket[Radix];\nint GetDigit ( int X, int D )\n{ /* \u9ed8\u8ba4\u6b21\u4f4dD=1, \u4e3b\u4f4dD&lt;=MaxDigit */\nint d, i;\nfor (i=1; i&lt;=D; i++) {\nd = X%Radix;\nX /= Radix;\n}\nreturn d;\n}\nvoid MSD( ElementType A[], int L, int R, int D )\n{ /* \u6838\u5fc3\u9012\u5f52\u51fd\u6570: \u5bf9A[L]...A[R]\u7684\u7b2cD\u4f4d\u6570\u8fdb\u884c\u6392\u5e8f */\nint Di, i, j;\nBucket B;\nPtrToNode tmp, p, List = NULL; if (D==0) return; /* \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 */\nfor (i=0; i&lt;Radix; i++) /* \u521d\u59cb\u5316\u6bcf\u4e2a\u6876\u4e3a\u7a7a\u94fe\u8868 */\nB[i].head = B[i].tail = NULL;\nfor (i=L; i&lt;=R; i++) { /* \u5c06\u539f\u59cb\u5e8f\u5217\u9006\u5e8f\u5b58\u5165\u521d\u59cb\u94fe\u8868List */\ntmp = (PtrToNode)malloc(sizeof(struct Node));\ntmp-&gt;key = A[i];\ntmp-&gt;next = List;\nList = tmp;\n}\n/* \u4e0b\u9762\u662f\u5206\u914d\u7684\u8fc7\u7a0b */\np = List;\nwhile (p) {\nDi = GetDigit(p-&gt;key, D); /* \u83b7\u5f97\u5f53\u524d\u5143\u7d20\u7684\u5f53\u524d\u4f4d\u6570\u5b57 */\n/* \u4eceList\u4e2d\u6458\u9664 */\ntmp = p; p = p-&gt;next;\n/* \u63d2\u5165B[Di]\u53f7\u6876 */\nif (B[Di].head == NULL) B[Di].tail = tmp;\ntmp-&gt;next = B[Di].head;\nB[Di].head = tmp;\n}\n/* \u4e0b\u9762\u662f\u6536\u96c6\u7684\u8fc7\u7a0b */\ni = j = L; /* i, j\u8bb0\u5f55\u5f53\u524d\u8981\u5904\u7406\u7684A[]\u7684\u5de6\u53f3\u7aef\u4e0b\u6807 */\nfor (Di=0; Di&lt;Radix; Di++) { /* \u5bf9\u4e8e\u6bcf\u4e2a\u6876 */\nif (B[Di].head) { /* \u5c06\u975e\u7a7a\u7684\u6876\u6574\u6876\u5012\u5165A[], \u9012\u5f52\u6392\u5e8f */\np = B[Di].head;\nwhile (p) {\ntmp = p;\np = p-&gt;next;\nA[j++] = tmp-&gt;key;\nfree(tmp);\n}\n/* \u9012\u5f52\u5bf9\u8be5\u6876\u6570\u636e\u6392\u5e8f, \u4f4d\u6570\u51cf1 */\nMSD(A, i, j-1, D-1);\ni = j; /* \u4e3a\u4e0b\u4e00\u4e2a\u6876\u5bf9\u5e94\u7684A[]\u5de6\u7aef */\n} } }\nvoid MSDRadixSort( ElementType A[], int N )\n{ /* \u7edf\u4e00\u63a5\u53e3 */\nMSD(A, 0, N-1, MaxDigit); }\n</code></pre> <p>\u5982\u679c\u6b21\u4f4d\u5173\u952e\u5b57\u5efa\u7684\u6876\u5f88\u5c11\uff0c\u800c\u4e3b\u4f4d\u5173\u952e\u5b57\u5efa\u7684\u6876\u5f88\u591a\u4f7f\u5143\u7d20\u5206\u6563\u5f00\uff0c\u8fd9\u65f6\u518d\u5728\u6876\u5185\u90e8\u6392\u5e8f\u53ef\u80fd\u5c31\u53ea\u6d89\u53ca\u51e0\u4e2a\u5143\u7d20\u7684\u6392\u5e8f\uff0c\u8fd9\u65f6 MSD \u53ef\u80fd\u5c31\u8981\u66f4\u5feb\u4e86</p>"},{"location":"Course/FDS/Lec05/#_12","title":"\u6392\u5e8f\u7b97\u6cd5\u7684\u6bd4\u8f83","text":"\u6392\u5e8f\u7b97\u6cd5 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 \u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 \u989d\u5916\u7a7a\u95f4\u590d\u6742\u5ea6 \u7a33\u5b9a\u6027 \u5192\u6ce1\u6392\u5e8f \\(O(N^2)\\) \\(O(N^2)\\) \\(O(1)\\) \u7a33\u5b9a \u76f4\u63a5\u63d2\u5165\u6392\u5e8f \\(O(N^2)\\) \\(O(N^2)\\) \\(O(1)\\) \u7a33\u5b9a \u5f52\u5e76\u6392\u5e8f \\(O(NlogN)\\) \\(O(NlogN)\\) \\(O(N)\\) \u7a33\u5b9a \u57fa\u6570\u6392\u5e8f \\(O(P(N+B))\\) \\(O(P(N+B))\\) \\(O(N+B)\\) \u7a33\u5b9a \u7b80\u5355\u9009\u62e9\u6392\u5e8f \\(O(N^2)\\) \\(O(N^2)\\) \\(O(1)\\) \u4e0d\u7a33\u5b9a \u5e0c\u5c14\u6392\u5e8f \\(O(N^d)\\) \\(O(N^2)\\) \\(O(1)\\) \u4e0d\u7a33\u5b9a \u5806\u6392\u5e8f \\(O(NlogN)\\) \\(O(NlogN)\\) \\(O(1)\\) \u4e0d\u7a33\u5b9a \u5feb\u901f\u6392\u5e8f \\(O(NlogN)\\) \\(O(N^2)\\) \\(O(logN)\\) \u4e0d\u7a33\u5b9a"},{"location":"Course/FDS/Lec06/","title":"\u54c8\u5e0c | Hash","text":"<p>Abstract</p> <p>\u91cd\u70b9: \u8bbe\u8ba1\u54c8\u5e0c\u51fd\u6570 + \u5982\u4f55\u89e3\u51b3\u51b2\u7a81</p>"},{"location":"Course/FDS/Lec06/#_1","title":"\u54c8\u5e0c\u8868 | \u6563\u5217\u8868","text":"<ul> <li>\u54c8\u5e0c\u8868\u628a\u5173\u952e\u5b57 (\u6216\u6807\u8bc6\u7b26 | identifier) \u503c\u6620\u5c04\u5230\u8868\u4e2d\u4e00\u4e2a\u4f4d\u7f6e<ul> <li>\u652f\u6301\u67e5\u8be2\u3001\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c</li> </ul> </li> <li> <p>\u5bf9\u4e8e\u6807\u8bc6\u7b26 \\(x\\) , \u5b9a\u4e49\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570 \\(f(x) = x\\) \u5728\u54c8\u5e0c\u8868 ht[] \u4e2d\u7684\u4f4d\u7f6e </p> <ul> <li>\u5982\u56fe, ht \u7684\u5927\u5c0f\u4e3a \\(b\\)\uff08\u5373 \\(f(x)\\) \u503c\u57df\u4e3a \\([0, b-1]\\)\uff09\uff0c\u6700\u591a\u6709 s \u4e2a\u69fd</li> <li>\\(T\\) = \\(x\\) \u53ef\u80fd\u7684\u4e0d\u540c\u503c\u7684\u4e2a\u6570</li> <li>\\(n\\) = ht \u4e2d\u4e0d\u540c\u6807\u8bc6\u7b26\u7684\u4e2a\u6570</li> <li>\u6807\u8bc6\u7b26\u5bc6\u5ea6 (identifier density) = \\(n/T\\)</li> <li>\u88c5\u8f7d\u5bc6\u5ea6 (loading density) = \\(\\lambda = n/(sb)\\)</li> </ul> </li> <li> <p>\u51b2\u7a81 (collision) \u2014\u2014&gt; \u5f53\u5c06\u4e24\u4e2a\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u6563\u5217\u5230\u540c\u4e00\u4e2a\u6876\u4e2d\u65f6 (i.e. \\(i_1 \\neq i_2\\) \u4f46 \\(f(i_1) = f(i_2)\\) )</p> </li> <li>\u6ea2\u51fa\uff08overflow\uff09: \u5f53\u5c06\u4e00\u4e2a\u65b0\u7684\u6807\u8bc6\u7b26\u6563\u5217\u5230\u4e00\u4e2a\u6ee1\u7684\u6876\u65f6</li> </ul> <p>\u5f53 s = 1 \u65f6\uff0c\u78b0\u649e\u548c\u6ea2\u51fa\u5c06\u540c\u65f6\u53d1\u751f \u6ca1\u6709\u6ea2\u51fa\u65f6\uff0c\\(T_{search} = T_{insert} = T_{delete} = O(1)\\)</p> Example <p></p>"},{"location":"Course/FDS/Lec06/#_2","title":"\u54c8\u5e0c\u51fd\u6570","text":"<p>Properties of f()</p> <ul> <li>\u51fd\u6570\u5fc5\u987b\u6613\u4e8e\u8ba1\u7b97\u4e14\u5c3d\u91cf\u51cf\u5c11\u78b0\u649e\u7684\u53ef\u80fd\u6027</li> <li>\u51fd\u6570\u5e94\u8be5\u662f\u516c\u6b63\u7684 (unbiased)\uff0c\u5373\u5bf9\u4efb\u610f \\(x\\) \u548c \\(i\\) \u90fd\u6709  \\(Probability(f(x) = i) = 1/b\\) . \u8fd9\u79cd\u51fd\u6570\u79f0\u4e3a\u5747\u5300\u54c8\u5e0c\u51fd\u6570\uff08uniform hash function\uff09</li> </ul> <p>\u51e0\u79cd\u51fd\u6570\u6784\u9020\u65b9\u6cd5: </p> <ul> <li> <p>\u9664\u7559\u4f59\u6570\u6cd5 \u2014\u2014 \\(f(x) = x ~~ \\% ~~ TableSize;\\) <code>/* if x is an integer*/</code></p> <ul> <li>TableSize \u6700\u597d\u9009\u62e9\u4e00\u4e2a\u8d28\u6570 \u2014\u2014 good for random integer keys</li> </ul> Example \u5173\u952e\u5b57 \u5185\u90e8\u4ee3\u7801 key MOD 100 key1 511 11 key2 512 12 key3 411 11 </li> <li> <p>\u5e73\u65b9\u53d6\u4e2d\u6cd5 \u2014\u2014 \u5148\u8ba1\u7b97\u5173\u952e\u5b57\u503c\u7684\u5e73\u65b9\uff0c\u7136\u540e\u53d6\u5e73\u65b9\u503c\u7684\u4e2d\u95f4\u51e0\u4f4d\u4f5c\u4e3a\u6563\u5217\u5730\u5740</p> Example \u5173\u952e\u5b57 \u5185\u90e8\u4ee3\u7801 \u5185\u90e8\u4ee3\u7801\u5e73\u65b9 hash(key) key1 511 261121 11 key2 512 262144 21 key3 411 168921 89 </li> <li> <p>\u6298\u53e0\u6cd5 \u2014\u2014 \u5c06\u5173\u952e\u5b57\u5206\u4e3a\u4f4d\u6570\u76f8\u540c\u7684\u51e0\u90e8\u5206\uff0c\u7136\u540e\u53d6\u8fd9\u51e0\u90e8\u5206\u7684\u53e0\u52a0\u548c\uff08\u820d\u53bb\u8fdb\u4f4d\uff09\u4f5c\u4e3a\u6563\u5217\u5730\u5740 (\u7528\u4e8e\u5173\u952e\u5b57\u4f4d\u6570\u8f83\u591a\uff0c\u5e76\u4e14\u5173\u952e\u5b57\u4e2d\u6bcf\u4e00\u4f4d\u4e0a\u6570\u5b57\u5206\u5e03\u5927\u81f4\u5747\u5300)</p> Example <p></p> </li> <li> <p>\u6570\u5b57\u5206\u6790\u6cd5 \u2014\u2014 \u5f53\u5173\u952e\u5b57\u7684\u4f4d\u6570\u5927\u4e8e\u5730\u5740\u7684\u4f4d\u6570\uff0c\u5bf9\u5173\u952e\u5b57\u7684\u5404\u4f4d\u5206\u5e03\u8fdb\u884c\u5206\u6790\uff0c\u9009\u51fa\u5206\u5e03\u5747\u5300\u7684\u4efb\u610f\u51e0\u4f4d\u4f5c\u4e3a\u6563\u5217\u5730\u5740 (\u9002\u7528\u4e8e\u6240\u6709\u5173\u952e\u5b57\u90fd\u5df2\u77e5\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u5b9e\u9645\u5e94\u7528\u786e\u5b9a\u8981\u9009\u53d6\u7684\u90e8\u5206\uff0c\u5c3d\u91cf\u907f\u514d\u53d1\u751f\u51b2\u7a81)</p> Example <p>\u6bd4\u5982\u6309\u5b66\u53f7\u6620\u5c04\uff0c\u540c\u5c4a\u524d\u51e0\u4f4d\u76f8\u540c\uff0c\u5c06\u540e\u56db\u4f4d\u9009\u4e3a key</p> </li> <li> <p>\\(f(x) = (\\sum x[i]) ~~ \\% ~~ TableSize;\\) <code>/* if x is a string*/</code></p> Example <p>\\(x = \"abc\" \\Rightarrow \\sum x[i] = 'a' + 'b' + 'c'\\)</p> </li> <li> <p>\\(f(x) = (x[0] + x[1] * 27 + x[2] * 27^2 ) ~~ \\% ~~ TableSize;\\) <code>/* \u53d8\u6210 27 \u8fdb\u5236 */</code></p> </li> <li> <p>\\(f(x) = (\\sum x[N-i-1] * 32^i) ~~ \\% ~~ TableSize\\) <code>/* *32 \u53ef\u4ee5\u53d8\u4e3a\u79fb\u4f4d\u8fd0\u7b97 */</code></p> Example <pre><code>Index Hash3(const char *x, int TableSize)\n{\nunsigned int HashVal = 0;\nwhile(*x != '\\0')\n{\nHashVal = (HashVal &lt;&lt; 5) + *x++;\n}\nreturn HashVal % TableSize;\n}\n</code></pre> </li> </ul>"},{"location":"Course/FDS/Lec06/#_3","title":"\u89e3\u51b3\u51b2\u7a81","text":""},{"location":"Course/FDS/Lec06/#separate-chaining","title":"\u5206\u79bb\u94fe\u63a5 | Separate Chaining","text":"<ul> <li>\u5c06\u6563\u5217\u5230\u76f8\u540c\u503c\u7684\u5143\u7d20\u4fdd\u5b58\u5728\u4e00\u4e2a\u5217\u8868\uff08\u94fe\u8868\uff09\u4e2d</li> </ul> code <pre><code>struct  ListNode; typedef  struct  ListNode  *Position; struct  HashTbl; typedef  struct  HashTbl  *HashTable; struct  ListNode { ElementType  Element; Position  Next; }; typedef  Position  List; /* List *TheList will be an array of lists, allocated later */ /* The lists use headers (for simplicity), */ /* though this wastes space */ struct  HashTbl { int  TableSize; List  *TheLists; }; </code></pre> Create an empty table <pre><code>HashTable  InitializeTable( int TableSize ) {   HashTable  H; int  i; if ( TableSize &lt; MinTableSize ) { Error( \"Table size too small\" );  return NULL;  } H = malloc( sizeof( struct HashTbl ) );  /* Allocate table */\nif ( H == NULL )    FatalError( \"Out of space!!!\" ); H-&gt;TableSize = NextPrime( TableSize );  /* Better be prime */\nH-&gt;TheLists = malloc( sizeof( List ) * H-&gt;TableSize );  /*Array of lists*/\nif ( H-&gt;TheLists == NULL )   FatalError( \"Out of space!!!\" ); for( i = 0; i &lt; H-&gt;TableSize; i++ ) {   /* Allocate list headers */\nH-&gt;TheLists[ i ] = malloc( sizeof( struct ListNode ) ); /* Slow! */\nif ( H-&gt;TheLists[ i ] == NULL )  FatalError( \"Out of space!!!\" ); else    H-&gt;TheLists[ i ]-&gt;Next = NULL;\n} return  H; } </code></pre> Find a key from a hash table <pre><code>Position  Find ( ElementType Key, HashTable H ) { Position P; List L; L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; P = L-&gt;Next; while( P != NULL &amp;&amp; P-&gt;Element != Key )  /* Probably need strcmp */ P = P-&gt;Next; return P; } </code></pre> Insert a key into a hash table <pre><code>void  Insert ( ElementType Key, HashTable H ) { Position   Pos, NewCell; List  L; Pos = Find( Key, H ); if ( Pos == NULL ) {   /* Key is not found, then insert */\nNewCell = malloc( sizeof( struct ListNode ) ); if ( NewCell == NULL )     FatalError( \"Out of space!!!\" ); else { L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; NewCell-&gt;Next = L-&gt;Next; NewCell-&gt;Element = Key; /* Probably need strcpy! */ L-&gt;Next = NewCell; } } } </code></pre> <p>Tips: \u5c06 TableSize \u7684\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u9884\u671f keys \u7684\u6570\u91cf\u51e0\u4e4e\u4e00\u6837 (i.e. \u4f7f\u5f97\u88c5\u8f7d\u5bc6\u5ea6 $\\lambda \\approx 1 $)</p>"},{"location":"Course/FDS/Lec06/#open-adressing","title":"\u5f00\u653e\u5730\u5740 | Open Adressing","text":"<ul> <li>\u5f53\u6709\u51b2\u7a81\u53d1\u751f\u65f6\uff0c\u9009\u62e9\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u76f4\u5230\u627e\u5230\u7a7a\u7684\u4e3a\u6b62</li> <li>\u5373\u6709\u591a\u4e2a\u54c8\u5e0c\u51fd\u6570 \\(h_0(x), h_1(x), \\cdots\\)\uff0c\u5176\u4e2d \\(h_i(x) = (\\mathrm{hash}(x)+f(i)) ~~ \\% ~~ TableSize\\)<ul> <li>\u5176\u4e2d \\(f(i)\\) \u4e3a\u589e\u91cf\u51fd\u6570\uff0c\u6709\u591a\u79cd\u9009\u53d6\u7684\u65b9\u5f0f</li> </ul> </li> <li>\u901a\u5e38\u60c5\u51b5\u4e0b \\(\\lambda &lt; 0.5\\) , \u5982\u679c\u5927\u4e8e 0.5 \u5c31\u4f1a\u5f15\u53d1\u5927\u91cf\u7684\u51b2\u7a81</li> </ul> <pre><code>void insert(int key) {\nindex = hash(key);\nint i = 0;  // the counter of probing\nwhile (collision at index) {\nindex = (hash(key) + f(i)) % TableSize;\nif (table is full) break;\nelse i++;\n}\nif (table is full) Error(\"No space left\");\nelse insert key at index;\n}\n</code></pre> <ol> <li> <p>\u7ebf\u6027\u63a2\u6d4b | Linear Probing </p> <ul> <li>\u589e\u91cf\u51fd\u6570 \\(f(i) = i\\) \u2014\u2014 \u4f1a\u5bfc\u81f4\u521d\u6b21\u805a\u96c6\uff08primary clustering\uff09\uff0c\u5373\u4e00\u65e6\u53d1\u751f\u4e86\u51b2\u7a81\uff0c\u90a3\u4e48\u540e\u9762\u7684\u5143\u7d20\u90fd\u4f1a\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u641c\u7d22\u6b21\u6570\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927</li> <li>\u4f7f\u7528\u7ebf\u6027\u63a2\u6d4b\u7684\u63a2\u6d4b\u6b21\u6570\u5bf9\u4e8e\u63d2\u5165\u548c\u4e0d\u6210\u529f\u67e5\u627e\u6765\u8bf4\u7ea6\u4e3a\\(\\dfrac{1}{2}\\left(1+\\dfrac{1}{(1-\\lambda)^2}\\right)\\)</li> <li>\u5bf9\u4e8e\u6210\u529f\u7684\u67e5\u627e\u6765\u8bf4\u5219\u9700\u8981 \\(\\dfrac{1}{2}\\left(1+\\dfrac{1}{1-\\lambda}\\right)\\) \u6b21</li> </ul> Example <p> Average search time = 27 / 9 = 3</p> </li> <li> <p>\u4e8c\u6b21\u63a2\u6d4b | Quadratic Probing </p> <ul> <li>\u589e\u91cf\u51fd\u6570 \\(f(i) = i^2\\) \u2014\u2014 \u907f\u514d\u4e86 primary clustering, \u4f46\u662f\u5bfc\u81f4\u6709\u53ef\u80fd\u6709\u7a7a\u4f4d\u4f46\u5c31\u662f\u627e\u4e0d\u5230</li> <li> <p>\u82e5\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\uff08\u6216\u4e8c\u6b21\u63a2\u6d4b\uff09, \u4e14\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u662f\u7a7a\u7684\u65f6\u5019\uff0c\u603b\u80fd\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20</p> <p>\u4e00\u4e9b\u6539\u8fdb: If the table size is a prime of the form \\(4k + 3\\) , then the quadratic probing  \\(f(i) = \\pm ~~ i^2\\) can probe the entire table.</p> Find <pre><code>Position  Find ( ElementType Key, HashTable H ) {   Position  CurrentPos; int  CollisionNum; CollisionNum = 0; CurrentPos = Hash( Key, H-&gt;TableSize ); while( H-&gt;TheCells[ CurrentPos ].Info != Empty &amp;&amp; H-&gt;TheCells[ CurrentPos ].Element != Key ) { CurrentPos += 2 * ++CollisionNum - 1;  // h = h + 2i - 1\nif ( CurrentPos &gt;= H-&gt;TableSize )  CurrentPos -= H-&gt;TableSize;   } return CurrentPos; } </code></pre> Insert <pre><code>void  Insert ( ElementType Key, HashTable H ) { Position  Pos; Pos = Find( Key, H ); if ( H-&gt;TheCells[ Pos ].Info != Legitimate ) { /* OK to insert here */ H-&gt;TheCells[ Pos ].Info = Legitimate; H-&gt;TheCells[ Pos ].Element = Key; /* Probably need strcpy */ } } </code></pre> </li> </ul> <ol> <li>\u53cc\u91cd\u54c8\u5e0c | Double Hashing \u2014\u2014 \u5373 \\(f(i) = i \\times hash_2(x)\\); <code>/* hash2(x) \u662f\u7b2c\u4e8c\u4e2a hash \u51fd\u6570 */</code><ul> <li>\u4e00\u822c\u9009\u62e9 \\(hash_2(x) = R - (x ~~ \\% ~~ R)\\) (\\(R\\) \u4e3a\u5c0f\u4e8e\u8868\u5927\u5c0f\u7684\u8d28\u6570) \u6548\u679c\u66f4\u597d</li> <li>\u5982\u679c\u6b63\u786e\u5b9e\u73b0\u4e86\u53cc\u91cd\u54c8\u5e0c\uff0c\u6a21\u62df\u663e\u793a\u9884\u671f\u7684\u63a2\u6d4b\u6b21\u6570\u51e0\u4e4e\u4e0e\u968f\u673a\u51b2\u7a81\u89e3\u51b3\u7b56\u7565\u76f8\u540c</li> <li>\u4e8c\u6b21\u63a2\u6d4b\u4e0d\u9700\u8981\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u54c8\u5e0c\u51fd\u6570\uff0c\u5728\u5b9e\u8df5\u4e2d\u66f4\u7b80\u5355\u5feb\u901f</li> </ul> </li> <li>\u518d\u54c8\u5e0c: <ul> <li>\u4f7f\u7528\u4e8c\u6b21\u63a2\u6d4b\uff0c\u5982\u679c\u8868\u7684\u5143\u7d20\u586b\u7684\u8fc7\u6ee1 (\u5927\u7ea6\u662f\u88c5\u8f7d\u5bc6\u5ea6 &gt; 0.5 \u65f6)\uff0c\u90a3\u4e48\u64cd\u4f5c\u65f6\u95f4\u4f1a\u8fc7\u957f\uff0c\u4e14 Insert \u53ef\u80fd\u5931\u8d25 \uff0c\u8fd9\u53ef\u80fd\u53d1\u751f\u5728\u6709\u592a\u591a\u7684\u79fb\u52a8\u548c\u63d2\u5165\u6df7\u5408\u7684\u573a\u5408</li> <li>\u89e3\u51b3\u65b9\u6cd5\u662f\u518d\u54c8\u5e0c: <ul> <li>\u5efa\u7acb\u53e6\u5916\u4e00\u4e2a\u5927\u7ea6\u4e24\u500d\u5927\u7684\u8868\u4e14\u4f7f\u7528\u4e00\u4e2a\u76f8\u5173\u7684\u65b0\u54c8\u5e0c\u51fd\u6570</li> <li>\u626b\u63cf\u6574\u4e2a\u539f\u59cb\u54c8\u5e0c\u8868</li> <li>\u8ba1\u7b97\u6bcf\u4e2a(\u672a\u5220\u9664\u7684)\u5143\u7d20\u7684\u65b0\u54c8\u5e0c\u503c\u5e76\u5c06\u5176\u63d2\u5165\u5230\u65b0\u8868\u4e2d</li> </ul> </li> <li>\u5982\u679c\u8868\u4e2d\u6709 N \u4e2a\u5143\u7d20\uff0c\u90a3\u518d\u54c8\u5e0c\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \\(T(N) = O(N)\\) </li> <li>\u4ec0\u4e48\u65f6\u5019\u518d\u54c8\u5e0c<ul> <li>\u53ea\u8981\u8868\u6709\u4e00\u534a\u6ee1</li> <li>\u63d2\u5165\u64cd\u4f5c\u5931\u8d25\u65f6</li> <li>\u5f53\u8868\u8fbe\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u88c5\u8f7d\u5bc6\u5ea6</li> </ul> </li> </ul> </li> </ol> </li> </ol>"},{"location":"Course/FDS/pta/","title":"PTA \u4e60\u9898","text":""},{"location":"Course/OOP/","title":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1","text":"<p>Abstract</p> <p>ZJU - OOP (\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1) \u8bfe\u7a0b</p> <p>\u53ea\u8003\u5230 c++11\uff0c\u540e\u7eed\u6807\u51c6\u672c\u8bfe\u7a0b\u4e0d\u505a\u8981\u6c42\uff08\u66f4\u7cfb\u7edf\u5316\u7684\u5b66\u4e60\u4ee5\u540e\u518d\u505a\uff09</p> List <ul> <li> Beginning</li> <li> Step in Object-Oriented</li> <li> Container</li> <li> Object Interactive</li> <li> Key Words</li> <li> Inheritance &amp; Polymorphism</li> <li> Copt Ctor &amp; Overloaded Operators</li> <li> Templates</li> <li> Exception Handling</li> <li> Smart Pointers</li> <li> Class Design</li> <li> Streams &amp; \u7ee7\u627f\u6784\u9020\u51fd\u6570</li> </ul> <p>To Be Continued</p>"},{"location":"Course/OOP/Lec01/","title":"Beginning | \u7b2c\u4e00\u4e2a\u7a0b\u5e8f","text":"<p>Abstract</p> <p>OOP \u4e09\u5927\u7279\u6027 - \u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001</p>"},{"location":"Course/OOP/Lec01/#_1","title":"\u7b2c\u4e00\u4e2a\u7a0b\u5e8f","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\ncout &lt;&lt; \"Hello World!\" &lt;&lt; endl;\n}\n</code></pre> <ul> <li><code>&lt;iostream&gt;</code> \u4e3a\u5185\u7f6e\u7c7b\u578b\u5bf9\u8c61\u63d0\u4f9b\u4e86\u8f93\u5165\u8f93\u51fa\u652f\u6301\uff0c\u540c\u65f6\u4e5f\u652f\u6301\u6587\u4ef6\u7684\u8f93\u5165\u8f93\u51fa\uff0c\u7c7b\u7684\u8bbe\u8ba1\u8005\u53ef\u4ee5\u901a\u8fc7\u5bf9 <code>iostream</code> \u5e93\u7684\u6269\u5c55\u6765\u652f\u6301\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c</li> <li> <p><code>using namespace std;</code> \u544a\u8bc9\u7f16\u8bd1\u5668\u4f7f\u7528 std \u547d\u540d\u7a7a\u95f4 (\u547d\u540d\u7a7a\u95f4\u662f C++ \u4e2d\u4e00\u4e2a\u76f8\u5bf9\u65b0\u7684\u6982\u5ff5)</p> <ul> <li><code>namespace</code> \u662f\u6307\u6807\u8bc6\u7b26\u7684\u5404\u79cd\u53ef\u89c1\u8303\u56f4\uff0cC++ \u6807\u51c6\u7a0b\u5e8f\u5e93\u4e2d\u7684\u6240\u6709\u6807\u8bc6\u7b26\u90fd\u88ab\u5b9a\u4e49\u4e8e\u4e00\u4e2a\u540d\u4e3a std \u7684 <code>namespace</code> \u4e2d</li> <li>\u7531\u4e8e <code>namespace</code> \u7684\u6982\u5ff5\uff0c\u4f7f\u7528 C++ \u6807\u51c6\u7a0b\u5e8f\u5e93\u7684\u4efb\u4f55\u6807\u8bc6\u7b26\u65f6\uff0c\u53ef\u4ee5\u6709\u4e09\u79cd\u9009\u62e9\uff1a<ol> <li>\u76f4\u63a5\u6307\u5b9a\u6807\u8bc6\u7b26 \u2014\u2014 \u5982 <code>std::ostream</code> \u800c\u4e0d\u662f <code>ostream</code> (\u5b8c\u6574\u8bed\u53e5 A : <code>std::cout &lt;&lt; std::hex &lt;&lt; 5.0 &lt;&lt; std::endl;</code>)</li> <li>\u4f7f\u7528 <code>using</code> \u5173\u952e\u5b57 \u2014\u2014 \u5982 <code>using std::cout; using std::endl</code> (\u5b8c\u6574\u8bed\u53e5 A \u6539\u5199\u4e3a: <code>cout &lt;&lt; std::hex &lt;&lt; 5.0 &lt;&lt; endl;</code>)</li> <li>\u6700\u65b9\u4fbf\u7684\u662f\u4f7f\u7528 <code>using namespace std;</code>\uff0c\u8fd9\u6837\u547d\u540d\u7a7a\u95f4 std \u5185\u5b9a\u4e49\u7684\u6240\u6709\u6807\u8bc6\u7b26\u90fd\u6709\u6548 (\u5c31\u50cf\u88ab\u58f0\u660e\u4e3a\u5168\u5c40\u53d8\u91cf\u4e00\u6837\uff0c\u5b8c\u6574\u8bed\u53e5 A \u6539\u5199\u4e3a\uff1a<code>cout &lt;&lt; hex &lt;&lt; 5.0 &lt;&lt; endl</code>)</li> </ol> </li> </ul> </li> <li> <p>\u82e5\u8f93\u5165\u5219\u91c7\u7528 <code>cin</code> \u8f93\u5165 <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint age;\ncin &gt;&gt; age;\ncout &lt;&lt; \"Hello World! I'm \"&lt;&lt; age &lt;&lt; \" today!\" &lt;&lt; endl;\n}\n</code></pre></p> </li> </ul>"},{"location":"Course/OOP/Lec01/#string","title":"\u5b57\u7b26\u4e32 | String","text":"<ul> <li>\u9996\u5148\u8981\u52a0\u5165\u5e93 <code>&lt;string&gt;</code></li> <li>\u5b9a\u4e49\u5b57\u7b26\u4e32\u53d8\u91cf \u2014\u2014 <code>string str;</code></li> <li>\u521d\u59cb\u5316\u5b57\u7b26\u4e32\u53d8\u91cf \u2014\u2014 <code>string str = \"Molan\";</code></li> <li>\u8f93\u5165\u8f93\u51fa\u5b57\u7b26\u4e32\u5373\u4f7f\u7528 <code>cin</code>, <code>cout</code> \u2014\u2014 <code>cin &gt;&gt; str; cout &lt;&lt; str;</code></li> <li>C++ \u4e2d\u7684\u5b57\u7b26\u4e32\u53d8\u91cf\u652f\u6301\u7c7b\u4f3c\u6574\u578b\u53d8\u91cf\u7684\u64cd\u4f5c \u2014\u2014 <code>+</code> (\u62fc\u63a5) \u00b7\u00b7\u00b7</li> </ul> b.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint age;\nstring name;\ncin &gt;&gt; age &gt;&gt; name;\nname += \" (Enl_Z) \"\ncout &lt;&lt; \"Hello World! \" &lt;&lt; name &lt;&lt; \" is \" &lt;&lt; age &lt;&lt; \" today!\"&lt;&lt; endl;\n}\n</code></pre> <pre><code>$ g++ b.cpp; ./a.out\n18 Molan\nHello World! Molan (Enl_Z) is 18 today!\n</code></pre> <ul> <li><code>string</code> \u4e0d\u9700\u8981\u50cf <code>char str[10]</code> \u4e00\u6837\u8bbe\u7f6e\u957f\u5ea6\uff0c\u76f4\u63a5\u4f7f\u7528 <code>string str;</code> \u5373\u53ef (\u5185\u90e8\u4f1a\u81ea\u52a8\u8c03\u6574\u957f\u5ea6\uff0c\u4e14\u5b57\u7b26\u4e32\u672b\u5c3e\u65e0 <code>\\0</code>)</li> <li><code>string</code> \u53d8\u91cf\u652f\u6301\u8d4b\u503c\uff0c\u5373 <code>str1 = str2;</code> \u662f\u5408\u6cd5\u7684</li> </ul> <p>\u91c7\u7528 <code>string str(\"Hello\");</code> \u548c <code>string str = \"Hello\";</code> \u662f\u4e00\u6837\u7684 (\u6b64\u79cd\u521d\u59cb\u5316\u65b9\u6cd5\u5bf9\u5176\u4ed6\u53d8\u91cf\u4e5f\u9002\u7528)</p>"},{"location":"Course/OOP/Lec01/#pointers-to-objects","title":"Pointers to Objects","text":"<p>\u6b63\u4ea4: \u82e5\u6709\u67d0\u4e2a\u64cd\u4f5c\u5bf9\u67d0\u4e2a\u6570\u636e\u7c7b\u578b\u662f\u53ef\u7528\u7684\uff0c\u5219\u7406\u8bba\u4e0a\u5e94\u6ee1\u8db3\u5176\u5bf9\u6240\u6709\u6570\u636e\u7c7b\u578b\u53ef\u7528 (\u5982\uff0c\u53d6\u5730\u5740\u5bf9\u6574\u6570\u53ef\u7528\u5219\u5e94\u5bf9 <code>string</code> \u4e5f\u53ef\u7528)</p> <ul> <li>Operators with Pointers<ul> <li><code>&amp;</code> : get address (e.g. <code>ps = &amp;s;</code> )</li> <li><code>*</code> : get the object (e.g. <code>(*ps).length()</code> )</li> <li><code>-&gt;</code> : call the function (e.g. <code>ps-&gt;length()</code> )</li> </ul> </li> <li>Two Ways to Access Objects<ul> <li><code>string s;</code><ul> <li><code>s</code> is the object itself</li> <li>\u6b64\u65f6\uff0c\u5bf9\u8c61\u5df2\u7ecf\u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u9ed8\u8ba4\u7684\u503c (\u7531\u7c7b\u51b3\u5b9a, \u8c03\u7528\u7c7b\u7684\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316)</li> </ul> </li> <li><code>string* ps;</code><ul> <li><code>ps</code> is a pointer to an object</li> <li>In this time, the value of <code>ps</code> is still unknown</li> </ul> </li> </ul> </li> <li>Assignment<ol> <li><code>string s1, s2;</code><ul> <li><code>s1 = s2;</code></li> </ul> </li> <li><code>string *ps1, ps2;</code><ul> <li><code>ps1= ps2</code></li> </ul> </li> </ol> </li> </ul>"},{"location":"Course/OOP/Lec01/#dynamic-memory-allocation","title":"Dynamic memory allocation","text":"<p><code>new</code> \u548c <code>delete</code> \u90fd\u662f\u8fd0\u7b97\u7b26, c++ \u4e2d\u867d\u7136\u4e5f\u6709 <code>malloc</code>\uff0c\u4f46\u6700\u597d\u4e0d\u8981\u518d\u4f7f\u7528</p> <ul> <li> <p><code>new</code></p> <ul> <li><code>new int;</code> (\u7c7b\u4f3c\u4e8e <code>malloc(sizeof(int))</code> \u7533\u8bf7\u4e00\u4e2a <code>int</code> \u7684\u7a7a\u95f4)</li> <li><code>new Stash;</code> (<code>Stash</code> \u662f\u4e00\u4e2a\u7c7b\uff0c\u6b64\u5904\u7533\u8bf7\u4e86\u4e00\u4e2a <code>Stash</code> \u7684\u7a7a\u95f4\uff0c\u4f46\u4e0d\u540c <code>malloc</code> \u7684\u662f\u5176\u8fd8\u8c03\u7528\u6784\u9020\u51fd\u6570\u8fdb\u884c\u4e86\u521d\u59cb\u5316)</li> <li><code>new int[10]</code></li> </ul> <p><code>new</code> is the way to allocate memory as a program runs. Pointers become the only access to that memory. <code>new</code> \u6ca1\u6709\u7a7a\u95f4\u7684\u65f6\u5019\u4e0d\u4f1a\u8fd4\u56de <code>NULL</code> \u800c\u662f\u629b\u5f02\u5e38</p> </li> <li> <p><code>delete</code> \u2014\u2014 \u8c03\u7528\u6790\u6784\u51fd\u6570, \u5728\u6790\u6784\u51fd\u6570\u4e2d\u7528\u4e8e\u91ca\u653e\u7c7b\u5185\u90e8\u52a8\u6001\u5206\u914d\u5f97\u5230\u7684\u8d44\u6e90  (\u7531\u4e8e\u5185\u7f6e\u7c7b\u578b\u6ca1\u6709\u6790\u6784\u51fd\u6570\uff0c\u6240\u4ee5 <code>delete</code> \u5185\u7f6e\u7c7b\u578b\u6307\u9488\u65f6\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u9700\u8981\u505a)</p> <ul> <li><code>delete p;</code></li> <li><code>delete[] p;</code> <p><code>delete</code> enables you to return memory to the memory pool when you are finished with it.</p> </li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec01/#dynamic-arrays","title":"Dynamic Arrays","text":"<ul> <li><code>int * psome = new int[10];</code><ul> <li>The <code>new</code> operator returns the address of the first element of the block.</li> </ul> </li> <li><code>delete [] psome;</code><ul> <li>The presence of the brackets tells the program that it should free the whole array, not just the element (<code>delete</code> \u65e0\u6cd5\u6307\u5b9a\u6570\u91cf\uff0c\u5373\u65b9\u62ec\u53f7\u5185\u65e0\u6cd5\u586b\u5165\u6570\u5b57)</li> </ul> </li> </ul> Example <p><pre><code>int *a = new int[10];\na++; delete[] a;\n</code></pre> \u6b64\u65f6 <code>delete[] a;</code> \u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a <code>a++</code> \u540e\u5728\u8fd9\u5f20\u8868\u4e2d\u6ca1\u6709 <code>a</code> \u8fd9\u4e00\u9879\uff0c\u800c\u662f\u6709 <code>a-1</code></p>"},{"location":"Course/OOP/Lec01/#tips-for-new-delete","title":"Tips for new &amp; delete","text":"<ul> <li>Don\u2019t use <code>delete</code> to free memory that <code>new</code> didn\u2019t allocate</li> <li>Don\u2019t use <code>delete</code> to free the same block of memory</li> <li>Use <code>delete []</code> if you used <code>new[]</code></li> <li>Use <code>delete</code>(without brackets) if you used <code>new</code> to allocate a single entity</li> <li>It is safe to apply delete to the null pointer (nothing happens)</li> </ul>"},{"location":"Course/OOP/Lec01/#class","title":"Class","text":""},{"location":"Course/OOP/Lec01/#reference","title":"reference","text":"<ul> <li>Reference is a new way to manipulate objects in C++<ul> <li>\u5728 c \u4e2d <code>char c; char &amp;r = c;</code> //a reference to a character</li> <li><code>r</code> is regarded as a reference to a character <code>c</code></li> </ul> </li> <li>\u82e5\u53d8\u91cf\u662f\u672c\u5730\u6216\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u58f0\u660e\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u5bf9\u5176\u505a\u7ed1\u5b9a</li> <li>\u5982\u679c\u662f\u53c2\u6570\u5217\u8868\u6216\u6210\u5458\u53d8\u91cf\uff0c\u4e0d\u9700\u8981\u7ed9\u51fa\u7ed1\u5b9a</li> </ul>"},{"location":"Course/OOP/Lec01/#rules-of-references","title":"Rules of references","text":"<ul> <li>References must be initialized when defined</li> <li>As a function argument<ul> <li><code>void f(int &amp;x)</code></li> <li><code>f(y);</code> //initialized when function is called </li> </ul> </li> <li>Bindings don\u2019t change at run time (\u5373\u4e0d\u53ef\u4ee5\u89e3\u7ed1)</li> <li>The target of a reference must have a location (\u5373\u5f15\u7528\u7684\u5bf9\u8c61\u53ea\u80fd\u662f\u5de6\u503c)<ul> <li><code>void func(int &amp;);</code></li> <li><code>func(i * 3);</code>    //warning or error!</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec01/#points-vs-references","title":"Points vs. References","text":"<ul> <li>References<ul> <li>can\u2019t be null</li> <li>are dependent on an existing variable, they are an alias for an variable</li> <li>can\u2019t change to a new \u201caddress\u201d location</li> </ul> </li> <li>Pointers<ul> <li>can be set to a null</li> <li>pointer is independent of existing objects</li> <li>can change to point to a different address</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec01/#restrictions","title":"Restrictions","text":"<ul> <li>No references to references (e.g. <code>int i; int &amp;r = i; int &amp;k = r;</code> \u00d7)</li> <li>No pointers to references (e.g. <code>int&amp;* p;</code> \u00d7) (Allow reference to pointer \u2014\u2014 <code>void f(int*&amp; p);</code>)</li> <li>No arrays of references </li> </ul>"},{"location":"Course/OOP/Lec01/#point","title":"Point | \u70b9","text":"C \u7248\u672c structC++ \u7248\u672c <pre><code>#include &lt;iostream&gt;\nusing namespace std;\ntypedef struct Point{\nfloat x;\nfloat y;\n} Point;\nvoid print(const Point *p)\n{\ncout &lt;&lt; p-&gt;x &lt;&lt; \" , \" &lt;&lt; p-&gt;y &lt;&lt; endl;\n}\nvoid move(Point *p, int dx, int dy)\n{\np-&gt;x += dx;\np-&gt;y += dy;\n}\nint main()\n{\nPoint a, b;\na.x = b.x = 1;\na.y = b.y = 1;\n//\u4e5f\u53ef\u4ee5\u5199\u4f5c \n//Point a = {1, 1}, b = {1, 1};\nmove(&amp;a, 2, 2);\nprint(&amp;a);\nprint(&amp;b);\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct Point{   float x;\nfloat y;\nvoid print()\n{\ncout &lt;&lt; x &lt;&lt; \" , \" &lt;&lt; y &lt;&lt; endl;\n}\n} ;\nvoid move(Point *p, int dx, int dy)\n{\np-&gt;x += dx;\np-&gt;y += dy;\n}\nint main()\n{\nPoint a, b;\na.x = b.x = 1;\na.y = b.y = 1;\nmove(&amp;a, 2, 2);\na.print();\nb.print();\n}\n</code></pre> <ul> <li>\u5176\u4e2d\uff0c\u65e0\u9700\u4f7f\u7528 <code>typedef</code> \u4e5f\u53ef\u4ee5\u76f4\u63a5\u58f0\u660e <code>Point a, b;</code></li> <li>C++ \u652f\u6301\u5c06\u51fd\u6570\u4e5f\u5199\u5165\u7ed3\u6784\u4f53\u4e2d (\u5982 print \u51fd\u6570\uff0c\u53ea\u662f\u6b64\u65f6\u4e0d\u9700\u8981 const Point *p)</li> <li>\u800c\u5bf9\u4e8e <code>move</code> \u4e5f\u5177\u6709\u53e6\u4e00\u79cd\u5199\u6cd5 (\u5373\u4e0d\u5e26 body \u7684\u51fd\u6570) </li> </ul> <pre><code>\u00b7\u00b7\u00b7\nstruct Point{   float x;\nfloat y;\nvoid init(int ix, int iy)\n{\nx = ix;\ny = iy;\n}\nvoid print()\n{\ncout &lt;&lt; x &lt;&lt; \" , \" &lt;&lt; y &lt;&lt; endl;\n}\nvoid move(int dx, int dy);\n} ;\nvoid Point::move(int dx, int dy)       //struct \u4e2d\u4e0d\u5e26 body \uff0c\u6240\u4ee5\u9700\u8981\u53e6\u7ed9\u51fa body\n{\nx += dx;\ny += dy;\n}\nint main()\n{\nPoint a, b;\na.init(1, 1);\nb.init(1, 1);\na.move(2, 2);\na.print();\nb.print();\n}\n</code></pre> <ul> <li>\u4e0a\u8ff0\u8868\u793a C \u4e2d struct \u4e2d\u652f\u6301\u6210\u5458\u53d8\u91cf\uff0cC++ \u4e2d\u4e0d\u4ec5\u652f\u6301\u6210\u5458\u53d8\u91cf\u4e5f\u652f\u6301\u6210\u5458\u51fd\u6570 (\u8fd9\u5c31\u662f C++ \u7684\u7c7b)</li> <li>C++ \u4e2d struct \u548c class \u57fa\u672c\u662f\u901a\u7528\u7684\uff0c\u552f\u6709\u51e0\u4e2a\u7ec6\u8282\u4e0d\u540c</li> </ul> struct vs. class <ul> <li>\u4f7f\u7528 class \u65f6\uff0c\u7c7b\u4e2d\u7684\u6210\u5458\u9ed8\u8ba4\u90fd\u662f private \u5c5e\u6027\u7684\uff1b\u800c\u4f7f\u7528 struct \u65f6\uff0c\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\u9ed8\u8ba4\u90fd\u662f public \u5c5e\u6027\u7684</li> <li>class \u7ee7\u627f\u9ed8\u8ba4\u662f private \u7ee7\u627f\uff0c\u800c struct \u7ee7\u627f\u9ed8\u8ba4\u662f public \u7ee7\u627f</li> <li>class \u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\uff0c\u800c struct \u4e0d\u80fd</li> </ul> <pre><code>class Point{\npublic:\nvoid init(int x, int y);\nvoid move(int dx, int dy);\nvoid print() const;\nprivate:\nint x;\nint y;\n};\n</code></pre> <p>\u77e5\u4e4e - \u53c2\u8003 CSDN - \u53c2\u8003</p>"},{"location":"Course/OOP/Lec01/#resolver","title":"::resolver","text":"<pre><code>void S::f()\n{\n::f();  //Would be recursive otherwise\n::a++;  // Select the global a\na--;    //  The a at class scope\n}\n</code></pre> <ul> <li>&lt; Class Name &gt; :: &lt; function name &gt; (:: \u662f\u7b26\u53f7, not operator)</li> <li>:: &lt; function name &gt;</li> <li><code>::f();</code> \u5728\u5f53\u524d\u8bed\u5883\u4e0b\uff0c\u82e5\u4e0d\u52a0 \u2018::\u2019 \u8868\u793a\u8c03\u7528\u81ea\u5df1\u3002\u52a0\u4e0a \u2018::\u2019 \u8868\u793a f \u4e0d\u662f\u81ea\u5df1\uff0c\u662f free/global \u7684\u51fd\u6570</li> <li>\u540c\u7406, <code>::a++;</code> \u4e5f\u8868\u793a\u5168\u5c40\u53d8\u91cf a; <code>a--;</code> \u6307\u6210\u5458\u53d8\u91cf a</li> </ul>"},{"location":"Course/OOP/Lec01/#stash","title":"Stash","text":"<p>Note</p> <p>Stash \u662f\u4e00\u79cd\u5bb9\u5668\uff0c\u53ef\u4ee5\u4fdd\u5b58\u4efb\u610f\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf (\u5c06\u4efb\u610f\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\u770b\u4f5c\u5b57\u8282\u6570\u7ec4)</p>"},{"location":"Course/OOP/Lec01/#this","title":"this","text":"<p>\u4e3a\u4ec0\u4e48\u6210\u5458\u51fd\u6570\u4e0d\u9700\u8981\u5f15\u5165\u7c7b\u4f3c <code>Point *p</code>, \u4e5f\u80fd\u8bc6\u522b\u662f\u54ea\u4e2a\u53d8\u91cf</p> <ul> <li>Realized with <code>this</code> </li> <li><code>this</code> is a hidden parameter for all member functions, with the type of the struct</li> </ul> Example <p><code>void Stash::init(int sz)</code> \u2192 can be regarded as <code>void Stash::init(Stash *this, int sz)</code></p> <ul> <li>To call the function, we must specify a variable</li> </ul> Example <p><code>Stash a;</code> <code>a.init(10);</code> \u2192 can be regarded as <code>Stash::init(&amp;a, 10);</code></p> <ul> <li>Inside member functions, you can use <code>this</code> as the pointer to the variable that calls the function</li> <li><code>this</code> is a natural local variable of all structs member functions that you can not define, but you can use it directly</li> </ul> this \u7684\u4e00\u79cd\u7528\u6cd5 <pre><code>struct Stash{\nfloat x;\nfloat y;\nvoid init(int x, int y)\n{\nthis-&gt;x = x;\nthis-&gt;y = y;\n}\n}\n</code></pre>"},{"location":"Course/OOP/Lec02/","title":"Step in Object-Oriented","text":"<p>Objects = Attributes + Services</p> <ul> <li>\u9996\u5148\u5c06 struct \u6539\u4e3a class (struct \u662f\u6307\u5185\u90e8\u6210\u5458\u7edf\u7edf\u5bf9\u5916\u5f00\u653e\u7684, class \u662f\u9ed8\u8ba4\u5916\u90e8\u4e0d\u53ef\u8bbf\u95ee\u7684)</li> </ul> <p>\u5bf9\u5916\u4e0e\u5bf9\u5185\u76f8\u5bf9\u5e94\uff0c\u5bf9\u5185\u6307\u53ef\u4ee5\u5728 struct \u4e2d\u6216\u8005\u6210\u5458\u51fd\u6570\u4e2d\u4f7f\u7528</p> Example <pre><code>\u00b7\u00b7\u00b7\nclass Point{   float x;\nfloat y;\npublic:\nvoid init(int ix, int iy)\n{\nx = ix;\ny = iy;\n}\nvoid print()\n{\ncout &lt;&lt; x &lt;&lt; \" , \" &lt;&lt; y &lt;&lt; endl;\n}\nvoid move(int dx, int dy);\n} ;\nvoid Point::move(int dx, int dy)       //struct \u4e2d\u4e0d\u5e26 body \uff0c\u6240\u4ee5\u9700\u8981\u53e6\u7ed9\u51fa body\n{\nx += dx;\ny += dy;\n}\nint main()\n{\nPoint a, b;\na.init(1, 1);\nb.init(1, 1);\na.x = b.x = 1;  // --+\na.y = b.y = 1;  // --+-- Error: \u4e0d\u53ef\u8bbf\u95ee\na.move(2, 2);\na.print();\nb.print();\n}\n</code></pre>"},{"location":"Course/OOP/Lec02/#constructor","title":"Constructor","text":"<ul> <li>Guaranteed initialization with the constructor<ul> <li>If a class has a constructor, the compiler automatically calls that constructor at the point an object is created, before client programmers can get their hands on the object.</li> <li>The name of the constructor is the same as the name of the class</li> <li><code>class</code> \u4e2d\u7684\u6784\u9020\u51fd\u6570\uff0c\u51fd\u6570\u540d\u548c\u7c7b\u7684\u540d\u5b57\u4e00\u81f4 (\u65e0\u8fd4\u56de\u7c7b\u578b)</li> </ul> </li> <li> <p>Constructors with arguments</p> <ul> <li>The constructor can have arguments to allow you to specify how an object is created, give it initialization values, and so on.</li> <li>\u5f53\u540c\u540d\u6210\u5458\u51fd\u6570\u5b58\u5728\u53c2\u6570\u65f6\uff0c\u7528\u7c7b\u6784\u9020\u5bf9\u8c61\u7684\u65f6\u5019\u8981\u4e3b\u52a8\u7ed9\u51fa\u76f8\u5e94\u7684\u503c, \u5982 <code>Point a(1, 1);</code></li> <li><code>Point *p = new Point(5, 6);</code> \u2014\u2014&gt; <code>new</code> \u505a\u4e86\u4e24\u4ef6\u4e8b<ol> <li>\u7533\u8bf7\u7a7a\u95f4</li> <li>\u8c03\u7528 Point \u7684\u6784\u9020\u51fd\u6570\uff0c\u628a 5 \u548c 6 \u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570 (\u4f46\u6784\u9020\u51fd\u6570\u6267\u884c\u7684\u65f6\u5019\u8fd9\u4e2a\u5bf9\u8c61\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u6784\u9020\u51fd\u6570\u505a\u7684\u4e8b\u60c5\u662f\u521d\u59cb\u5316) <p>\u6784\u9020\u51fd\u6570\u4e0d\u505a\u5185\u5b58\u5206\u914d</p> </li> </ol> </li> </ul> Example <pre><code>\u00b7\u00b7\u00b7\nclass Point{\nprivate:\nfloat x;\nfloat y;\npublic:\nPoint(int x, int y);    //\u540d\u5b57\u548c\u7c7b\u7684\u540d\u5b57\u4e00\u6837\uff0c\u4e14\u65e0\u8fd4\u56de\u7c7b\u578b\nvoid print();\nvoid move(int dx, int dy);\n};\nPoint::Point(int x, int y)\n{\nthis-&gt;x = x;\nthis-&gt;y = y;\n}\nvoid Point::print()\n{\n\u00b7\u00b7\u00b7\n}\nvoid Point::move(int dx, int dy)\n{\n\u00b7\u00b7\u00b7\n}\nint main()\n{\nPoint a(1, 2), b(3, 4);\n\u00b7\u00b7\u00b7\n}\n\u00b7\u00b7\u00b7\n</code></pre> </li> <li> <p>\u51fd\u6570\u7684\u91cd\u8f7d \u2014\u2014 \u5728 class \u4e2d\u6709\u591a\u4e2a\u540c\u540d\u7684\u6210\u5458\u51fd\u6570 (\u4f46\u9700\u8981\u4fdd\u8bc1\u53c2\u6570\u8868\u4e0d\u540c)</p> Example <pre><code>\u00b7\u00b7\u00b7\nclass Point{\nprivate:\nfloat x;\nfloat y;\npublic:\nPoint(int deep);\nPoint(int x, int y);\nvoid print();\nvoid move(int dx, int dy);\n};\nPoint::Point(int deep)\n{\nx = y = deep;\n}\n\u00b7\u00b7\u00b7\nint main()\n{\n\u00b7\u00b7\u00b7\nPoint c(10); //\u4f1a\u8c03\u7528\u53c2\u6570\u4e3a deep \u7684\u6210\u5458\u51fd\u6570\n\u00b7\u00b7\u00b7\n}\n\u00b7\u00b7\u00b7\n</code></pre> <ul> <li><code>Point c(10);</code> \u7b49\u4ef7\u4e8e <code>Point c=10;</code> (\u5355\u4e2a\u8d4b\u503c\u90fd\u53ef\u4ee5\u7528\u5706\u62ec\u53f7\u6216\u7b49\u53f7)</li> <li>\u7531\u4e8e\u5b58\u5728\u6784\u9020\u51fd\u6570\uff0c\u6b64\u65f6 (\u5373\u4f7f float x \u548c float y \u90fd\u662f public) \u4e0d\u518d\u652f\u6301 \u7ed3\u6784\u90a3\u6837\u7684\u65b9\u5f0f\u521d\u59cb\u5316 (<code>Point a = {1, 1};</code>)</li> </ul> </li> <li> <p>The default constructor</p> <ul> <li>A default constructor is one that can be called with no arguments</li> <li>\u6307\u7684\u662f\u5199\u4e86\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u6ca1\u6709\u53c2\u6570</li> <li>\u5982\u679c\u672a\u7ed9\u51fa\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u4ec0\u4e48\u90fd\u4e0d\u505a\u7684\u6784\u9020\u51fd\u6570\u6765\u901a\u8fc7\u7f16\u8bd1</li> </ul> Example <pre><code>struct Y{\nfloat f;\nint i;\nY(int a);\n}\n</code></pre> <ul> <li>\u6b64\u65f6: <ul> <li><code>Y y1[] = {Y(1), Y(2), Y(3)};</code> \u221a</li> <li><code>Y y2[2] = {Y(1)};</code> \u00d7 (Y \u6709\u6784\u9020\u51fd\u6570\u4e14\u4e0d\u662f\u9ed8\u8ba4\u6784\u9020\u51fd\u6570, \u5982\u4ee3\u7801\u9700\u8981\u7ed9\u51fa\u4e24\u4e2a\u6784\u9020\u51fd\u6570)</li> <li><code>Y y3[7];</code> \u00d7 (\u540c\u7406\uff0c\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u624d\u53ef\u4ee5\u8fd9\u4e48\u5199)</li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec02/#the-destructor","title":"The destructor","text":"<ul> <li>In C++, cleanuo is as important as initialization and is therefore guaranteed with the destructor</li> <li> <p>The destructor is named after the name of the class with a leading tidle (~). The destructor never has any arguments.</p> <ul> <li>The destructor is called automatically by the compiler when the objects goes out of scope.</li> <li>The only evidence for a destructor call is the closing brace of the scope that surrounds the object.</li> <li>\u5982\u4e0b\uff0c\u6790\u6784\u51fd\u6570 <code>~Y();</code> \u4f1a\u5728\u5bf9\u8c61\u7684\u7a7a\u95f4\u88ab\u56de\u6536\u4e4b\u524d\u88ab\u81ea\u52a8\u8c03\u7528.</li> </ul> <pre><code>class Y{\npublic:\n~Y();\n};\n</code></pre> Example <p><pre><code>\u00b7\u00b7\u00b7\nclass Point{\nprivate:\nfloat x;\nfloat y;\npublic:\nPoint(int deep);\nPoint(int x, int y);\nPoint(){x = 31, y = 17;}\n~Point()\n{\ncout &lt;&lt; \"~\";\nprint();\n}\nvoid print();\n\u00b7\u00b7\u00b7\n}\n\u00b7\u00b7\u00b7\nint main()\n{\nPoint a(1, 2), b(3, 4);\nPoint *p = new Point(5, 6);\nPoint c(10);\nPoint d;\nd.print();\ndelete p;\n}\n</code></pre> <pre><code>$ ./a.out\n31,17\n~5,6    # \u5bf9\u5e94 p\n~31,17  # \u5bf9\u5e94 d\n~10,10  # \u5bf9\u5e94 c\n~3,4    # \u5bf9\u5e94 b\n~1,2    # \u5bf9\u5e94 a\n</code></pre></p> <ul> <li>\u56e0\u4e3a\u6240\u6709\u53d8\u91cf\u5b9a\u4e49\u5728 main \u4e2d\uff0c\u5f53\u53d1\u751f\u5230 <code>delete</code> \u65f6\u672c\u5730\u53d8\u91cf\u751f\u5b58\u671f\u7ed3\u675f\uff0c\u5373\u6240\u6709\u53d8\u91cf\u90fd\u8981\u6790\u6784 (\u6790\u6784\u7684\u987a\u5e8f\u65f6\u6784\u9020\u7684\u9006\u5e8f)</li> <li>\u5982\u679c main \u4e2d\u4fee\u6539\u5982\u4e0b</li> </ul> <p><pre><code>int main()\n{\nPoint a(1, 2), b(3, 4);\nPoint *p = new Point(5, 6);\n{\nPoint c(10);\n}\nPoint d;\nd.print();\ndelete p;\n}\n</code></pre> <pre><code>$ ./a.out\n~10,10  # \u5bf9\u5e94 c\n31,17\n~5,6    # \u5bf9\u5e94 p\n~31,17  # \u5bf9\u5e94 d\n~3,4    # \u5bf9\u5e94 b\n~1,2    # \u5bf9\u5e94 a\n</code></pre></p> <ul> <li>\u56e0\u4e3a c \u51fa\u4e86\u62ec\u53f7\u5c31\u7ed3\u675f\u4e86\uff0c\u6240\u4ee5\u5148\u88ab\u6790\u6784</li> </ul> </li> </ul> Global objects <ul> <li>Consider</li> </ul> <pre><code>#include \"X.h\"\nX global_x1(1, 2);\nX global_x2(3, 4);\n</code></pre> <ul> <li>Constructors are called before entering <code>main()</code><ul> <li>Order controlled by appearance in file</li> <li>In this case, <code>global_x1</code> before <code>global_x2</code></li> <li><code>main()</code> is no longer the first function called</li> </ul> </li> <li>Destructors called when<ul> <li><code>main()</code> exits</li> <li><code>exit()</code> is called</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec02/#storage-allocation","title":"Storage allocation","text":"<ul> <li>The compiler allocates all the storage for a scope at the opening brace of that scope</li> <li>The constructor call doesn\u2019t happen until the sequence point where the object is defined</li> </ul>"},{"location":"Course/OOP/Lec02/#initialization","title":"Initialization","text":""},{"location":"Course/OOP/Lec02/#initializer-list","title":"Initializer list","text":"<p>code</p> <pre><code>class Point{\nPrivate:\nconst float x, y;\nPoint(float xa = 0.0, float ya = 0.0): x(xa), y(ya){}\n};\n</code></pre> <p><code>Point(float xa = 0.0, float ya = 0.0): x(xa), y(ya){}</code> \u4e2d <code>: x(xa), y(ya)</code> \u5373\u521d\u59cb\u5316\u5217\u8868\u5f62\u5f0f</p> <ul> <li>Can initialize any type of data<ul> <li>pseduo-constructor calls for built-in types</li> <li>No need to perform assignment within body of constructor</li> </ul> </li> <li>Order of initialization is order of declaration<ul> <li>Not the order in Initializer list!</li> <li>Destoryed in reverse order of declaration</li> <li>\u6bd4\u5982\u5373\u4fbf\u5728 Initializer list \u4e2d <code>Point(float xa = 0.0, float ya = 0.0): y(ya), x(xa){}</code>\uff0c <code>ya</code> \u5728 <code>xa</code> \u4e4b\u524d\u58f0\u660e\uff0c\u4f46\u662f\u7531\u4e8e\u6210\u5458\u53d8\u91cf\u58f0\u660e <code>x</code> \u5728 <code>y</code> \u4e4b\u524d\uff0c\u6240\u4ee5 <code>x</code> \u4f1a\u5148\u88ab\u521d\u59cb\u5316</li> <li><code>Point(float xa = 0.0, float ya = 0.0): y(ya), x(y){}</code> \u5c31\u4e0d\u4f1a\u7b26\u5408 <code>x = y = ya</code></li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec02/#others","title":"Others","text":"\u7f16\u7a0b\u89c4\u8303 <ul> <li>Declarations vs. Definitions<ul> <li>cpp file \u2014\u2014 compile unit</li> <li>Only declarations are allowed to be in .h (). Declarations are as follows: <ul> <li>extern variables</li> <li>function prototypes</li> <li>class/struct declaration</li> <li>inline function</li> <li>Others are Definitions</li> </ul> </li> </ul> </li> <li> <ul> <li>All .h files should look like this: </li> </ul> <p>Standard header file structure </p> <pre><code>#ifdef  HEADER_FLAG\n#define HEADER_FLAG\n//Type declaration here\n#endif  //HEADER_FLAG\n</code></pre> </li> <li> <p>Tips for header</p> <ul> <li>One class declaration per header file</li> <li>Associated with one source file in the same prefix of file name</li> <li>The contents of a header file is surrounded with <code>#ifdef #define #endif</code> </li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec03/","title":"Container | \u5bb9\u5668","text":""},{"location":"Course/OOP/Lec03/#stl","title":"STL","text":"<p>Abstract</p> <p>\u5728 C++ \u4e2d\uff0c\u5bb9\u5668\u662f STL \u4e2d\u7684\u6a21\u677f\u63d0\u4f9b\u7684</p> <ul> <li>STL = Standard Template Library | \u6807\u51c6\u6a21\u677f\u5e93</li> <li>Part of the ISO Standard C++ Library</li> <li>Data Structures and algorithms for C++</li> </ul> Why use STL <ul> <li>Reduce development time</li> <li>Code readability</li> <li>Robustness</li> <li>Portable code</li> <li>Maintainable code</li> <li>Easy</li> </ul> <ul> <li>Library includes:<ul> <li>A Pair class (pairs of anything, int/int, int/char, etc)</li> <li>Containers<ul> <li>vector (expandable array)</li> <li>deque (expandable array, expands at both ends)</li> <li>list (double-linked)</li> <li>sets and maps</li> </ul> </li> <li>Basic Algorithms (sort, search, etc)</li> </ul> </li> <li>All identifiers in library are in std namespace (<code>using namespace std;</code>)</li> <li>The three parts of STL<ul> <li>Containers</li> <li>Algorithms</li> <li>Iterators</li> </ul> </li> <li>Top 3 data structures<ul> <li><code>map</code><ul> <li>Any key type, any value type</li> <li>sorted</li> </ul> </li> <li><code>vector</code><ul> <li>like c array, but auto-extending</li> </ul> </li> <li><code>list</code><ul> <li>doubly-linked list</li> </ul> </li> </ul> </li> <li>All Sequential Containers<ul> <li>vector: variable array</li> <li>deque: dual-end queue</li> <li>list: double-linked-list</li> <li>forward_list: as it</li> <li>array: as \u201carray\u201d</li> <li>string: char.array</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec03/#vector-class","title":"Vector Class","text":"Example <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n// Use namespace so that you can refer to vectors in C++ library\n#include &lt;vector&gt;\nint main()\n{\nvector&lt;int&gt; x;  //Just declare a vector of ints(no need to worry about size)\nfor(int a = 0; a &lt; 1000; a++)\n{\nx.push_back(a); //Add elements\n}\n/* Have a pre-defined iterator for vector class, can use it to print out the items in vector */\nvector&lt;int&gt;::iterator p;    for(p = x.begin(); p &lt; x.end(); p++)\n{\ncout &lt;&lt; *p &lt;&lt; \" \";\n}\nreturn 0;\n}\n</code></pre> <ul> <li><code>vector&lt;int&gt; x;</code> \u4e2d <code>x</code> \u662f\u53d8\u91cf\u7684\u540d\u5b57\uff0c<code>&lt;int&gt;</code> \u8868\u793a\u8981\u5728 vector \u91cc\u9762\u653e <code>int</code>\u7c7b\u578b\u7684\u6570\u636e</li> <li><code>::iterator</code> \u8868\u793a vector \u4e2d\u7684\u7c7b <code>iterator</code>\uff0c\u53ef\u4ee5\u5bf9 <code>vector of int</code> \u679a\u4e3e, \u62ff\u51fa\u6765\u7684\u6bcf\u4e00\u4e2a\u90fd\u5e94\u8be5\u662f <code>int</code></li> <li><code>begin</code> \u4f1a\u8fd4\u56de\u4e00\u4e2a\u679a\u4e3e\u5668\uff0c\u7528\u8fd9\u4e2a\u679a\u4e3e\u5668\u53ef\u4ee5\u679a\u4e3e\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20</li> </ul> <ul> <li>It is able to increase its internal capacity as required: as more items are added, it simply makes enough room for them</li> <li>It keeps its own private count of how many items it is currently storing. Its size method returns the number of objects currently in it</li> <li>In maintains the order of items you insert into it. You can later retrieve them in the same order.</li> </ul>"},{"location":"Course/OOP/Lec03/#basic-vector-operations","title":"Basic Vector Operations","text":"<ul> <li>Constructors <ul> <li><code>vector&lt;ElementType&gt; c;</code></li> <li><code>vector&lt;ElementType&gt; c1(c2);  //c1 \u53ef\u4ee5\u5f97\u5230 c2 \u91cc\u7684\u6240\u6709\u5185\u5bb9</code></li> </ul> </li> <li>Simple Methods<ul> <li><code>V.size(); //num items</code></li> <li><code>V.empty(); //Judge if empty</code></li> <li><code>==, !=, &lt;, &gt;, &lt;=, &gt;= //\u6bd4\u8f83\u4e24\u4e2a vector \u7684\u5927\u5c0f\uff0c\u4f9d\u6b21\u62ff\u5bf9\u5e94\u5143\u7d20\u6bd4\u8f83</code></li> <li><code>V.swap(v2); //swap \u4e24\u4e2a vector \u7684\u5168\u90e8\u5185\u5bb9</code></li> </ul> </li> <li>Iterators<ul> <li><code>I.begin(); //first positiion</code></li> <li><code>I.end();  //last position</code></li> </ul> </li> <li>Element access<ul> <li><code>V.at(index)</code></li> <li><code>V[index]</code></li> <li><code>V.front(); //first item</code></li> <li><code>V.back();  //last item</code></li> </ul> </li> <li>Add/Remove/Find<ul> <li><code>V.push_back(e);</code></li> <li><code>V.pop_back(e);</code></li> <li><code>V.insert(position, e); // position \u662f\u4e00\u4e2a iterator\uff0c\u4e0d\u80fd\u4f7f\u7528 1\uff0c2\uff0c3</code></li> <li><code>V.erase(position); // size will change after \"erase\"</code></li> <li><code>V.clear();</code></li> <li><code>V.find(first, last, item);</code></li> </ul> </li> </ul> Pitfalls WRONGRIGHT <ul> <li>Accessing an invalid vector&lt;&gt; element<ul> <li><code>vector&lt;int&gt; v;</code></li> <li><code>v[100] = 1; //Whooops!</code></li> </ul> </li> </ul> <ul> <li>use <code>push_back()</code> </li> <li>Preallocate with constructor</li> <li>Reallocation with <code>reserve()</code></li> <li>Check <code>capacity()</code> </li> </ul>"},{"location":"Course/OOP/Lec03/#list-class","title":"List Class","text":"<p>\u53cc\u5411\u94fe\u8868</p> <ul> <li>Same basic concepts as vector<ul> <li>Constructors</li> <li>Ability to compare lists (==, !=, &lt;, &gt;, &lt;=, &gt;=)</li> <li>Ability to access front and back of list<ul> <li><code>x.front(), x.back()</code></li> </ul> </li> <li>Ability to assign items to a list, remove items <ul> <li><code>x.push_back(item), x.push_front(item)</code></li> <li><code>x.pop_back(), x.pop_front()</code></li> <li><code>x.remove(item)</code></li> </ul> </li> </ul> </li> </ul> code Sample List Application<pre><code>#include &lt;iostream&gt;\n#include &lt;list&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main()\n{\nlist&lt;string&gt; s;\ns.push_back(\"hello\");\ns.push_back(\"world\");\ns.push_front(\"tide\");\ns.push_front(\"crimson\");\nlist&lt;string&gt;::iterator p;\nfor(p = s.begin(); p != s.end(); p++)\n{\ncout &lt;&lt; *p &lt;&lt; \" \";\n}\ncout &lt;&lt; endl;\n}\n</code></pre> <ul> <li>Note the termination condition for the for loop: <code>p != s.end()</code></li> </ul> Pitfalls WRONGRIGHT <ul> <li>Using invalid iterator<ul> <li><code>list&lt;int&gt; L; list&lt;int&gt;::iterator li;</code></li> <li><code>li = L.begin();  L.erase(li);</code></li> <li><code>++li; // WRONG - \u6b64\u65f6 li \u5df2\u7ecf\u88ab erase</code></li> </ul> </li> </ul> <ul> <li>Use return value of erase to advance<ul> <li><code>li = L.erase(li); //RIGHT</code></li> <li>\u6b64\u65f6 li \u6307\u5411\u7684\u662f\u539f\u6765\u7684\u4e0b\u4e00\u4e2a</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec03/#maps","title":"Maps","text":"<ul> <li>Maps are collections that contain pairs of values.</li> <li>Pairs consist of a key and a value (\u6545\u58f0\u660e\u8981\u6307\u5b9a\u4e24\u4e2a\u7c7b\u578b)</li> <li>Lookup works by supplying a key, and retrieving a value</li> <li>An example: a telephone book</li> </ul> Example <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;map&gt;\nusing namespace std;\nint main()\n{\nmap&lt;string, float&gt; price;\nprice[\"apple\"] = 0.75;\n}\n</code></pre> Pitfalls WRONGRIGHT <ul> <li>Inadvertently inserting into map&lt;&gt;<ul> <li><code>if(foo[\"bob\"] == 1)  //silently created entry \"bob\"</code></li> </ul> </li> </ul> <ul> <li>Use <code>count()</code> to check for a key without creating a new entry<ul> <li><code>if(foo.count(\"bob\"))</code></li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec03/#iterator","title":"Iterator","text":"<p>use list as example <code>list&lt;int&gt; L;</code></p> <ul> <li>Declaring<ul> <li><code>list&lt;int&gt;::iterator li;</code></li> </ul> </li> <li>Front of container<ul> <li><code>li = L.begin();</code></li> </ul> </li> <li>Past the end<ul> <li><code>li = L.end();</code></li> </ul> </li> <li>Can increment<ul> <li><code>li = L.begin();</code></li> <li><code>++li; // second item</code></li> </ul> </li> <li>Can be dereferenced<ul> <li><code>*li = 10;</code></li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec03/#self-defined-classes-in-stl-containers","title":"Self-defined classes in STL Containers","text":"<ul> <li>Might need:<ul> <li>Assignment Operator -&gt; <code>operator=()</code></li> <li>Default Constructor</li> </ul> </li> <li>For sorted types, like map&lt;&gt;<ul> <li>Need less-than operator -&gt; <code>operator&lt;()</code><ul> <li>Some types have this by default (<code>int, char, string</code>)</li> <li>Some do not (<code>char *</code>)</li> </ul> </li> </ul> </li> </ul> Example <pre><code>\u00b7\u00b7\u00b7\nclass Student{\npublic:\nint x;\nStudent(int k) : x(k) {}\n};\nint main()\n{\nvector&lt;Student&gt;  ss;   vector&lt;Student&amp;&gt; sl;   vector&lt;Student*&gt; sp;    \u00b7\u00b7\u00b7\n}\n</code></pre> <ul> <li><code>vector&lt;Student*&gt; sp;</code> \u8868\u793a vector \u4e2d\u5b58\u7684\u662f\u6307\u9488</li> </ul>"},{"location":"Course/OOP/Lec03/#other-data-structures","title":"Other data structures","text":"<ul> <li>set, multiset, multimap</li> <li>queue, priority_queue</li> <li>stack, deque</li> <li>slist, bitset, valarray</li> </ul>"},{"location":"Course/OOP/Lec04/","title":"Object Interactive | \u5bf9\u8c61\u4ea4\u4e92","text":""},{"location":"Course/OOP/Lec04/#local-variable","title":"local variable","text":"<ul> <li>Local variables are defined inside a method, have a scope limited to the method to which they belong</li> </ul> Example <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint value = 0xdeadbeef;\nclass A {\nprivate:\nint value;\npublic:\nA():value(0xabababab) {}\nvoid f(){\nint value = 0xcdcdcdcd;\ncout &lt;&lt; hex &lt;&lt; value &lt;&lt; endl;       // \u672c\u5730\u53d8\u91cf value -&gt; 0xcdcdcdcd\ncout &lt;&lt; hex &lt;&lt; this-&gt;value &lt;&lt; endl; // \u6210\u5458\u53d8\u91cf value -&gt; 0xabababab\ncout &lt;&lt; hex &lt;&lt; ::value &lt;&lt; endl;     // \u5168\u5c40\u53d8\u91cf value -&gt; 0xdeadbeef\n}\n};\nint main()\n{\nA a;\na.f();\n}\n</code></pre>"},{"location":"Course/OOP/Lec04/#initialization","title":"Initialization","text":"<ul> <li> <p>Member Init</p> <ul> <li>Directly initialize a member (benefit: for all constructors)</li> <li>Only C++11|| works</li> </ul> Example <pre><code>class A{\nprivate:\nint A = 10;\n\u00b7\u00b7\u00b7\n};\n</code></pre> </li> <li> <p>Initializer list</p> </li> </ul> initialization vs. assignment <ul> <li><code>Student::Student(string s):name(s) {}</code><ul> <li>initiazlization before constructor</li> </ul> </li> <li><code>Student::Student(string s) { name = s; }</code><ul> <li>assignment in constructor (\u5728\u8d4b\u503c\u524d\uff0cname \u5df2\u7ecf\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32)</li> <li>string must have a default constructor</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec04/#function-overloading","title":"Function overloading | \u51fd\u6570\u91cd\u8f7d","text":"<ul> <li>Same functions with different arguments list</li> </ul> <pre><code>void print(char* str, int width);   // #1\nvoid print(double d, int width);    // #2\nvoid print(long l, int width);      // #3\nvoid print(int i, int width);       // #4\nvoid print(char *str);              // #5\nprint(\"Hello\", 10);                 // #1\nprint(1.234, 10);                   // #2\nprint(123456789L, 10);              // #3\nprint(123456789, 10);               // #4\nprint(\"Hello\");                     // #5\n</code></pre> <p>Overload and auto-cast</p> <pre><code>\u00b7\u00b7\u00b7\nvoid f(short i) { cout &lt;&lt; \"short\" &lt;&lt; endl; }\nvoid f(double d) { cout &lt;&lt; \"double\" &lt;&lt; endl; }\nint main()\n{\nf('a');       // ambiguous (char -&gt; short or char -&gt; double)\nf(1);         // ambiguous (int -&gt; short or int -&gt; double)\nf(1L);        // ambiguous (long -&gt; short or long -&gt; double)\nf(1.0);       // right\n}\n\u00b7\u00b7\u00b7\n</code></pre>"},{"location":"Course/OOP/Lec04/#default-arguments","title":"Default arguments","text":"<ul> <li>A default argument is a value given in the declaration that the compiler automatically inserts if you don\u2019t provide a value in the function call</li> <li>To define a function with an argument list, defaults must be added from right to left</li> </ul> <pre><code>int a(int n, int m = 4, int j = 5);\nint b(int n, int m = 4, int j); // error\nint c(int n = 1, int m = 2, int j = 3); Ha = a(1);      // n = 1, m = 4, j = 5\nHa = a(1, 2);   // n = 1, m = 2, j = 5\n</code></pre> <p>Note</p> <p>\u9ed8\u8ba4\u53c2\u6570\u8981\u5199\u5728\u51fd\u6570\u58f0\u660e\u4e2d\uff0c\u51fd\u6570\u5b9a\u4e49\u4e2d\u4e0d\u80fd\u91cd\u590d\u5199\u9ed8\u8ba4\u53c2\u6570</p>"},{"location":"Course/OOP/Lec04/#c-access-control","title":"C++ access control","text":"<ul> <li>The members of a class can be cataloged, marked as <ul> <li>public -&gt; means all member declarations that follow are available to everyone</li> <li>private -&gt; means that no one can access that member except inside function members of that type</li> <li>protected -&gt; \u5bf9\u5b50\u7c7b\u6709\u6548</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec04/#friends","title":"Friends | \u53cb\u5143","text":"<ul> <li>to explicitly grant access to a function that isn\u2019t a member of the structure</li> <li>The class itself controls which code has access to its members</li> <li>Can declare a global function as a friend , as well as a member function of another class, or even an entire class, as a friend</li> <li>friend is a declaration rather than a definition</li> </ul> Example <pre><code>struct Y{\nvoid f(X*);\n};\nstruct X{\nprivate:\nint i;\npublic:\nvoid initialize();\nfriend void g(X*, int); // Global friend\nfriend void Y::f(X*);   // Struct member friend\nfriend struct Z;    // Entire struct is a friend\n};\n</code></pre> \u53cb\u5143 codeoutput\u6d4b\u8bd5\u65f6\u7684\u4e00\u4e2a\u95ee\u9898 <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A;\nclass B\n{\nprivate:\nint value;\npublic:\nB():value(0x12345678){}\nvoid Print(A a);\n};\n//void Print(A a);\nclass A {\nprivate:\nfriend void Print(A a);\nint value;\npublic:\nfriend void B::Print(A a);\nA():value(0xabababab){}\n};\nvoid B::Print(A a)\n{\ncout &lt;&lt; \"B::Print\" &lt;&lt; endl;\ncout &lt;&lt; hex &lt;&lt; value &lt;&lt;endl; // \u6210\u5458\u53d8\u91cf value -&gt; 0x12345678\ncout &lt;&lt; a.value &lt;&lt; endl;     // \u6210\u5458\u53d8\u91cf value -&gt; 0xabababab\n}\nvoid Print(A a)\n{\ncout &lt;&lt; \"Global Print\" &lt;&lt; endl;\ncout &lt;&lt; a.value &lt;&lt; endl;     // \u6210\u5458\u53d8\u91cf value -&gt; 0xabababab\n}\nint main()\n{\nA a;\nB b;\nb.Print(a);\nPrint(a);\nreturn 0;\n}\n</code></pre> <pre><code>B::Print\n12345678\nabababab\nGlobal Print\nabababab\n</code></pre> <ul> <li>\u521a\u5f00\u59cb\u7684\u65f6\u5019\u628a\u53cb\u5143\u51fd\u6570\u653e\u5230 <code>public</code> \u4e0b\u4e86\uff0c\u4e00\u76f4\u6ce2\u6d6a\u7ebf\u9519\u8bef</li> <li>\u540e\u6765\u653e\u5230 <code>A</code> \u6700\u524d\u9762\u5c31\u597d\u4e86\uff08\u4e0d\u786e\u5b9a\u662f\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898</li> <li>\u540e\u6765\u53c8\u8bd5\u4e86\u8bd5\u653e\u5230 <code>A</code> \u7684\u4efb\u610f\u4f4d\u7f6e\u90fd\u662f\u6b63\u5e38\u53ef\u7528\u7684\ud83d\ude30</li> </ul> Quote <p>\u4e00\u4e2a\u5173\u4e8e\u53cb\u5143\u7684\u5341\u5206\u901a\u4fd7\u7684\u4f8b\u5b50</p>"},{"location":"Course/OOP/Lec04/#inline-functions","title":"Inline Functions","text":"<p>Inline \u7684 body \u662f\u58f0\u660e\uff0c\u4e0d\u662f\u5b9a\u4e49</p> <ul> <li>In order to solve the problem that some frequently called small functions consume a large amount of stack space (stack memory), inline functions are introduced</li> <li>An inline function is expected in place, like a preprocessor macro, so the overhead of the function call is eliminated</li> </ul> <pre><code>inline int plusOne(int x);\ninline int plusOne(int x){ return ++x; };\n</code></pre> <ul> <li>Repeat inline in the definition and declaration</li> <li>An inline function definition may not generate any code in .obj file</li> <li>Inline functions in header file<ul> <li>So you can put inline functions\u2019 bodies in header file. Then <code>#include</code> it where the function is needed</li> <li>Never be afraid of multi-definition of inline functions, since they have no body at all</li> <li>Definitions of inline functions are just declarations</li> </ul> </li> <li> <p>Inline inside classes</p> <ul> <li>Any function you define inside a class declaration is automatically an inline</li> </ul> <p>\u5728\u7c7b\u4e2d\u4f7f\u7528 inline \u51fd\u6570\uff0c\u8981\u4e48\u628a\u4e3b\u4f53\u653e\u5728 class \u5185\uff0c\u8981\u4e48\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff08inline \u662f\u58f0\u660e\uff0c\u4e0d\u662f\u5b9a\u4e49\uff09</p> Example insideoutside <pre><code>class A{\npublic:\ninline void f(){ } // automatically inline (`inline` can be omitted)\n};\n</code></pre> <pre><code>class A{\npublic:\ninline void f();    // `inline` can be omitted\n};\ninline void A::f(){} // OK\n</code></pre> </li> <li> <p>Tradeoff of inline functions</p> <ul> <li>Body of the called function is to be inserted into the caller</li> <li>This may expand the code size</li> <li>but deduces the overhead of calling time</li> <li>So it gains speed at the expenses of space</li> <li>In most cases, it is worth</li> <li>It is much better than macro in C. It checks the type of the parameters</li> </ul> </li> <li>Inline may not in-line<ul> <li>The compiler does not have to honor your request to make a function inline. It might decide the function is too large or notice that is calls itself(recursion is not allowed or indeed possible for inline functions), or the feature might not be implemented for your particular compiler</li> </ul> </li> <li>Inline or not?<ul> <li>Inline:<ul> <li>Small functions</li> <li>Frequently called functions, e.g. inside loops</li> </ul> </li> <li>Not Inline:<ul> <li>Very large functions</li> <li>Recursive functions</li> </ul> </li> <li>A lazy way<ul> <li>Make all your functions inline</li> <li>Never make any function inline</li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec05/","title":"Key Words | \u5173\u952e\u5b57","text":""},{"location":"Course/OOP/Lec05/#const","title":"<code>Const</code>","text":"<ul> <li>declares a variable to have a constant value</li> <li>Constants are variables<ul> <li>Observe scoping rules</li> <li>Declared with \u201cconst\u201d type modifier</li> </ul> </li> <li>A const in C++ defaults to internal linkage<ul> <li>the compiler tries to avoid creating storage for a const \u2013 holds the value in its symbol table</li> <li>extern forces storage to be allocated</li> </ul> </li> <li>Compile time constants<ul> <li><code>const int bufsize = 1024;</code></li> <li>value must be initialized</li> <li>unless you make an explict extern declaration: <code>extern const int bufsize;</code></li> <li>Compiler won\u2019t let you change it</li> <li>Compile time constants are entries in compiler symbol table, not really variables</li> </ul> </li> <li> <p>Run-time constants</p> <ul> <li>const value can be expolited</li> </ul> RIGHTWRONG <pre><code>const int size = 10;\nint finalGrade[size];   // ok\n</code></pre> <pre><code>int x;\ncin &gt;&gt; x;\nconst int size = x;\nint finalGrade[size];   // error!\n</code></pre> </li> <li> <p>Aggregates</p> <ul> <li>It\u2019s possible to use const for aggregates, but storage will allocated. In these situations, const means \u201cread-only\u201d. However, the value cannot be used at compile time because the compiler is not required to know the contents of the storage at compile time.</li> </ul> </li> <li> <p>Pointers and const \u2013 a pointer may be const</p> <ul> <li><code>char * const p = \"abc\";</code> \u2013 <code>p</code> is a const pointer to char<ul> <li><code>*q = 'c';</code> \u2013 ok</li> <li><code>q++;</code> \u2013 error</li> </ul> </li> <li><code>const char * p = \"abc\";</code> \u2013 <code>*p</code> is a const char<ul> <li><code>*p = 'c';</code> \u2013 error</li> <li>\u6307\u9488\u53ef\u53d8\uff08\u6307\u5411\u522b\u4eba\uff09\uff0c\u6307\u9488\u6240\u6307\u5411\u7684\u5185\u5b58\u4e5f\u53ef\u53d8\uff0c\u4e0d\u80fd\u505a\u7684\u662f\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u6539\u53d8\u6307\u5411\u5185\u5b58\u7684\u503c</li> </ul> </li> <li><code>char const * p = \"abc\";</code> \u2013 same as above <code>const char * p = \"abc\";</code></li> </ul> Example <pre><code>int * ip;\nconst int * cip;\nint i;\nip = &amp;i;    // ok\ncip = &amp;i;   // ok, but can't use cip to change i\nconst int ci = 3;\nip = &amp;ci;   // error, ip is not const but ci is\ncip = &amp;ci;  // ok , both cip and ci is const\n</code></pre> </li> <li> <p>String Literals</p> <ul> <li><code>char *s = \"Hello\";</code></li> <li><code>s</code> is a pointer initialized to point to a string constant</li> <li>This is actually a <code>const char *s</code>, but compiler accepts it</li> <li>Don\u2019t try to change the character (it is undefined behavior)</li> <li>If you want to change the string, put it in an array \u2013 <code>char s[] = \"Hello\";</code> </li> </ul> </li> <li> <p>const object</p> <ul> <li><code>const Currency price(3, 50);</code></li> <li>\u6b64\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u5236\u6b62\u4fee\u6539 <code>price</code> \u4e2d public \u6210\u5458\u53d8\u91cf\u4ee5\u53ca\u8c03\u7528 <code>price</code> \u4e2d\u4fee\u6539\u6210\u5458\u53d8\u91cf\u51fd\u6570\u7684\u64cd\u4f5c</li> </ul> \u7f16\u8bd1\u5668\u600e\u4e48\u77e5\u9053\u8c03\u7528\u4e86\u4f1a\u4fee\u6539\u6210\u5458\u53d8\u91cf\u7684\u51fd\u6570 (\u975e inline) <ul> <li>\u5f15\u5165\u65b0\u673a\u5236 - declare member functions as const</li> </ul> <pre><code>int Date::set_day(int d) {\n// ... error check d here\nday = d;    // ok, non-const so can modify\n}\nint Date::get_day() const\n{\nday ++;    // ERROR modifies data member\nset_day(1); // ERROR calls non-const function\nreturn day; // ok, doesn't modify anything\n}\n</code></pre> <ul> <li>\u6b64\u65f6\u82e5 Date \u7c7b\u7684\u5bf9\u8c61\u4e3a const\uff0c\u90a3\u4e48\u8be5\u5bf9\u8c61\u4e0d\u80fd\u8c03\u7528\u9664 const\u3001static \u4e4b\u5916\u7684\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u5426\u5219\u4f1a\u62a5\u9519</li> <li>\u6210\u5458\u51fd\u6570\u58f0\u660e\u5c3e\u90e8\u5e26\u6709 const\uff0c\u90a3\u4e48\u53ea\u80fd\u8c03\u7528\u5e26\u6709 const \u7684\u6210\u5458\u51fd\u6570\u4e14\u65e0\u6cd5\u4fee\u6539\u6210\u5458\u51fd\u6570\u7b49</li> <li>Const member function usage<ul> <li>Repeat the <code>const</code> keyword in the function declaration and definition if the function is defined outside the class definition</li> <li><code>int get_day() const;</code> &amp; <code>int Date::get_day() const { ... }</code></li> </ul> </li> <li>Function members that do not modify the object should be declared const</li> <li>const member functions are safe for const objects</li> </ul> const member functions can be overloaded code <pre><code>\u00b7\u00b7\u00b7\nclass Date\n{\npublic:\nint get_day() const { cout &lt;&lt; \"const\" &lt;&lt; endl; }\nint get_day() { cout &lt;&lt; \"non-const\" &lt;&lt; endl; }\n};\nint main()\n{\nDate a;\nconst Date b;\na.get_day();    // print -&gt; \"non-const\"\nb.get_day();    // print -&gt; \"const\"\n}\n</code></pre> <ul> <li><code>int get_day() const;</code> &amp; <code>int get_day();</code></li> <li><code>const</code> is part of the function signature</li> <li>As the code showed right, when coming across member functions with same name and arguments, <code>const</code> object will call <code>const</code> member function, non-<code>const</code> object will call non-<code>const</code> member function</li> <li><code>get_day()</code> &amp; <code>get_day() const</code> \u770b\u8d77\u6765\u6ca1\u6709\u53c2\u6570\uff0c\u5b9e\u9645\u6709\u9690\u85cf\u53c2\u6570<ul> <li><code>int get_day()</code> -&gt; <code>int get_day(Date *this)</code></li> <li><code>int get_day() const</code> -&gt; <code>int get_day(const Date *this)</code></li> </ul> </li> <li>\u7f16\u8bd1\u5668\u5c31\u53ef\u901a\u8fc7 <code>this</code> \u6765\u5224\u65ad</li> </ul> </li> <li> <p>Constant in class</p> <ul> <li><code>const</code> object\u2019s member variable (non-const) must be initialized in constructor or initializer list (\u5373\u4f60\u8ba4\u4e3a\u8fd9\u4e2a\u5bf9\u8c61\u4e0d\u53ef\u6539\u53d8\uff0c\u4f46\u8fd9\u4e2a\u5bf9\u8c61\u91cc\u9762\u7684\u53d8\u91cf\u8d77\u7801\u8981\u6709\u4e2a\u503c)</li> <li>if the member variable is a const<ul> <li>must be initialized in the initializer list</li> <li>or directly initialized in the class definition (for  c++11 and later) -&gt; <code>const int a = 1;</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec05/#static","title":"<code>static</code>","text":"<p>Static in C++</p> <ul> <li>Two basic meanings<ul> <li>Static storage duration<ul> <li>allocated once at a fixed address</li> </ul> </li> <li>Visibility of a name<ul> <li>internal linkage</li> </ul> </li> <li>Don\u2019t use except inside functions and classes</li> </ul> </li> </ul> codeoutput <pre><code>class A\n{\nconst int a;    public:\nA() :a(0) {\ncout &lt;&lt; \"A() called\" &lt;&lt; endl;\n}\n};\nvoid f()\n{\ncout &lt;&lt; \"in f()\" &lt;&lt; endl;\nstatic A a;\ncout &lt;&lt; \"out f()\" &lt;&lt; endl;\n}\nint main()\n{\ncout &lt;&lt; \"in main()\" &lt;&lt; endl;\nf();\ncout &lt;&lt; \" ------------ \" &lt;&lt; endl;\nf();\ncout &lt;&lt; \"out main()\" &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <pre><code>in main()\nin f()\nA() called\nout f()\n------------ in f()\nout f()\nout main()\n</code></pre> <ul> <li>\u53ea\u6709\u8fdb\u5165 f \u51fd\u6570\u65f6\uff0c\u624d\u4f1a\u8c03\u7528 A \u7684\u6784\u9020\u51fd\u6570\uff0c\u4e14\u53ea\u8c03\u7528\u4e00\u6b21 (static \u7684\u5b58\u50a8\u5730\u5740\u4e0d\u5728\u6808\u4e2d\u800c\u5728\u5168\u5c40\u4e2d)</li> <li> <p>Static applied to objects</p> <ul> <li>Constructor occurs when definition is encountered<ul> <li>Constructor is called only once</li> <li>The constructor arguments must be satisfied</li> </ul> </li> <li>Destruction take place on exit from the program<ul> <li>Compiler assures LIFO order of destruction</li> </ul> </li> </ul> Conditional construction exampleexplanation <pre><code>void f(int x)\n{\nif(x &gt; 10)\n{\nstatic X my_X(x,  x * 21);\n\u00b7\u00b7\u00b7\n}\n}\n</code></pre> <ul> <li><code>my_X</code> is constructed once, if <code>f()</code> is ever called with <code>x &gt; 10</code></li> <li>retains its value</li> <li>destroyed only if constructed</li> </ul> Tip <ul> <li>avoid non-local static dependencies</li> <li>Put static object definitions in a single file in correct order</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec05/#static-members","title":"Static members","text":"Can we apply static to members <ul> <li>Static means \u201cHidden\u201d &amp; \u201cPersistent\u201d</li> <li>Hidden: A static member is a member (obey usual access rules)</li> <li>Persistent: Independent of instances</li> <li>\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u4f3c\u9759\u6001\u672c\u5730\u53d8\u91cf\uff0c\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u8bbf\u95ee\u9650\u5236\u4e8e\u7c7b\u4e2d</li> <li>\u9759\u6001\u6210\u5458\u51fd\u6570\u662f\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf</li> </ul> <ul> <li>Static member variables<ul> <li>Global to all class member functions</li> <li>Initialized once, at file scope</li> <li>provide a place for this variable and init it in <code>.cpp</code></li> <li>No <code>static</code> in <code>.cpp</code></li> </ul> </li> </ul> Example StatMem.hStatMem.cppoutputexplanation <pre><code>#ifndef _STAT_MEM_\n#define _STAT_MEM_\nclass StatMem{\npublic:\nint getHeight() { return m_h; }\nvoid setHeight(int i) { m_h = i; }\nint getWeight() { return m_w; }\nvoid setWeight(int i) { m_w = i; }\nstatic int m_h;\nint m_w;\n};\n#endif\n</code></pre> <pre><code>#include \"StatMem.h\"\n#include &lt;iostream&gt;\nusing namespace std;\nint StatMem::m_h;   // \u4e00\u4e2a\u9759\u6001\u7684\u6210\u5458\u53d8\u91cf\u4e00\u5b9a\u8981\u5728\u5bf9\u5e94\u7684 cpp \u6587\u4ef6\u4e2d\u653e\u4e00\u4e2a\u5168\u5c40\u7684\u5b9a\u4e49\nint main()\n{\nStatMem sm1, sm2;\nint i = 0;\ncout &lt;&lt; sizeof(i) &lt;&lt; endl;\ncout &lt;&lt; \"i=\" &lt;&lt; i &lt;&lt; endl;\nsm1.setHeight(10);\ncout &lt;&lt; sm2.getHeight() &lt;&lt; endl;\nsm1.setWeight(20);\ncout &lt;&lt; sm2.getWeight() &lt;&lt; endl;\ncout &lt;&lt; &amp;sm1 &lt;&lt; '\\t' &lt;&lt; &amp;(sm1.m_h) &lt;&lt; '\\t' &lt;&lt; &amp;(sm1.m_w) &lt;&lt; endl;\ncout &lt;&lt; &amp;sm2 &lt;&lt; '\\t' &lt;&lt; &amp;(sm2.m_h) &lt;&lt; '\\t' &lt;&lt; &amp;(sm2.m_w) &lt;&lt; endl;\ncout &lt;&lt; sizeof(StatMem) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <pre><code>4\ni=0\n10\n0   0x7fffbf7d5e08 0x7fffbf7d5e08 0x10d62f0f8\n0x7fffbf7d5e00 0x7fffbf7d5e00 0x10d62f0f8\n4\n</code></pre> <ul> <li><code>m_h</code> is a static member variable, it is global to all class member functions | \u5b58\u653e\u5728\u5168\u5c40\u800c\u4e0d\u662f\u6808\u4e2d\uff0c\u4e14 <code>sm1</code> \u548c <code>sm2</code> \u90fd\u6307\u5411\u540c\u4e00\u4e2a <code>m_h</code></li> <li><code>StatMem</code> \u4e2d\u53ea\u6709\u4e00\u4e2a <code>int</code> \u7684\u5927\u5c0f\uff0c\u5730\u5740\u76f8\u5dee 8 \u662f\u56e0\u4e3a 64 \u4f4d\u7684\u673a\u5668\u4e00\u4e2a word \u5360 8 \u4e2a\u5b57\u8282</li> </ul> <ul> <li>Static member functions<ul> <li>Global to all class member functions</li> <li>No <code>this</code> pointer</li> <li>Can access only static member variables</li> <li>No <code>static</code> in <code>.cpp</code></li> <li>Can\u2019t be dynamicallly overriden</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec05/#namespace","title":"Namespace","text":"<p>Namespace</p> <ul> <li>Expresses a logical grouping of classes, functions, variables, etc.</li> <li>A namespace is a scope just like a class</li> <li>Preferred when only name encapsulation is needed</li> </ul> <pre><code>namespace Math\n{\ndouble abs(double);\ndouble sqrt(double);\nint trunc(double);\n\u00b7\u00b7\u00b7\n}   </code></pre> <p>\u5927\u62ec\u53f7\u540e\u4e0d\u9700\u8981\u6709\u5206\u53f7</p> <ul> <li> <p>Defining namespaces | \u547d\u540d\u7a7a\u95f4\u7684\u5b9a\u4e49</p> <ul> <li>Place namespace definition in include file:</li> </ul> <pre><code>// Mylib.h\nnamespace Mylib\n{\nvoid f();\nclass X {\npublic:\nvoid g(); \u00b7\u00b7\u00b7 };\n...\n}\n</code></pre> </li> <li> <p>Defining namespace functions | \u547d\u540d\u7a7a\u95f4\u51fd\u6570\u7684\u5b9a\u4e49</p> <ul> <li>Use normal scoping to implement functions in namespaces</li> </ul> <pre><code>// Mylib.cpp\n#include \"Mylib.h\"\nvoid Mylib::f()\n{\n\u00b7\u00b7\u00b7\n}\nvoid Mylib::X::g()\n{\n\u00b7\u00b7\u00b7\n}\n</code></pre> </li> <li> <p>Using names from a namespace | \u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57</p> <ul> <li>Use scope resolution to qualify names from a namespace</li> <li>Can be tedious and distracting</li> </ul> <pre><code>// main.cpp\n#include \"Mylib.h\"\nint main()\n{\nMylib::f();\nMylib::X x;\nx.g();\n\u00b7\u00b7\u00b7\n}\n</code></pre> </li> <li> <p>Using-Declarations | \u4f7f\u7528\u58f0\u660e</p> <ul> <li>Introduces a local synonym for name</li> <li>States in one place where a name comes from</li> <li>Eliminates redundant scope qualification</li> </ul> <pre><code>// main.cpp\nvoid main()\n{\n// \u5728 main \u51fd\u6570\u4e2d\u4f7f\u7528 using-declaration \u53ea\u5bf9\u51fd\u6570\u5185\u90e8\u6709\u6548\nusing Mylib::f;\nusing Mylib::X;\nf();\nX x;\nx.g();\n\u00b7\u00b7\u00b7\n}\n</code></pre> </li> <li> <p>Using-Directives | \u4f7f\u7528\u6307\u4ee4</p> <ul> <li>Make all names from a namespace available</li> <li>Can be used as a notational convenience</li> </ul> <pre><code>// main.cpp\nvoid main()\n{\nusing namespace Mylib;\nf();\nX x;\nx.g();\n\u00b7\u00b7\u00b7\n}\n</code></pre> </li> </ul>"},{"location":"Course/OOP/Lec05/#more-details","title":"More details","text":"<ul> <li> <p>Ambiguities | \u6b67\u4e49</p> ExplanationCode <ul> <li>Using-directives may create potential ambiguities</li> <li>Using-directives only make the names available</li> <li>Ambiguities arise only when you make calls.</li> <li>Use scope resolution to resolve </li> </ul> <pre><code>// Mylib.h\nnamespace Xlib\n{\nvoid x();\nvoid y();\n}\nnamespace Ylib\n{\nvoid y();\nvoid z();\n} // main.cpp\n#include \"Mylib.h\"\nvoid main()\n{\nusing namespace Xlib;\nusing namespace Ylib;\nx(); // OK\ny(); // Ambiguous\nz(); // OK\nXlib::y(); // OK\n}\n</code></pre> </li> <li> <p>Namespace aliases | \u547d\u540d\u7a7a\u95f4\u522b\u540d</p> ExplanationCode <ul> <li>Namespace names that are too short may clash</li> <li>names that are too long are hard to work with</li> <li>Use aliasing to create workable names</li> <li>Aliasing can be used to version libraries</li> </ul> <pre><code>namespace supercalifragilistic\n{\nvoid f();\n}\nnamespace short = supercalifragilistic;\nshort::f();\n</code></pre> </li> <li> <p>Namespace composition | \u547d\u540d\u7a7a\u95f4\u7ec4\u5408</p> ExplanationCode <ul> <li>Compose new namespaces using names from other ones</li> <li>Using-declarations can resolve potential clashes</li> <li>Explicitly defined functions take precedence</li> </ul> <pre><code>namespace first\n{\nvoid x();\nvoid y();\n}\nnamespace second\n{\nvoid y();\nvoid z();\n}\n</code></pre> </li> </ul> <p> extern \u201cC\u201d </p> CodeExplanationQuote <pre><code>extern \"C\" {\n#include \"oldc.h\"\n}\n</code></pre> <ul> <li><code>extern \"C\"</code> tells the compiler to use C linkage</li> <li>\u65e7\u7248\u7684 C \u8bed\u8a00\u4e2d\u6ca1\u6709\u547d\u540d\u7a7a\u95f4\uff0c\u76f4\u63a5 <code>#include \"oldc.h\"</code> \u4f1a\u5bfc\u81f4\u547d\u540d\u51b2\u7a81 \uff08\u94fe\u63a5\u6210\u6c47\u7f16\uff0c\u51fd\u6570\u540d\u4e0d\u4f1a\u52a0 <code>_</code>\uff09</li> <li>\u5bf9\u4e8e\u65b0\u7684 C++ \u8bed\u8a00\uff0c<code>#include \"newc.h\"</code> \u4f1a\u81ea\u52a8\u52a0\u4e0a <code>_</code>\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u547d\u540d\u51b2\u7a81</li> <li>\u6545\u5728\u4f7f\u7528\u65e7\u7248 C \u8bed\u8a00\u7684\u5934\u6587\u4ef6\u65f6\uff0c\u9700\u8981\u52a0\u4e0a <code>extern \"C\"</code>\uff0c\u544a\u8bc9\u7f16\u8bd1\u5668\u4f7f\u7528 C \u8bed\u8a00\u7684\u94fe\u63a5\u65b9\u5f0f</li> </ul> <p>\u5173\u4e8e C++ \u4e2d\u7684 extern \u201cC\u201d</p> <ul> <li> <p>Namespace composition (cont) | \u547d\u540d\u7a7a\u95f4\u7ec4\u5408</p> <pre><code>namespace mine{\nusing namespace first;\nusing namespace second;\nusing first::y;     // resolve clashes to first::x()\nvoid mystuff();\n...\n}\n</code></pre> </li> <li> <p>Namespace selection | \u547d\u540d\u7a7a\u95f4\u9009\u62e9</p> <ul> <li>Compose namespaces by selecting a few features from other namespaces</li> <li>Choose only the names you want rather than all</li> <li>Changes to \u201corig\u201d declaration become reflected in \u201cmine\u201d</li> </ul> <pre><code>namespace mine{\nusing orig::Cat;    // Use Cat class from orig\nvoid x();           void y();           }\n</code></pre> </li> <li> <p>Namespaces are open | \u547d\u540d\u7a7a\u95f4\u662f\u5f00\u653e\u7684</p> <ul> <li>Multiple namespace declarations add to the same namespace <p>Namespace can be distributed across multiple files</p> </li> </ul> <pre><code>// header1.h\nnamespace X{\nvoid f();\n}\n// header2.h\nnamespace X{\nvoid g();   // X now contains f() and g()\n}\n</code></pre> </li> </ul>"},{"location":"Course/OOP/Lec06/","title":"Inheritance &amp; Polymorphism | \u7ee7\u627f\u4e0e\u591a\u6001","text":""},{"location":"Course/OOP/Lec06/#inheritance","title":"Inheritance | \u7ee7\u627f","text":"\u653e\u5728 Reuse (\u91cd\u7528) \u4e2d\u6765\u8bb2 DescriptionMermaid <ul> <li>Reusing the interface | \u91cd\u7528\u63a5\u53e3<ul> <li>Inheritance is to take the existing class, clone it, and then make additions and modifications to the clone</li> </ul> </li> </ul> <pre><code>classDiagram\nShape &lt;-- Circle\n    Circle : draw()\n    Circle : erase()\nShape &lt;-- Line\n    Line : draw()\n    Line : erase()\nShape &lt;-- Square\n    Square : draw()\n    Square : erase()\nShape : draw()\nShape : erase()\n</code></pre> <p>What is Inheritance</p> <ul> <li>Language implementtions technique</li> <li>Also an important component of the OOP design methodology</li> <li>Allows sharing of design for<ul> <li>Member variables</li> <li>Member functions</li> <li>Interfaces</li> </ul> </li> <li>Key technology in C++ </li> </ul> <ul> <li>The ablitity to define the behavior or implementation of one class as a superset of another class ()</li> <li>Inheritance allows us to define one class as an extension of another</li> <li>Advantages of inheritance<ul> <li>Avoids code duplication</li> <li>Code reuse</li> <li>Easier maintenance</li> <li>Extentibility</li> </ul> </li> </ul> code Employee.h &amp; cppManager.h &amp; cppmain.cppinfo <pre><code>// Define an Employee class\nclass Employee {\npublic:\nEmployee(const std::string&amp; name, const std::string&amp; ssn);\nconst std::string&amp; get_name() const;\nvoid print() const;\nvoid print(const std::string&amp; msg) const;\nprotected:\nstd::string m_name;\nstd::string m_ssn;\n};\nEmployee::Employee(const std::string&amp; name, const std::string&amp; ssn)\n: m_name(name), m_ssn(ssn) {\n// Initializer list sets up the values\n}\n// Employee member functions\ninline const std::string&amp; Employee::get_name() const {\nreturn m_name;\n}\ninline void Employee::print() const {\nstd::cout &lt;&lt; m_name &lt;&lt; endl;\nstd::cout &lt;&lt; m_ssn &lt;&lt; endl;\n}\ninline void Employee::print(const std::string&amp; msg) const {\nstd::cout &lt;&lt; msg &lt;&lt; endl;\nprint();\n}\n</code></pre> <pre><code>class Manager : public Employee {\npublic:\nManager(const std::string&amp; name, const std::string&amp; ssn, const std::string&amp; title);\nconst std::string&amp; title_name() const;\nvoid std::string&amp; get_title() const;\nvoid print() const;\nprotected:\nstd::string m_title;\n};\nManager::Manager(const std::string&amp; name, const std::string&amp; ssn, const std::string&amp; title)\n: Employee(name, ssn), m_title(title) {\n// Initializer list sets up the values\n}\n// Manager member functions\ninline const std::string&amp; Manager::get_title() const {\nreturn m_title;\n}\ninline void Manager::print() const {\nEmployee::print();\nstd::cout &lt;&lt; m_title &lt;&lt; endl;\n}\n</code></pre> <pre><code>#include \"Employee.h\"\n#include \"Manager.h\"\nint main() {\nEmployee e(\"John\", \"123-45-6789\");\nManager m(\"Mary\", \"987-65-4321\", \"VP\");\ne.print();      // \u6b63\u786e\nm.print();      // \u6b63\u786e\ne.print(\"Employee\");    // \u6b63\u786e\nm.print(\"Manager\");     // \u9519\u8bef\nreturn 0;\n}\n</code></pre> <ul> <li>\u7ee7\u627f\u7684\u53d8\u91cf\uff0c\u6700\u597d\u4f7f\u7528\u7ee7\u627f\u7684\u51fd\u6570\u6765\u64cd\u4f5c</li> <li>\u7236\u7c7b\u7684\u4e1c\u897f\u5728\u5b50\u7c7b\u4e2d\u90fd\u5b58\u5728\uff0c\u4f46\u5b50\u7c7b\u65e0\u6cd5\u76f4\u63a5\u4f7f\u7528\u7236\u7c7b\u4e2d\u7684 <code>private variable</code>\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7 <code>public function</code> \u6765\u64cd\u4f5c</li> <li><code>name hide</code> (C++ \u4e2d\u7279\u6709\u7684)\uff0c\u7236\u7c7b\u4e2d\u91cd\u8f7d\u7684\u51fd\u6570\uff0c\u5982\u679c\u5728\u5b50\u7c7b\u4e2d\u91cd\u5199\u4e86\u5176\u4e2d\u7684\u4e00\u4e2a\u90a3\u4e48\u7236\u7c7b\u7684\u91cd\u8f7d\u51fd\u6570\u5728\u5b50\u7c7b\u4e2d\u90fd\u4e0d\u5b58\u5728\u4e86 (\u5982 main.cpp \u4e2d\u7684 <code>m.print(\"Manager\")</code> \u5c31\u662f\u9519\u8bef\u7684)</li> <li>\u7236\u7c7b\u7684 <code>protected variable</code> \u5728\u5b50\u7c7b\u4e2d\u76f8\u5f53\u4e8e\u5b50\u7c7b\u7684 <code>private variable</code></li> <li>\u5b50\u7c7b\u7684\u5730\u5740\u4e2d\uff0c\u7b2c\u4e00\u90e8\u5206\u5b58\u7684\u662f\u7236\u7c7b\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206\u624d\u662f\u81ea\u5df1\u7684\uff0c\u6545\u4e00\u822c\u5148\u521d\u59cb\u5316\u7236\u7c7b\u5bf9\u8c61</li> <li>\u5f53\u7528\u5b50\u7c7b\u6765\u770b\u4f5c\u4e00\u4e2a\u7236\u7c7b\u7684\u5bf9\u8c61\uff0c\u53ea\u5bf9\u5b50\u7c7b\u5730\u5740\u524d\u9762\u7684\u90e8\u5206\u64cd\u4f5c\u5c31\u662f\u5bf9\u7236\u7c7b\u7684\u64cd\u4f5c</li> <li>Scpoes and access in C++ </li> </ul> <ul> <li><code>class B: public A</code> \u53ea\u6709 <code>public A</code> \u624d\u662f OOP \u8bed\u4e49\u4e0a\u7684\u7ee7\u627f</li> <li><code>class B: A</code> \u9ed8\u8ba4 <code>class B: private A</code> -&gt; <code>A</code> \u4e2d\u7684 <code>public</code> \u548c <code>protected</code> \u90fd\u53d8\u6210 <code>private</code></li> <li><code>class B: protected A</code> -&gt; <code>A</code> \u4e2d\u7684 <code>public</code> \u548c <code>protected</code> \u90fd\u53d8\u6210 <code>protected</code></li> </ul>"},{"location":"Course/OOP/Lec06/#polymorphism","title":"Polymorphism | \u591a\u6001\u6027","text":"<p>\u4ece\u7ee7\u627f\u5f15\u7533\u51fa\u6765\u7684\u6982\u5ff5</p> <ul> <li>Public Inheritance should imply substitution<ul> <li>If B isa A (\u8868\u8fbe\u4e00\u79cd\u7ee7\u627f\u5173\u7cfb), you can use a B anywhere an A can be used<ul> <li>If B isa A, then everything that is true for A is also true for B</li> </ul> </li> <li>Be careful if the substition is not valid</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec06/#up-casting","title":"Up-casting | \u5411\u4e0a\u9020\u578b","text":"<ul> <li>Is to regard an object of the derived class as an object of the base class</li> <li>It is to say: Students are human beings. You are students. So you are human beings.</li> </ul> <pre><code>graph LR\n    A[HumanBeing] --&gt; B[Students]\n</code></pre> <ul> <li>Upcasting is the act of converting from a Derived reference or pointer to a Base class reference or pointer</li> </ul> <pre><code>graph LR\n    A[Base] --&gt; B[Derived]\n</code></pre> Upcasting examples <pre><code>Manager peter(\"Peter\", \"123-45-6789\", \"VP\");\nEmployee* e = &amp;peter;   // Upcasting\nEmployee&amp; e = peter;    // Upcasting\n</code></pre> <ul> <li>Lose type information about the object: <code>ep-&gt;print(cout); //prints base class version</code></li> </ul> code codeoutputinfo <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A\n{\npublic:\nint i;\nA(){ i = 10; cout &lt;&lt; \"A()\" &lt;&lt; i &lt;&lt; endl; }\nvoid f() { cout &lt;&lt; \"A::f()\" &lt;&lt; endl; }\n};\nclass B : public A\n{\npublic:\nint i;\nB(){ i = 20; cout &lt;&lt; \"B()\" &lt;&lt; i &lt;&lt; endl; }\nvoid f() { cout &lt;&lt; \"B::f()\" &lt;&lt; endl; }\n};\nint main()\n{\nB b;\nA *p = &amp;b;  // Upcasting\nb.f();\np-&gt;f(); cout &lt;&lt; sizeof(*p) &lt;&lt; endl;   int *pi = (int*)p;  // Downcasting\ncout &lt;&lt; pi[0] &lt;&lt; \",\" &lt;&lt; pi[1] &lt;&lt; endl;\ncout &lt;&lt; p-&gt;i &lt;&lt; endl;\ncout &lt;&lt; b.i &lt;&lt; endl;\n}\n</code></pre> <pre><code>A()10   # \u5148\u521d\u59cb\u5316\u7236\u7c7b\nB()20   # \u518d\u521d\u59cb\u5316\u5b50\u7c7b\nB::f()  # \u8c03\u7528\u5b50\u7c7b\u7684\u51fd\u6570\nA::f()  # \u8c03\u7528\u7236\u7c7b\u7684\u51fd\u6570\n4       # sizeof \u53d1\u751f\u5728\u7f16\u8bd1\u65f6\u671f\uff0c\u6b64\u65f6 *p \u662f A \u7c7b\u578b\uff0c\u6545\u4e3a 4\n10,20   # pi[0] \u662f A \u7c7b\u578b\u7684 i\uff0cpi[1] \u662f B \u7c7b\u578b\u7684 i\n10      # p \u662f A \u7c7b\u578b\uff0c\u6545 p-&gt;i \u662f A \u7c7b\u578b\u7684 i\n20      # b \u662f B \u7c7b\u578b\uff0c\u6545 b.i \u662f B \u7c7b\u578b\u7684 i\n</code></pre> QeustionSolution <ul> <li>\u9488\u5bf9 <code>b.f()</code> \u548c <code>p-&gt;f()</code></li> <li>A \u548c B \u4e2d\u6709\u76f8\u540c\u51fd\u6570\uff0c\u4f46\u662f\u8c03\u7528\u7684\u662f\u54ea\u4e2a\u51fd\u6570\uff0c\u53d6\u51b3\u4e8e\u6307\u9488\u7684\u7c7b\u578b</li> <li>\u5f53\u4f7f\u7528 <code>p-&gt;f()</code> \u65f6\uff0c<code>p</code> \u662f <code>A</code> \u7c7b\u578b\u7684\uff0c\u6545\u8c03\u7528\u7684\u662f <code>A</code> \u4e2d\u7684 <code>f()</code>\uff0c\u800c\u4e0d\u662f <code>B</code> \u4e2d\u7684 <code>f()</code></li> <li>\u5f53\u4f7f\u7528 <code>b.f()</code> \u65f6\uff0c<code>b</code> \u662f <code>B</code> \u7c7b\u578b\u7684\uff0c\u6545\u8c03\u7528\u7684\u662f <code>B</code> \u4e2d\u7684 <code>f()</code></li> </ul> <ul> <li>\u5728 A \u4e2d\u7684 <code>f()</code> \u524d\u52a0\u4e0a <code>virtual</code> \u5173\u952e\u5b57\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u591a\u6001\u6027 (\u5373 <code>virtual void f() { cout &lt;&lt; \"A::f()\" &lt;&lt; endl; }</code>)</li> <li>\u52a0\u4e86 <code>virtual</code> \u5173\u952e\u5b57\u540e\uff0c A \u548c B \u4e2d\u7684\u76f8\u540c\u51fd\u6570\u662f <code>override</code> \u7684\u5173\u7cfb\uff0c\u5373 B \u4e2d\u7684 <code>f()</code> \u8986\u76d6\u4e86 A \u4e2d\u7684 <code>f()</code></li> </ul> <ul> <li> <p>Polymorphism is based on <code>Upcast</code> and <code>Dynamic Binding</code></p> <ul> <li>Upcast: take an object of the derived class as an object of the base one</li> <li>Dynamic Binding (Binding -&gt; which function to be called): <ul> <li>Static Binding: call the functino as the code</li> <li>Dynamic Binding: call the function of the object</li> </ul> </li> </ul> Example <pre><code>void render(Shape* p)\n{\np-&gt;render();    // calls correct render function\n}   // for given Shape!\nvoid func()\n{\nEllipse ell(10, 20);\nell.render();   // static -- Ellipse::render()\nCircle cir(10);\ncir.render();   // static -- Circle::render()\nrender(&amp;ell);   // dynamic -- Ellipse::render()\nrender(&amp;cir);   // dynamic -- Circle::render()\n}\n</code></pre> <ul> <li>\u5728 C++ \u4e2d\uff0c\u5f53\u4f7f\u7528\u57fa\u7c7b\u7684\u5f15\u7528\u6216\u6307\u9488\u8c03\u7528\u4e00\u4e2a <code>virtual function</code> \u65f6\uff0c\u53d1\u751f\u52a8\u6001\u7ed1\u5b9a</li> <li>\u4e0a\u8ff0\u4ee3\u7801\u4e2d <code>Shape* p</code> \u88ab\u79f0\u4e3a <code>polymorphic variable</code>\uff0c \u591a\u6001\u53d8\u91cf\u6709\u4e24\u79cd\u7c7b\u578b<ul> <li>Static type: \u58f0\u660e\u7c7b\u578b -&gt; \u5373 <code>Shape *</code></li> <li>Dynamic type: \u5b9e\u9645\u7c7b\u578b -&gt; \u8fd0\u884c\u65f6\u523b\u624d\u77e5\u9053\uff0c\u5373 <code>Ellipse</code> \u6216 <code>Circle</code></li> </ul> </li> </ul> Quote <p>C++\u4e2d\u7684\u52a8\u6001\u7c7b\u578b\u4e0e\u52a8\u6001\u7ed1\u5b9a\u3001\u865a\u51fd\u6570\u3001\u8fd0\u884c\u65f6\u591a\u6001</p> </li> </ul>"},{"location":"Course/OOP/Lec06/#virtual-functions","title":"Virtual functions","text":"<ul> <li>Non-virtual functions<ul> <li>Compiler generates <code>static</code>, or direct call to stated type</li> <li>Faster to execute</li> </ul> </li> <li>Virtual functions<ul> <li>Can be transparently overriden in a derived class</li> <li>Objects carry a pack of their virtual functions</li> <li>Compiler checks pack and dynamically calls the right function</li> <li>If compiler knows the functions at compile time, it will generate a static call</li> </ul> </li> <li> <p>Calls up the chain \uff08\u5982\u4f55\u5728\u5b50\u7c7b\u4e2d\u8c03\u7528\u7236\u7c7b\u51fd\u6570\uff09\u2014\u2014 use <code>Base::f()</code> </p> <ul> <li>No need to copy the old stuff!</li> </ul> code <pre><code>void Derived::f()\n{\nBase::f();  // call to base class\n}\n</code></pre> </li> </ul> <p>How virtuals work in C++</p> \u7236\u7c7b\u4e2d\u5b50\u7c7b\u4e2dExplanationProve code\u5206\u5e03 <pre><code>class Shape{\npublic:\nShape();\nvirtual ~Shape();\nvirtual void render();\nvoid move(const XYPos&amp;);\nvirtual void resize();\nprotected:\nXYPos center;\n};\n</code></pre> <p></p> code\u5206\u5e03 <pre><code>class Ellipse: public Shape{\npublic:\nEllipse (float majr, float minr);\nvirtual void render();\nprotected:\nfloat major_axis;\nfloat minor_axis;\n}\n</code></pre> <p></p> <ul> <li>\u4efb\u4f55\u4e00\u4e2a\u6709 <code>virtual</code> \u7c7b\u7684\u5bf9\u8c61\uff0c\u5728\u5bf9\u8c61\u91cc\u9762\u7b2c\u4e00\u4e2a\u6210\u5458\u662f\u4e00\u4e2a\u6307\u9488( <code>VPTR</code>\uff0c8 \u4e2a\u5b57\u8282(\u5bf9 64 \u4f4d OS) )\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u8868 ( <code>vtable</code> )</li> <li><code>vtable</code> \u4e2d\u5b58\u653e\u8fd9\u4e2a\u7c7b\u4e2d\u6240\u6709 <code>virtual</code> \u51fd\u6570\u7684\u5730\u5740</li> <li><code>vtable</code> \u662f\u9759\u6001\u7684\uff0c</li> </ul> codeOutput <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass A\n{\npublic:\nint i;\nA(){ i = 10; cout &lt;&lt; \"A()\" &lt;&lt; i &lt;&lt; endl; }\nvirtual void f() { cout &lt;&lt; \"A::f()\" &lt;&lt; endl; }\n};\nclass B : public A\n{\npublic:\nint i;\nB(){ i = 20; cout &lt;&lt; \"B()\" &lt;&lt; i &lt;&lt; endl; }\nvoid f() { cout &lt;&lt; \"B::f()\" &lt;&lt; endl; }\n};\nint main()\n{\nB b;\nA *p = &amp;b;  // Upcasting\nlong long **vp = (long long**)p;\nvoid (*pf)() = (void (*)())(*(*vp));\ncout &lt;&lt; \"------\" &lt;&lt; endl;\npf();\n}\n</code></pre> <pre><code>A()10\nB()20\n------\nB::f()\n</code></pre> <ul> <li><code>p</code> \u6307\u5411 <code>VPTR</code>, <code>*p</code> \u6307\u5411 <code>vtable</code></li> <li><code>**p</code> \u8868\u793a <code>vtable</code> \u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5373 <code>(*f)()</code></li> </ul> <p>\u5f15\u7533</p> codeOutput <pre><code>...\nclass A\n{\npublic:\nint i;\nA(){ i = 10; cout &lt;&lt; \"A()\" &lt;&lt; i &lt;&lt; endl; f(); }\nvirtual void f() { cout &lt;&lt; \"A::f()\" &lt;&lt; endl; }\nvoid g() {this-&gt;f();}\n};\n...\nint main()\n{\nB b;\nA *p = &amp;b;\np-&gt;g();\n}\n</code></pre> <pre><code>A()10\nA::f()\nB()20\nB::f()\n</code></pre> <ul> <li>\u6b64\u65f6 <code>A()</code> \u4e2d\u8c03\u7528\u7684 <code>f()</code> \u662f A \u4e2d\u7684 <code>f()</code></li> <li><code>g()</code> \u4e2d\u8c03\u7528\u7684 <code>f()</code> \u662f B \u4e2d\u7684 <code>f()</code></li> <li>\u5728\u6784\u9020\u51fd\u6570\u4e2d \u201c\u770b\u8d77\u6765 virtual \u4e0d\u8d77\u4f5c\u7528\u4e86\u201d<ul> <li>Actually <code>VPTR</code> \u662f\u7531\u7f16\u8bd1\u5668\u5728\u6784\u9020\u51fd\u6570\u521a\u5f00\u59cb\u7684\u65f6\u5019\u88ab\u5199\u5165\uff0c<code>vtable</code> \u662f\u5728\u94fe\u63a5\u65f6\u5206\u914d\u597d\u5730\u5740</li> <li>\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5728\u6267\u884c\u65f6\u4f1a\u628a\u7236\u7c7b \u7684 <code>VPTR</code> \u586b\u5165 (\u5373 A \u7684\u6784\u9020\u51fd\u6570\u4e2d <code>f()</code> \u8fd8\u662f\u52a8\u6001\u7ed1\u5b9a)</li> <li>\u5b50\u7c7b\u7684\u6784\u9020\u51fd\u6570\u53d1\u751f\u65f6\u518d\u628a\u5b50\u7c7b\u7684 <code>VPTR</code> \u5199\u5165</li> </ul> </li> </ul> <ul> <li> <p>What happens if</p> <pre><code>Ellipse elly(10F, 20F);\nCircle circ(30F);\nelly = circ;\n</code></pre> <ul> <li>Area of <code>circ</code> is sliced off (Only the part of <code>circ</code> that fits in <code>elly</code> gets copied)</li> <li>\u4f46 <code>VPTR</code> \u5e76\u672a\u6539\u53d8 -&gt; <code>VPTR</code> \u6784\u9020\u51fa\u540e\u5c31\u4e0d\u4f1a\u518d\u6539\u53d8 (\u9664\u975e\u66b4\u529b\u4fee\u6539)</li> </ul> </li> <li> <p>Virtuals and reference arguments</p> <pre><code>void func(Ellipse&amp; elly)\n{\nelly.render();  // \u52a8\u6001\u7ed1\u5b9a\n}\n...\nCircle circ(10F);\nfunc(circ);\n</code></pre> <ul> <li>References act like pointers</li> </ul> </li> <li> <p>Virtual destructors</p> <ul> <li>Make destructors virtual if they might be inherited</li> </ul> codeExplanation <pre><code>Shape *p = new Ellipse(10.0F, 20.0F);\n\u00b7\u00b7\u00b7\ndelete p;   // \u5148\u6790\u6784\uff08\u8c03\u7528 destructor\uff09\u518d\u56de\u6536\u5185\u5b58\n</code></pre> <ul> <li><code>delete p;</code> \u505a\u7684\u4e24\u4ef6\u4e8b\u60c5<ol> <li><code>p-&gt;destructor();</code> -&gt; \u5b58\u5728\u7ed1\u5b9a\u95ee\u9898, \u82e5 p \u7684\u9759\u6001\u7c7b\u578b\uff08Shape\uff09\u7684\u6790\u6784\u51fd\u6570\u4e0d\u662f <code>virtual</code> \u5219\u53ea\u5728\u6b64\u5904\u6267\u884c\u9759\u6001\u7ed1\u5b9a\uff0c\u53ea\u6267\u884c <code>Shape</code> \u7c7b\u7684\u6790\u6784(\u4f46\u5b9e\u9645 p \u6307\u5411\u7684\u5bf9\u8c61\u662f <code>Ellipse</code>, \u6b64\u65f6 <code>Ellipse</code> \u7684\u6790\u6784\u672a\u505a)\uff1b\u4f46\u82e5\u662f <code>virtual</code> \u7f16\u8bd1\u5668\u4f1a\u5728\u6b64\u5904\u52a8\u6001\u7ed1\u5b9a\uff0c\u624d\u4f1a\u505a\u6709\u6548\u7684\u6790\u6784</li> <li><code>free</code> </li> </ol> </li> <li>[Note] : \u9664\u975e\u4fdd\u8bc1\u81ea\u5df1\u7684\u7c7b\u4e0d\u4f1a\u88ab\u7ee7\u627f\uff0c\u5c31\u5c06\u7c7b\u7684\u6790\u6784\u51fd\u6570\u8bbe\u7f6e\u4e3a <code>virtual</code> -&gt; \u8fd9\u4e2a\u7c7b\u5c31\u4f1a\u6709 <code>VPTR</code> \u548c <code>vtable</code></li> <li>\u90a3\u4e48\u5176\u5b9e c++ \u7684\u6bcf\u4e2a\u7c7b\u90fd\u5e94\u8be5\u6709 <code>vtable</code> -&gt; \u901a\u8fc7 <code>VPTR</code> \u548c <code>vtable</code> \u7684\u5173\u7cfb\uff0c\u6211\u4eec\u5efa\u7acb\u4e86\u4e00\u79cd\u5bf9\u8c61\u548c\u7c7b\u4e4b\u95f4\u7684\u5173\u8054 \u2014\u2014 \u53ef\u4ee5\u5b9e\u73b0 RTTI (Run Time Type Identification) | \u4f46 c++ \u6682\u4e0d\u652f\u6301 RTTI </li> </ul> <ul> <li>Want <code>Ellipse::~Ellipse()</code> to be called<ul> <li>Must declare <code>Shape::~Shape()</code> virtual</li> <li>It will call <code>Shape::~Shape()</code> automatically</li> </ul> </li> <li>If <code>Shape::~Shape</code> is not virtual, only <code>Shape::~Shape()</code> will be invoked</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec06/#overriding","title":"Overriding","text":"<ul> <li> <p>overriding redefines the body of a virtual function</p> <ul> <li>\u6307\u5b50\u7c7b\u548c\u7236\u7c7b\u6709\u540c\u540d\u51fd\u6570\uff08\u51fd\u6570\u540d\u79f0\u76f8\u540c\u3001\u53c2\u6570\u8868\u4e5f\u76f8\u540c\uff0c\u4e14\u7236\u7c7b\u4e2d\u58f0\u660e <code>virtual</code>\uff09</li> </ul> <pre><code>class Base\n{\npublic:\nvirtual void f();\n}\nclass Derived : public Base\n{\npublic:\nvirtual void f();\n// override Base::f()\n}\n</code></pre> <ul> <li>\u7236\u7c7b\u4e2d\u6709 <code>virtual</code>, \u5b50\u7c7b\u53ef\u4ee5\u4e0d\u52a0 <code>virtual</code>. \u4f46\u4e60\u60ef\u4e0a\u8fd8\u662f\u52a0\u4e0a <code>virtual</code>\uff0c\u4ee5\u514d\u5b50\u7c7b\u7684\u7ee7\u627f\u8005\u5fd8\u8bb0\u52a0\u4e0a <code>virtual</code> \u5bfc\u81f4\u65e0\u6cd5\u52a8\u6001\u7ed1\u5b9a</li> </ul> </li> </ul> Overloading vs. Overriding <ul> <li>Overloading<ul> <li>\u5728\u4e00\u4e2a\u5c42\u7ea7\u4e0a\uff0c\u5747\u5728\u5b50\u7c7b or \u7236\u7c7b or free \u51fd\u6570\u4e2d\u6709\u540c\u540d\u51fd\u6570\uff08\u51fd\u6570\u540d\u79f0\u76f8\u540c\uff0c\u53c2\u6570\u8868\u4e0d\u540c\uff09</li> </ul> </li> <li>Overriding<ul> <li>\u6307\u5b50\u7c7b\u548c\u7236\u7c7b\u6709\u540c\u540d\u51fd\u6570\uff08\u51fd\u6570\u540d\u79f0\u76f8\u540c\u3001\u53c2\u6570\u8868\u4e5f\u76f8\u540c\uff0c\u4e14\u7236\u7c7b\u4e2d\u58f0\u660e <code>virtual</code>\uff09</li> <li>\u8fd4\u56de\u7c7b\u578b\u4e5f\u8981\u6c42\u76f8\u540c\uff0c\u4f46\u53ef\u4ee5\u662f\u7236\u7c7b\u8fd4\u56de\u7c7b\u578b\u7684\u5b50\u7c7b\u578b</li> </ul> </li> </ul> <p>Name</p> <p>\u7236\u7c7b\u4e2d\u53d1\u751f\u91cd\u8f7d\uff0c\u6bd4\u5982\u7236\u7c7b\u4e2d\u6709\u591a\u4e2a <code>virtual</code> \u7684\u51fd\u6570 <code>func()</code>, \u800c\u5b50\u7c7b\u53ea override \u4e86\u5176\u4e2d\u7684\u4e00\u4e2a\u3002\u90a3\u4e48\u5176\u4f59\u7684\u91cd\u8f7d\u51fd\u6570\u4fbf\u4e0d\u5728\u5b50\u7c7b\u5b58\u5728\u4e86 | Name Hiding</p> code <pre><code>class Expr\n{\npublic:\nvirtual Expr* new_expr();\nvirtual Expr&amp; clone();\nvirtual Expr  self();\n};\nclass Binary : public Expr\n{\npublic:\nvirtual Binary* new_expr(); // OK\nvirtual Binary&amp; clone();    // OK\nvirtual Binary  self();     // Error\n};\n</code></pre> <ul> <li>\u7236\u7c7b\u8fd4\u56de\u7c7b\u578b\u662f pointer or reference \u7684\u65f6\u5019\uff0c\u5b50\u7c7b\u53ef\u4ee5\u662f\u7236\u7c7b\u8fd4\u56de\u7c7b\u578b\u7684\u5b50\u7c7b\u578b</li> <li>\u4f46\u7236\u7c7b\u8fd4\u56de\u7c7b\u578b\u662f\u5bf9\u8c61\u672c\u8eab\u7684\u65f6\u5019\uff0c\u5b50\u7c7b\u8fd4\u56de\u7c7b\u578b\u4e0d\u80fd\u662f\u5b50\u7c7b\u7684\uff08\u4f1a\u88ab sliced off\uff09</li> </ul> Quote <p>CSDN - c++ Why name hiding</p> <p>Tips</p> <ul> <li>Never redefine an inherited non-virtual function<ul> <li>Non-virtual functions are statically bound</li> <li>No dynamic dispatch</li> </ul> </li> <li> <ul> <li>\u9ed8\u8ba4\u53c2\u6570\u53ea\u662f\u51fa\u73b0\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u4e0d\u662f\u9759\u6001\u7ed1\u5b9a\uff08\u82e5\u5728\u5b50\u7c7b\u4e2d\u4fee\u6539\uff0c\u7ed3\u679c\u4e0d\u4e00\u5b9a\u7b26\u5408\u9884\u671f\uff09</li> </ul> <p>Never redefine an inherited default parameter value</p> Example <pre><code>class Base\n{\npublic:\nvirtual void f(int x = 0);\n};\nclass Derived : public Base\n{\npublic:\nvoid f(int x = 1);  };\n\u00b7\u00b7\u00b7\nvoid func(Base&amp; b)\n{\nb.f();  // output 0\n}\nint main()\n{\nDerived d;\nfunc(d);\n}\n</code></pre> <ul> <li>\u867d\u7136\u9884\u671f\u662f\u4f20\u8fdb\u53bb\u5b50\u7c7b\uff0c\u5e94\u8be5\u6253\u5370 1\uff0c\u4f46\u7531\u4e8e\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1 <code>func</code> \u7684\u65f6\u5019\u89c1\u5230\u7684\u662f\u9759\u6001\u7ed1\u5b9a\u7684 <code>Base</code> \u7c7b\u578b\uff0c\u8fd8\u662f\u4f1a\u6253\u5370 0</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec06/#abstract-base-classes","title":"Abstract base classes","text":"<ul> <li>An abstract base class has pure virtual functions | \u7eaf\u865a\u51fd\u6570<ul> <li>Only interface defined</li> <li>No function body given</li> </ul> </li> <li>Abstract base classes cannot be instantiated | \u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316<ul> <li>Must derive a new class/classes</li> <li>Must supply definitions for all pure virtuals before class can be instantiated</li> </ul> </li> </ul> codeexplanation <pre><code>class XYPos { \u00b7\u00b7\u00b7 }; // x, y point\nclass Shape\n{\npublic:\nShape();\nvirtual void draw() = 0;  // pure virtual fucntion\nvoid move(const XYPos&amp;);\nvirtual void resize();\nprotected:\nXYPos center;\n};\nclass Circle : public Shape\n{\npublic:\nvirtual void draw();     // override\n\u00b7\u00b7\u00b7\n};\nclass Rectangle : public Shape\n{\npublic:\nvirtual void draw();     // override\n\u00b7\u00b7\u00b7\n};\n</code></pre> <ul> <li><code>virtual function() = 0;</code> \u5373\u53ef\u5c06\u6b64\u51fd\u6570\u6807\u8bb0\u4e3a \u7eaf\u865a\u51fd\u6570 | pure virtual function</li> <li>\u4e00\u65e6\u4e00\u4e2a\u7c7b\u4e2d\u6709\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u79f0\u4e3a\u62bd\u8c61\u7c7b\uff08\u4e0d\u80fd\u7528\u4e8e\u5236\u9020\u5bf9\u8c61\uff09</li> <li><code>Shape</code> \u7684\u5b58\u5728\u662f\u4e3a\u4e86\u8ba9 <code>Circle</code> \u548c <code>Rectangle</code> \u7ee7\u627f\uff0c\u63d0\u4f9b\u4e00\u4e2a\u5171\u540c\u7684\u63a5\u53e3</li> </ul> <ul> <li>Why use<ul> <li>Modeling</li> <li>Force correct behavior</li> <li>Define interface without defining implementation</li> </ul> </li> <li>When use<ul> <li>Not enough information is available</li> <li>When designing for interf inheritance</li> </ul> </li> <li>Protocol/Interface classes are abstract base classes with<ul> <li>All non-static member functions are pure virtual except for the destructor</li> <li>Virtual destructor with empty body</li> <li>No non-static member variables, inherited or otherwise<ul> <li>May contain static members</li> </ul> </li> <li>\u5373\u7ee7\u627f\u5b50\u7c7b\u5b9e\u73b0\u63a5\u53e3\u7684\u89c4\u8303\u7684\u516c\u5f00\u51fd\u6570\uff0c\u4f46\u63a5\u53e3\u5e76\u4e0d\u63d0\u4f9b\u4efb\u4f55\u51fd\u6570\u7684\u5b9e\u73b0</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec06/#multiple-inheritance","title":"Multiple Inheritance","text":"<p>C++ \u662f\u552f\u4e00\u652f\u6301\u591a\u7ee7\u627f\u7684\u8bed\u8a00</p> codeexplanation <pre><code>class Employee\n{\nprotected:\nstring name;\nEmpID id;\n}\nclass MTS : public Employee\n{\nprotected:\nDegrees degree_info;\n};\nclass Consultant : public MTS, public Temporary\n{\n\u00b7\u00b7\u00b7\n};\n</code></pre> <ul> <li><code>Consultant</code> picks up the attributes of both <code>MTS</code> and <code>Temporary</code><ul> <li><code>name, id, employer, degree_info</code></li> </ul> </li> <li>\u6ce8\u610f\u7ee7\u627f\u7236\u7c7b\u7528\u9017\u53f7\u9694\u5f00\uff0c\u4e14\u6bcf\u4e00\u4e2a\u7236\u7c7b\u524d\u9762\u90fd\u8981\u52a0 <code>public</code> \u8868\u793a\u7ee7\u627f\u591a\u4e2a\u7236\u7c7b\u7684 <code>public</code></li> <li>\u591a\u6001\u7ee7\u627f\u7684\u51fa\u73b0\u662f\u4e3a\u4e86\u89e3\u51b3 C++ \u6ca1\u6709\u5355\u6839\u7ed3\u6784\u7684\u95ee\u9898</li> </ul> \u591a\u7ee7\u627f\u7684\u95ee\u9898 <p></p> <ol> <li>\u5bf9\u4e8e\u7236\u7c7b A, \u5176\u6709\u4e24\u4e2a\u5b50\u7c7b B \u548c C, D \u6709\u540c\u65f6\u7ee7\u627f B \u548c C</li> <li>\u6b64\u65f6\u82e5 A \u4e2d\u6709\u4e00\u53d8\u91cf i\uff0cD \u8c03\u7528 i \u65f6\uff0c\u4f1a\u51fa\u73b0\u4e8c\u4e49\u6027\uff0c\u5373\u4e0d\u77e5\u9053\u662f\u8c03\u7528 B \u4e2d\u7684 i \u8fd8\u662f C \u4e2d\u7684 i</li> </ol> <ul> <li>\u4e3a\u4e86\u89e3\u51b3\u6b64\u95ee\u9898\uff0cC++ \u63d0\u51fa\u865a\u7ee7\u627f\uff08virtual public\uff09\uff0c\u6bd4\u5982 B \u548c C \u865a\u7ee7\u627f A\uff0c\u90a3\u4e48\u5c06\u4e0d\u4f1a\u628a A \u4e2d\u7684\u53d8\u91cf\u94fe\u63a5\u5230 B \u548c C \u4e2d\u800c\u662f B \u6307\u5411\u4e00\u4e2a A\uff0cC \u6307\u5411\u4e00\u4e2a A\uff0c\u8fd9\u6837 D \u4e2d\u7684 B \u548c C \u4f1a\u6307\u5411\u540c\u4e00\u4e2a A\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e8c\u4e49\u6027\u4e86</li> <li>\u540e\u6765\u63d0\u51fa\u7684 <code>\u6a21\u677f</code> \u662f\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848 \u2014\u2014 \u4e0d\u8981\u4f7f\u7528\u591a\u7ee7\u627f</li> </ul>"},{"location":"Course/OOP/Lec07/","title":"Copy Ctor &amp; Overloaded Operators | \u62f7\u8d1d\u6784\u9020\u4e0e\u91cd\u8f7d\u8fd0\u7b97\u7b26","text":""},{"location":"Course/OOP/Lec07/#copy-ctor","title":"Copy Ctor | \u62f7\u8d1d\u6784\u9020","text":"\u4e00\u9053\u9898 \u9898\u76ee\u7b54\u6848 <p>For the code below <pre><code>void f()\n{\nStash students();\n\u00b7\u00b7\u00b7\n}\n</code></pre> which statement is RIGHT for the line in the function <code>f()</code>? 1. This is a variable definition, while students is an object of Stash, initialized with the default constructor. 2. This is a function prototype, while students is a function returns an object of Stash. 3. This is a function call. 4. This is illegal in C++.</p> <ol> <li>false : \u6784\u9020\u5bf9\u8c61\u5982\u679c\u6ca1\u6709\u53c2\u6570\uff0c\u4e0d\u80fd\u52a0\u62ec\u53f7</li> <li>true : \u51fd\u6570\u539f\u578b\u58f0\u660e\u662f\u5141\u8bb8\u5728\u51fd\u6570\u5185\u90e8\u53d1\u751f\u7684</li> <li>false</li> <li>false</li> </ol> <ul> <li> <p>Copying </p> <ul> <li>Create a new object from an existing one | \u5728 C \u4e2d\u4e0e\u4f20\u6570\u7ec4\u4e0d\u540c\uff0c\u51fd\u6570\u7684\u53c2\u6570\u5982\u679c\u662f\u7ed3\u6784\u4f53\u4f1a\u5728\u51fd\u6570\u5185\u90e8\u590d\u5236\u6574\u4e2a\u7ed3\u6784\uff0c\u800c\u6570\u7ec4\u662f\u6307\u9488 \u2014 C++ \u4e5f\u662f\u8fd9\u6837</li> </ul> <pre><code>// Currency as pass-by-value argument\nvoid func(Currency c)\n{\n// ...\n}\n\u00b7\u00b7\u00b7\nCurrency cur(10, 50);\nfunc(cur);  // cur is copied to c\n</code></pre> <ul> <li>\u6b64\u65f6 func \u4e2d\u7684 c \u662f cur \u7684\u62f7\u8d1d\uff0c\u5728\u8c03\u7528 <code>func</code> \u7684\u65f6\u5019\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec07/#the-copy-constructor","title":"The copy constructor","text":"<ul> <li>Copying is implemented by the copy constructor</li> <li>Has the unique signature <code>ClassName::ClassName(const ClassName &amp;)</code><ul> <li>Call-by-reference is used for the explicit parameter</li> </ul> </li> <li>C++ builds a copy ctor for you if you don\u2019t provide one<ul> <li>Copies each member variable \u2014 Good for numbers, objects(\u4f1a\u9012\u5f52\u8c03\u7528\u5bf9\u8c61\u4e2d\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570), arrays</li> <li>Copies each pointer \u2013 \u6e90\u5bf9\u8c61\u548c\u62f7\u8d1d\u6784\u9020\u5bf9\u8c61\u6307\u9488\u76f8\u540c\uff0c\u6307\u5411\u540c\u4e00\u7247\u5185\u5b58\u533a\u57df</li> </ul> </li> <li>\u5f53\u4e0d\u9700\u8981\u5168\u76d8\u62f7\u8d1d or \u5bf9\u8c61\u4e2d\u6709\u6307\u9488\uff0c\u9700\u8981\u81ea\u5df1\u5199 Copy Ctor</li> </ul> <p>\u5ef6\u7533</p> codeexplanation <pre><code>// Currency as pass-by-value argument\nCurrency func(Currency c)\n{\n// ...\n}\n\u00b7\u00b7\u00b7\nCurrency cur(10, 50);\nCurrency cur2 = func(cur);  // cur is copied to c\n</code></pre> <ul> <li><code>Currency cur2 = func(cur);</code> \u5e76\u672a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570</li> <li>\u51fd\u6570\u8fd4\u56de int \u65f6\uff0c\u8fd4\u56de\u503c\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\uff1b\u8fd4\u56de\u7ed3\u6784\u4f53\u65f6\uff0c\u8fd4\u56de\u503c\u653e\u5728\u6808\u4e2d\u3002\u6808\u7684\u7a7a\u95f4\u662f\u5728 caller \u7684\u5185\u5b58\u7a7a\u95f4\u4e2d</li> <li><code>cur2</code> \u7684\u8d4b\u503c\u662f\u5728 callee \u4e2d\u5b8c\u6210\u7684</li> </ul> <ul> <li> <p>When are Copy Ctor called</p> <ul> <li>During call by value</li> </ul> <pre><code>void func(Currency c)\n{\n// ...\n}\n\u00b7\u00b7\u00b7\nCurrency cur(10, 50);\nfunc(cur);  // cur is copied to c\n</code></pre> <ul> <li>During initialization</li> </ul> <pre><code>Currency cur(10, 50);\nCurrency cur2 = cur;    // cur is copied to cur2\nCurrency cur3(cur);     // cur is copied to cur3\n</code></pre> <ul> <li>During function return</li> </ul> <pre><code>Currency func()\n{\nCurrency cur(10, 50);\nreturn cur;     // cur is copied to the return value\n}\n\u00b7\u00b7\u00b7\nCurrency cur2 = func(); // cur is copied to cur2\n</code></pre> </li> <li> <p>Constructions vs. Assignment</p> <ul> <li>Every object is constructed once -&gt; \u8d4b\u503c\u7684\u65f6\u5019\u4e0d\u53d1\u751f\u62f7\u8d1d\u6784\u9020</li> <li>Every object should be destroyed once<ul> <li>Faliure to invoke delete()</li> <li>Invoking delete() more than once</li> </ul> </li> <li>Once an object is constructed, it can be the target of many assignment operations</li> <li>\u8d4b\u503c\u3001\u6784\u9020\u5747\u4e3a member-wise, \u5373\u6309\u7167\u6210\u5458\u53d8\u91cf\u7684\u987a\u5e8f\u8fdb\u884c\u8d4b\u503c\u3001\u6784\u9020\uff08bit-wise \u662f\u6309\u7167\u5185\u5b58\u4e2d\u7684\u987a\u5e8f\u8fdb\u884c\u5168\u90e8\u8d4b\u503c\u3001\u6784\u9020\uff09</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec07/#overloaded-operators","title":"Overloaded Operators | \u91cd\u8f7d\u8fd0\u7b97\u7b26","text":"<ul> <li>Allows user-defined types to act like built in types</li> <li>Another way to make a fucntion call</li> </ul> Note <p>unary and binary operators can be overloaded</p> <ul> <li><code>+  -  *  /  %  ^  &amp;  |  ~</code></li> <li><code>=  &lt;  &gt;  +=  -=  *=  /=  %=  ^=  &amp;=  |=</code></li> <li><code>&lt;&lt;  &gt;&gt;  &gt;&gt;=  &lt;&lt;=  ==  !=  &lt;=  &gt;=  &amp;&amp;  ||  !  ++  --</code></li> <li><code>,  -&gt;*  -&gt;  ()  []</code></li> <li><code>new  new[]  delete  delete[]</code></li> </ul> <p>operators that cannot be overloaded</p> <ul> <li><code>.  .*  ::  ?:</code></li> <li><code>sizeof  typeid</code></li> <li><code>static_cast  dynamic_cast  const_cast  reinterpret_cast</code></li> </ul> <ul> <li>Restrictions<ul> <li>Only existing operators can be overloaded (you can\u2019t create a ** operator for exponentiation)</li> <li>Operators must be overloaded on a class or enumeration type</li> <li>Overloaded operators must<ul> <li>Preserve number of operands</li> <li>Preserve precedence</li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec07/#c-overloaded","title":"C++ overloaded","text":"<ul> <li>Just a function with an operator name ( Use the opertaor keyword as a prefix to name operator *(\u00b7\u00b7\u00b7) ) </li> <li>Can be a member function <ul> <li>Implicit first argument <code>const String String::operator +(const String &amp;that);</code></li> <li><code>string a, b; a + b;</code> -&gt; be like <code>a.operator+(b);</code></li> </ul> </li> <li>Can be a global function<ul> <li>Both arguments explicit <code>const String operator +(const String &amp;s1, const String &amp;s2);</code></li> </ul> </li> <li>\u52a0 <code>const</code> \u662f\u4e3a\u4e86\u9632\u6b62 <code>a + b = c</code> \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f</li> </ul>"},{"location":"Course/OOP/Lec07/#for-member-functions","title":"For Member functions","text":"<ul> <li>Implicit first argument</li> <li>Developer must have access to the class definition</li> <li>Members have full access to the all data in the class</li> <li>No type conversion performed on receiver</li> </ul> <pre><code>class Integer\n{\npublic:\nInteger(int n = 0):i(n) {}\nconst Integer operator +(const Integer &amp;that) const\n{\nreturn Integer(i + that.i);\n}\nprivate:\nint i;\n};\nInteger x(1), y(5), z;\nz = x + y;  // x.operator+(y)\nz = x + 3;  // \u6b64\u65f6\u4f1a\u628a 3 \u6784\u9020\u6210\u4e00\u4e2a Integer \u5bf9\u8c61\nz = 3 + y;  // \u6b64\u65f6\u4e0d\u4f1a\u628a 3 \u53d8\u6210 Integer \u5bf9\u8c61\uff0c\u4f46\u4f1a\u5c1d\u8bd5\u628a y \u53d8\u6210 int\n</code></pre> <ul> <li>For binary operators(+, -, *, etc) member functions require one argument</li> <li>For unary operators(++, \u2013, -, !, etc) member functions require no arguments<ul> <li><code>const Interger Interger::operator-() const{ return Integer(-i); }</code></li> <li><code>z = -x</code></li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec07/#for-global-function","title":"For global function","text":"<pre><code>const Integer operator+ (const Integer&amp; rhs, const Integer&amp; lhs);\nInteger x, y;\nx + y; // -&gt; operator+ (x, y)\n</code></pre> <ul> <li>Explicit first argument</li> <li>Developer dose not need special access to classes</li> <li>May need to be a friend</li> <li>Type conversions performed on both arguments</li> </ul> <p>conversions</p> codeexplanation <pre><code>z = x + y;\nz = x + 3;\nz = 3 + y;\nz = 3 + 4;\n</code></pre> <ul> <li>\u524d\u4e09\u4e2a\u5de6\u53f3\u4e24\u4e2a\u53d8\u91cf\u90fd\u4f1a\u5c1d\u8bd5\u6784\u9020\u6210 <code>Integer</code></li> <li>\u6700\u540e\u4e00\u4e2a\u5148\u8fdb\u884c <code>3 + 4</code>, \u968f\u540e\u628a\u7ed3\u679c\u5c1d\u8bd5\u6784\u9020\u6210 <code>Integer</code></li> </ul> <ul> <li> <p>Global operators</p> <ul> <li>binary operators requires two arguments</li> <li>unary operators require one</li> <li>If you don\u2019t have access to private data members, then the global function must use the public interface or use <code>friend</code></li> </ul> <pre><code>class Integer\n{\nfriend const Integer operator+ (const Integer&amp; rhs, const Integer&amp; lhs);\n\u00b7\u00b7\u00b7\n};\nconst Integer operator+ (const Integer&amp; rhs, const Integer&amp; lhs)\n{\nreturn Integer(lhs.i + rhs.i);\n}\n</code></pre> </li> </ul> Members vs. Free Function <ul> <li>Unary operators should be members</li> <li><code>= () [] -&gt; -&gt;*</code> must be members</li> <li>assignment operators should be members</li> <li>All other binary operators as non-members</li> </ul>"},{"location":"Course/OOP/Lec07/#argument-passing-return-values","title":"Argument Passing &amp; Return Values","text":"<ul> <li>Argument Passing<ul> <li>If it is read-only, pass it in as a const reference (except for built-in types)</li> <li>make member functions const that do not modify the class (boolean operators, +, -, etc)</li> <li>for global functions, if the left-hand side changes, pass as a reference (assignment operators)</li> </ul> </li> <li>Return Values<ul> <li>Select the return type depending on the expected meaning of the operator. For example, <ul> <li>For operator+, you need to generate a new object. Return as a const object so the result cannot be modified as an left-value.</li> <li>Logical operators should return bool(or int for older compilers)</li> </ul> </li> </ul> </li> </ul> Tip <ul> <li>Pass in an object it you want to store it</li> <li>Pass in a reference or pointer if you want to do something to it</li> <li>Pass in a const reference or pointer if you want to get the values</li> <li>Pass out an object if you create it in the function</li> <li>Pass out a reference or pointer of the passed in only</li> <li>Never new something and return its pointer</li> </ul>"},{"location":"Course/OOP/Lec07/#the-prototypes-of-operators","title":"The prototypes of operators","text":"<ul> <li><code>+ - * / % ^ &amp; | ~</code><ul> <li><code>const Integer operator+ (const Integer&amp; rhs, const Integer&amp; lhs);</code></li> </ul> </li> <li><code>! &amp;&amp; || &lt; &gt; &lt;= &gt;= == !=</code><ul> <li><code>bool operator&lt; (const Integer&amp; rhs, const Integer&amp; lhs) const;</code></li> </ul> </li> <li><code>[]</code><ul> <li>Must be a member function</li> <li>Single argument</li> <li>Implies that the object it is being called for acts like an array, so it should return a reference<ul> <li><code>Integer v[10]; v[0] = 1;</code></li> <li>if you return pointer -&gt; you should use <code>*v[0] = 1;</code></li> </ul> </li> </ul> </li> <li> <p><code>++ --</code></p> <ul> <li>How to distinguish between prefix and postfix?<ul> <li>Prefix: <code>const Integer&amp; Integer::operator++();</code></li> <li>Postfix: <code>const Integer Integer::operator++(int);</code></li> </ul> </li> <li>postfix forms take an int argument \u2013 compiler will pass in 0 as that int</li> <li>User-defined prefix is more efficient than postfix</li> </ul> <pre><code>class Integer\n{\npublic:\nconst Integer&amp; operator++()    // prefix\n{\n*this += 1;     // increment\nreturn *this;   // fetch\n}\n// int argument not used so leave it unnamed\n// won't get compiler warning\nconst Integer operator++(int) // postfix\n{\nInteger old = *this;    // fetch\n++(*this);              // increment\nreturn old;             // return old value\n}\n\u00b7\u00b7\u00b7\nInteger x(1);\n++x;    // calls x.operator++()\nx++;    // calls x.operator++(0)\n};\n</code></pre> </li> </ul>"},{"location":"Course/OOP/Lec07/#stream","title":"Stream","text":"<ul> <li> <p>Defining a stream extractor</p> <ul> <li>Has to be a 2-argument global(free) function</li> <li>First argument is an <code>istream&amp;</code></li> <li>Second argument is a reference to a value</li> </ul> <pre><code>istream&amp; operator&gt;&gt; (istream&amp; in, T&amp; obj)\n{\n// specfic code to read obj \n\u00b7\u00b7\u00b7\nreturn in;\n}\n</code></pre> <ul> <li>Return an <code>istream&amp;</code> for chaining</li> </ul> <pre><code>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n((cin &gt;&gt; a) &gt;&gt; b) &gt;&gt; c;\n</code></pre> </li> <li> <p>Creating a stream inserter</p> <ul> <li>First argument is an <code>ostream&amp;</code></li> <li>Second argument is any value</li> </ul> <pre><code>ostream&amp; operator&lt;&lt; (ostream&amp; out, const T&amp; obj)\n{\n// specfic code to write obj \n\u00b7\u00b7\u00b7\nreturn out;\n}\n</code></pre> <ul> <li>Return an <code>ostream&amp;</code> for chaining</li> </ul> <pre><code>cout &lt;&lt; a &lt;&lt; b &lt;&lt; c;\n((cout &lt;&lt; a) &lt;&lt; b) &lt;&lt; c;\n</code></pre> </li> <li> <p>Creating manipulators</p> <ul> <li>You can define your own manipulators</li> </ul> <pre><code>// skeleton for an output stream manipulator\nostream&amp; manipulator(ostream&amp; out)\n{\n// specific code to manipulate out\n\u00b7\u00b7\u00b7\nreturn out;\n}\nostream&amp; tab(ostream&amp; out)\n{\nreturn out &lt;&lt; '\\t';\n}\ncout &lt;&lt; \"Hello\" &lt;&lt; tab &lt;&lt; \"World\" &lt;&lt; endl;\n</code></pre> </li> <li> <p>Copying vs. Initialization</p> </li> </ul> codeOutputMore <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Fi\n{\npublic:\nFi() { cout &lt;&lt; \"Fi()\" &lt;&lt; endl; }\n};\nclass Fee\n{\nint i;\npublic:\nFee(int) { cout &lt;&lt; \"Fee(int)\" &lt;&lt; endl; }\nFee(const Fi&amp;) { cout &lt;&lt; \"Fee(Fi)\" &lt;&lt; endl; }\nFee&amp; operator=(const Fee&amp; that)\n{\ni = that.i;\ncout &lt;&lt; \"=()\\n\";\nreturn *this;\n}\n};\nint main()\n{\nFee fee = 1;    // Fee(int)\nFi fi;\nFee fum = fi;   // Fee(Fi)\nfum = fi;\n}\n</code></pre> <pre><code>Fee(int)\nFi()\nFee(Fi)\nFee(Fi)\n=()\n</code></pre> <ul> <li>\u8fd9\u79cd <code>=</code> \u5e76\u4e0d\u5b89\u5168\uff0c\u56e0\u4e3a\u5f88\u53ef\u80fd\u53d1\u751f <code>fum = fum;</code> \u7684\u73b0\u8c61</li> <li>\u53ef\u6539\u5199\u4e3a</li> </ul> <pre><code>T&amp; T::operator=(const T&amp; that)\n{\n// check for self assignment\nif(this != &amp;that)\n{\n// perform assignment\n\u00b7\u00b7\u00b7\n}\nreturn *this;\n}\n</code></pre> <ul> <li>Assignment Operator<ul> <li>For classes with dynamically allocated memory declare an assignment operator(and a copy constructor)</li> <li>To prevent assignment, explicitly declare <code>operator=</code> as <code>private</code></li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec07/#value-classes","title":"Value classes","text":"<p>Note</p> <ul> <li>Appear to be primitive data types</li> <li>Passed to and returned from functions</li> <li>Have overloaded operators(often)</li> <li>Can be converted to and from others types</li> <li>like: Complex, Date, String</li> </ul> <ul> <li> <p>User-defined Type conversions</p> <ul> <li>A conversion operator can be used to convert an object of one class into an object of another class or a built-in type</li> <li> <p>Compilers perform implicit conversions using:</p> <ul> <li>Single-argument consstructors</li> </ul> <pre><code>class PathName\n{\nstring name;\npublic:\n//or could be multi-argument with defaults\nPathName(const string&amp;);\n~PathName();\n};\n\u00b7\u00b7\u00b7\nstring abc(\"abc\");\nPathName xyz(abc);  //OK\n</code></pre> <ul> <li> <p>implicit type conversion operators (Preventing implicit conversions)</p> codeexplanation <p><code>c++ [4] class PathName {     string name; public:     explicit PathName(const string&amp;);     ~ PathName(); }; \u00b7\u00b7\u00b7 string abc(\"abc\"); PathName xyz(abc);  // OK xyz = abc;  // error!</code></p> <ul> <li>New keyword: <code>explicit</code></li> <li>\u7528\u5728\u4e0a\u8ff0\u7c7b\u4f3c\u7684\u51fd\u6570\u524d\uff0c\u8868\u793a\u6b64\u7c7b\u6784\u9020\u51fd\u6570\u51fd\u6570\u53ea\u7528\u4e8e\u6784\u9020\u4e0d\u7528\u4e8e\u7c7b\u578b\u8f6c\u6362</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>\u66f4\u901a\u7528/\u76f4\u63a5\u7684\u7c7b\u578b\u8f6c\u6362\u65b9\u6cd5 \u2014 Operator conversion</p> <ul> <li>Function will be called automatically</li> <li>Return type is same as function name</li> </ul> <pre><code>class Rational\n{\npublic:\n\u00b7\u00b7\u00b7\noperator double() const;    // Rational to double (double() \u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u4f55\u7c7b\u578b\u7684\u540d\u5b57)\n}\n\u00b7\u00b7\u00b7\nRational::operator double() const\n{\nreturn numerator_/(double)denominator_;\n}\nRational r(1, 3);\ndouble d = 1.3 * r; // r =&gt; double\n</code></pre> <p>General form of conversion ops</p> <ul> <li>X::operator T()<ul> <li>Operator name is any type descriptor</li> <li>No explicit arguments</li> <li>No return type</li> <li>Complier will use it as a type conversion from <code>X</code> to <code>T</code></li> </ul> </li> </ul> </li> <li> <p>C++ type conversions</p> <ul> <li>Built-in conversions<ul> <li>Primitive <ul> <li><code>char -&gt; short -&gt; int -&gt; float -&gt; double (int -&gt; long)</code></li> </ul> </li> <li>Implicit (for any type T)<ul> <li><code>T -&gt; T&amp;; T&amp; -&gt; T;  T* -&gt; void*</code></li> <li><code>T[] -&gt; T*; T* -&gt; T[]; T -&gt; const T</code></li> </ul> </li> </ul> </li> <li> <p>User-defined <code>T -&gt; C</code></p> <ul> <li>if <code>C(T)</code> is a valid constructor call for <code>C</code></li> <li>if <code>operator C()</code> is defined for <code>T</code></li> </ul> </li> <li> <p>But it\u2019s better to avoid User-defined conversions. Use explicit conversion functions instead. For example:</p> </li> <li>In <code>class Rational</code> instead of the conversion operator, declare a member function <code>double to_double() const;</code></li> </ul> </li> <li> <p>Overloading and type conversion</p> <ul> <li>C++ checks each argument for a \u201cbest match\u201d</li> <li>Best match means cheapest<ol> <li>Exact match is cost-free</li> <li>Matches involving built-in conversions</li> <li>User-defined type conversions</li> </ol> </li> </ul> </li> </ul> \u5ef6\u7533 - LValue vs. RValue <ul> <li>\u53ef\u4ee5\u7b80\u5355\u8ba4\u4e3a\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u5de6\u8fb9\u7684\u90fd\u662f\u5de6\u503c\uff1a\u53d8\u91cf\u672c\u8eab\u3001\u5f15\u7528\uff1b<code>*, []</code>\u8fd0\u7b97\u7684\u7ed3\u679c</li> <li>\u53ea\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u53f3\u8fb9\u7684\u90fd\u662f\u53f3\u503c\uff1a\u5b57\u9762\u91cf\uff1b\u8868\u8fbe\u5f0f</li> <li>\u5f15\u7528\u53ea\u80fd\u63a5\u53d7\u5de6\u503c -&gt; \u5f15\u7528\u662f\u5de6\u503c\u7684\u522b\u540d</li> <li>\u8c03\u7528\u51fd\u6570\u65f6\u7684\u4f20\u53c2\u76f8\u5f53\u4e8e\u53c2\u6570\u53d8\u91cf\u5728\u8c03\u7528\u65f6\u7684\u521d\u59cb\u5316</li> </ul> <p>\u53f3\u503c\u5f15\u7528</p> <ul> <li><code>int x = 20;</code> \u5de6\u503c</li> <li><code>int&amp;&amp; rx = x * 2;</code> x*2 \u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u53f3\u503c\uff0crx \u5ef6\u957f\u5176\u58f0\u660e\u5468\u671f\uff1brx \u662f\u53f3\u503c\u5f15\u7528\uff08\u5bf9\u53f3\u503c\u7684\u5f15\u7528\uff09-&gt; \u76f8\u5f53\u4e8e\u628a\u53f3\u503c\u5148\u56fa\u5b9a\u4e0b\u6765</li> <li><code>int y = rx + 2;</code> \u56e0\u6b64\u4f60\u53ef\u4ee5\u91cd\u7528\u5b83\uff1a42</li> <li><code>rx = 100;</code> \u4e00\u65e6\u4f60\u521d\u59cb\u5316\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u5de6\u503c\uff0c\u53ef\u4ee5\u88ab\u8d4b\u503c</li> <li><code>int&amp;&amp; rrx1 = x;</code> ERROR\uff1a\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316</li> <li><code>const int&amp;&amp; rrx2 = x</code> ERROR: \u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316</li> </ul> <p>\u53f3\u503c\u5f15\u7528\u7684\u7528\u9014</p> <pre><code>// \u63a5\u6536\u5de6\u503c \nvoid func(int&amp; lref)\n{\ncout &lt;&lt; \"lvalue ref\" &lt;&lt; endl;\n}\n// \u63a5\u6536\u53f3\u503c -- \u4e3a\u4e86\u8282\u7701\u5185\u5b58\uff0c\u53f3\u503c\u5f15\u7528\u53ef\u4ee5\u63a5\u6536\u53f3\u503c\uff0c\u800c\u4e0d\u662f\u62f7\u8d1d\u4e00\u4efd\nvoid func(int&amp;&amp; rref)\n{\ncout &lt;&lt; \"rvalue ref\" &lt;&lt; endl;\n}\nint main()\n{\nint x = 10;\nfunc(x);    // lvalue ref\nfunc(10);   // rvalue ref\nreturn 0;\n}\n</code></pre> <ul> <li>\u5982\u679c\u662f\u5de6\u503c\u5f15\u7528\uff0c\u4e5f\u8981\u5148\u653e\u5230\u4e00\u4e2a\u53d8\u91cf\u4e2d\u624d\u80fd\u4f20\u9012</li> <li>\u800c\u53f3\u503c\u5f15\u7528\u4e0d\u9700\u8981\u6709\uff0c\u53ef\u4ee5\u52a0\u901f\u8fd0\u7b97\uff0c\u51cf\u5c11\u5185\u5b58\u62f7\u8d1d</li> </ul>"},{"location":"Course/OOP/Lec08/","title":"Templates | \u6a21\u677f","text":"Why templates <ul> <li>Suppose you need a list of X and a list of Y<ul> <li>The lists would use similar code</li> <li>They differ by the type stored in the list</li> </ul> </li> <li>Choices<ul> <li>Require common base class<ul> <li>May not be desirable</li> </ul> </li> <li>CLone code<ul> <li>preserves type-safety</li> <li>hard to manage</li> </ul> </li> <li>Untyped lists<ul> <li>type unsafe</li> </ul> </li> </ul> </li> </ul> <ul> <li>Final choice: templates<ul> <li>Reuse source code<ul> <li>generic programming | \u6cdb\u578b\u7f16\u7a0b</li> <li>use types as parameters in class or function definitions</li> </ul> </li> <li>Function Template | \u51fd\u6570\u6a21\u677f\uff08\u5236\u9020\u51fd\u6570\uff09<ul> <li>Example: sort function</li> </ul> </li> <li>Class Template | \u7c7b\u6a21\u677f(\u5236\u9020\u7c7b)<ul> <li>Example: container such as stack, list, queue\u2026<ul> <li>Stack operations are independent of the type of items in the stack</li> </ul> </li> <li>template member functions</li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec08/#function-templates","title":"Function Templates","text":"<ul> <li>Perform similar operations on different types of data</li> <li>Swap function for two int arguments:</li> </ul> <pre><code>void swap(int&amp; a, int&amp; b) {\nint temp = a;\na = b;\nb = temp;\n}\n</code></pre> <ul> <li>What if we want to swap floats, strings, Currency \u2026? (We need to rewrite the function for each type)</li> <li>But we can use a template!!!</li> </ul> swap function template <pre><code>template &lt;class T&gt;  // \u8bf4\u660e\u4e0b\u9762\u7684\u4e1c\u897f\u662f\u4e2a\u6a21\u677f\nvoid swap(T&amp; a, T&amp; b) {\nT temp = a;\na = b;\nb = temp;\n}\n</code></pre> <ul> <li>The template keyword introduces thetemplate</li> <li>The class T specifies a parameterized type name<ul> <li>class means any built-in type or user-defined type</li> </ul> </li> <li>Inside the template, use T as a type name</li> </ul> <ul> <li> <p>Template Instantiation \u2013 Generating a declaration from a template class/function and template arguments:</p> <ul> <li>Types are substituted into template</li> <li>New body of function or class definition is created <ul> <li>syntax errors, type checking</li> </ul> </li> <li>Specialization - a version of template for a particular argument(s)</li> </ul> </li> <li> <p>Interactions</p> <ul> <li>Only exact match on types is used</li> <li>No conversion operations are applied</li> </ul> <pre><code>swap(int, int); // OK\nswap(double, double); // OK\nswap(int, double); // Error\n</code></pre> <ul> <li>Implicit conversions are ignored</li> <li>Template functions and regular functions coexist</li> </ul> </li> <li> <p>Overloading rules</p> <ul> <li>Check first for unique function match</li> <li>Then check for unique function template</li> <li>Then do overloading on functions</li> </ul> <pre><code>void f(float i, float k);\ntemplate &lt;class T&gt; void f(T i, T k);\nf(1.0, 2.0);    // \u6a21\u677f\nf(1, 2);        // \u6a21\u677f\nf(1.2, 0);      // \u4e24\u4e2a\u7c7b\u578b\u4e0d\u540c\uff0c\u8f6c\u6210 float \u8c03\u7528 f(float, float)\n</code></pre> </li> <li> <p>Function Instantiation</p> <ul> <li>The compiler deduces the template type from the actual arguments passed into the function</li> <li>Can be explicit: For example, if the parameter is not in the function signature (older compilers won\u2019t allow this)</li> </ul> <pre><code>template &lt;class T&gt;\nvoid f(void) { ... }\nf&lt;int&gt;(); // type T is int\nf(string); // type T is string\n</code></pre> <ul> <li>\u5728\u51fd\u6570\u540e\u9762\u52a0\u5c16\u62ec\u53f7\uff0c\u5c16\u62ec\u53f7\u4e2d\u7684\u7c7b\u578b\u8868\u793a <code>T</code> \u7684\u7c7b\u578b</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec08/#class-templates","title":"Class Templates","text":"<ul> <li>Classes parameterized by type<ul> <li>Abstract operations from the types being operated upon</li> <li>Define potentially infinite set of classes</li> <li>Another step towards reuse</li> </ul> </li> <li>Typical use: container classes<ul> <li><code>stack&lt;int&gt;</code> \u2014 a stack that is parameterized over int</li> <li><code>list&lt;Currency&amp;&gt;</code></li> </ul> </li> </ul> <p>Important</p> <ul> <li>\u5982\u679c\u5c06\u7c7b\u6a21\u677f\u4e2d\u51fd\u6570\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u5f00\u5199\uff0c\u5219\u9664\u7c7b\u524d\u8981\u52a0 <code>template</code>, \u6bcf\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e5f\u8981\u52a0 <code>template</code></li> <li>\u6240\u6709\u7684\u51fd\u6570\u90fd\u662f <code>ClassName&lt;T&gt;::funcName()</code> \u7684\u5f62\u5f0f</li> </ul> Example <pre><code>template &lt;class T&gt;\nclass Vector {\npublic:\nVector(int);\n~Vector();\nVector(const Vector&amp;);\nVector&amp; operator=(const Vector&amp;);\nT&amp; operator[](int);\nprivate:\nint size;\nT* data;\n};\ntemplate &lt;class T&gt;\nVector&lt;T&gt;::Vector(int s) : size(s)\n{\ndata = new T[s];\n}\ntemplate &lt;class T&gt;\nT&amp; Vector&lt;T&gt;::operator[](int i) {\nif (i &lt; 0 || i &gt;= size) {\nthrow \"Index out of range\";\n}\nelse\n{\nreturn data[i];\n}\n}\n</code></pre> <ul> <li> <p>Templates can use multiple types</p> <p>```c++ template  class HashTable  {     const Value&amp; lookup(const Key&amp;) const;     void install(const Key&amp;, const Value&amp;);     \u2026 }; <li> <p>Templates nest \u2014 they\u2019re just new types</p> <ul> <li><code>Vector&lt;Vector&lt;double *&gt; &gt;</code></li> </ul> </li> <li> <p>Type arguments can be complicated</p> <ul> <li><code>Vector&lt; int (*)(Vector&lt;double&gt;&amp;, int) &gt;</code> \u2014 \u4e00\u4e2a <code>Vector</code> \u91cc\u9762\u662f\u51fd\u6570\u6307\u9488\uff0c\u6307\u9488\u6307\u5411\u7684\u51fd\u6570\u7684\u53c2\u6570\u662f <code>Vector&lt;double&gt;&amp;</code> \u548c <code>int</code>\uff0c\u8fd4\u56de\u503c\u662f <code>int</code></li> </ul> </li> <li> <p>Expression parameters</p> <ul> <li>Template arguments can be constant expressions</li> <li>Non-Type parameters<ul> <li>can have a default argument</li> </ul> </li> </ul> <pre><code>template &lt;class T, int size = 100&gt;\nclass Vector {\n...\nprivate:\nT data[size];   // fixed size array\n};\n</code></pre> Usage:Non-type parameters <ul> <li>Usage<ul> <li><code>Vector&lt;int, 100&gt; v;</code></li> <li><code>Vector&lt;int, 50 * 2&gt; v;</code></li> <li><code>Vector&lt;int&gt; v;</code> \u2014 uses default <code>size = 100</code></li> </ul> </li> <li>Summary<ul> <li>Embedding sizes not necessarily a good idea</li> <li>Can make code faster</li> <li>Makes use more complicated \u2014 size argument appears everywhere</li> <li>Can lead to code bloat</li> </ul> </li> </ul> </li> <p>Template programming</p> <ul> <li>\u4e00\u4e2a\u7c7b\u6a21\u677f\u7684\u5168\u90e8\u90fd\u5e94\u8be5\u5728\u4e00\u4e2a\u5934\u6587\u4ef6\u4e2d\uff0c\u800c\u4e0d\u662f\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u5f00\u653e\u5728\u4e24\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5426\u5219\u7f16\u8bd1\u5668\u4f1a\u94fe\u63a5\u5931\u8d25</li> <li>\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7c7b\u6a21\u677f\u7684\u51fd\u6570\u90fd\u505a\u6210 <code>inline</code></li> </ul> Templates and Inheritance <ul> <li>Templates can inherit from non-template classes</li> </ul> <pre><code>class Derived : public Base\n{\n...\n};\n</code></pre> <ul> <li>Templates can inherit from template classes | \u5f53\u5b9e\u4f8b\u5316 Derived \u65f6\uff0c\u8fd8\u9700\u8981\u540c\u6b65\u5b9e\u4f8b\u5316 Base</li> </ul> <pre><code>template &lt;class T&gt;\nclass Derived : public Base&lt;T&gt;\n{\n...\n};\n</code></pre> <ul> <li>Non-template classes can inherit from template classes</li> </ul> <pre><code>class Derived : public Base&lt;int&gt;\n{\n...\n};\n</code></pre>"},{"location":"Course/OOP/Lec09/","title":"Exceptions | \u5f02\u5e38","text":"Vector codeproblem <pre><code>template &lt;class T&gt;\nclass Vector\n{\nprivate:\nT *elem;\nint sz;\npublic:\nVector(int s = 0) : sz(s) ... ~Vector() { delete[] elem; }\nT &amp;operator[](int i);\nint size() const { return sz; }\n};\n</code></pre> <ul> <li><code>T &amp;operator[](int i);</code> \u662f\u53ef\u80fd\u53d1\u751f\u8d8a\u754c\u7684\uff0c\u5982\u4f55\u5904\u7406\uff1a</li> <li> <p>Choice: </p> <ol> <li>Return random memory object \u2014 <code>return elem[i];</code></li> <li> <p>Return a special error value</p> <pre><code>if(i &lt; 0 || i &gt;= size())\n{\n// WRONG - T \u4e0d\u4e00\u5b9a\u6709\u8fd9\u79cd\u6784\u9020\u51fd\u6570\uff0c\u4e14\u539f\u672c\u5c31\u53ef\u80fd\u6709\u8fd9\u6837\u6b63\u5e38\u7684\u5185\u5bb9\nT *error_marker = new T(\"some magic value\");\nreturn *error_marker;\n}\nreturn elem[i];\n</code></pre> <ul> <li>But this throws the baby out with the bath!</li> <li><code>x = v[2] + v[4]; //Not safe code</code></li> </ul> </li> <li> <p>Just die!</p> <pre><code>if(i &lt; 0 || i &gt;= size())\n{\nexit(22);\n}\nreturn elem[i];\n</code></pre> </li> <li> <p>Die gracefully (with autopsy)</p> <pre><code>assert(i &gt;= 0 &amp;&amp; i &lt; size());\nreturn elem[i];\n</code></pre> <ul> <li><code>assert</code> \u505a\u63a5\u53e3\u68c0\u67e5\uff0c\u5728\u8c03\u7528\u51fd\u6570\u65f6\u4f1a\u68c0\u67e5\u4f20\u5165\u53c2\u6570\u662f\u5426\u5408\u6cd5\uff0c\u82e5\u4e0d\u5408\u6cd5\u5219\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f</li> </ul> </li> </ol> </li> </ul> <ul> <li>When to use exceptions?<ul> <li>Many times, you don\u2019t know what should be done</li> <li>Solution: turf the problem to the caller | \u5c06\u95ee\u9898\u5411\u4e0a\u62a5<ul> <li>Make caller responsible for handling the problem</li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec09/#throw","title":"<code>throw</code> | \u629b\u51fa\u5f02\u5e38","text":"<ul> <li> <p>How to raise an exception \u2014 <code>throw</code></p> <pre><code>template &lt;class T&gt;\nT &amp;Vector&lt;T&gt;::operator[](int i)\n{\nif(i &lt; 0 || i &gt;= size())\n{\n// throw is a keyword\n// exception is raised at this point\nthrow &lt;&lt; something &gt;&gt;\n}\nreturn elem[i];\n}\n</code></pre> </li> <li> <p>What do you throw?</p> <ul> <li>What do you have? \u2190 Data</li> <li>Define a class to represent the error</li> </ul> <pre><code>class VectorIndexError\n{\npublic:\nVectorIndexError(int i) : m_badValue(i) {}\n~VectorIndexError() {}\nvoid diagnostic() {\ncerr &lt;&lt; \"index \" &lt;&lt; m_badValue &lt;&lt; \" is out of range\" &lt;&lt; endl;\n}\nprivate:\nint m_badValue;\n};\n</code></pre> </li> <li> <p>How to raise it?</p> <pre><code>template &lt;class T&gt;\nT &amp;Vector&lt;T&gt;::operator[](int i)\n{\nif(i &lt; 0 || i &gt;= size())\n{\n// VectorIndexError e(i);\n// throw e;\nthrow VectorIndexError(i);\n}\nreturn elem[i];\n}\n</code></pre> </li> <li> <p>What about your caller</p> <ol> <li> <p>Case 1) Don\u2019t care \u2014 Code never even suspects a problem</p> <pre><code>int func()\n{\nVector&lt;int&gt; v(12);\nv[3] = 5;\nint i = v[42];  // Out of range\n// Control never gets here\nreturn i;\n}\n</code></pre> </li> <li> <p>Case 2) Care deeply</p> <pre><code>void outer()\n{\ntry\n{\nfunc(); // func() throws an exception\nfunc2();// won't be called\n}\ncatch(VectorIndexError &amp;e)\n{\ne.diagnostic();\n//This exception does not propagate\n}\ncout &lt;&lt; \"Control is here after exception\";\n}\n</code></pre> </li> <li> <p>Case 3) Mildly interested</p> <pre><code>void outer()\n{\nstring err(\"exception caught\");\ntry\n{\nfunc(); // func() throws an exception\n}\ncatch(VectorIndexError)\n{\ncout &lt;&lt; err;\nthrow;  // propagate the exception\n}\n}\n</code></pre> </li> <li> <p>Case 4) Doesn\u2019t care about the particulars ( <code>...</code> means \u201ccatch All exceptions\u201d )</p> <pre><code>void outer()\n{\ntry\n{\nfunc(); // func() throws an exception\n}\ncatch(...)\n{\n// ... catches ALL exceptions!!\ncout &lt;&lt; \"exception caught\";\n}\n}\n</code></pre> </li> </ol> </li> </ul> Review <ul> <li>Throw statement raises the exception<ul> <li>Control propagates back to first handler for that exception</li> <li>Propagation follows the call chain</li> <li>Objects on stack are properly destroyed</li> </ul> </li> <li><code>throw exp</code>;<ul> <li>throws value for matching</li> </ul> </li> <li><code>throw</code>;<ul> <li>reraises the exception being handled</li> <li>valid only within a handler</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec09/#exception-handlers","title":"Exception Handlers","text":"<ul> <li> <p>Try block</p> <pre><code>try\n{\n// code that might throw an exception\n}\ncatch ...\n{\n// code that handles the exception\n}\ncatch ...\n{\n// code that handles the exception\n}\n</code></pre> <ul> <li>Establishes any number of handlers</li> <li>Not needed if you don\u2019t use any handlers</li> <li>Shows where you expect to handle exceptions</li> <li>Costs cycles</li> </ul> </li> <li> <p>Exception handlers</p> <ul> <li>Select exception by type</li> <li>Can re-raise exception</li> <li>Two forms<ul> <li><code>catch (Type)</code></li> <li><code>catch (...)</code></li> </ul> </li> <li>Take a single argument (like a formal parameter)</li> </ul> </li> <li> <p>Selecting a handler</p> <ul> <li>Can have any number of handlers</li> <li>Handlers are checked in order of appearance 1. Check for exact match 2. Apply base class conversions (Reference and pointer types, only) 3. Ellipses(\u2026) matches any exception</li> </ul> </li> <li> <p>Inheritance can be used to structure exceptions</p> using inheritance <ul> <li>Hierachy of exception types</li> </ul> code - handlersusing handlers <pre><code>class MathErr\n{\n...\nvirtual void diagnostic();\n};\nclass OverflowErr : public MathErr { ... }\nclass UnderflowErr : public MathErr { ... }\nclass ZeroDivideErr : public MathErr { ... }\n</code></pre> <pre><code>try\n{\n// code to exercise math options\nthrow UnderflowErr();\n}\ncatche(ZeroDivideErr &amp;e)\n{\n// handle divide by zero\n}\ncatche(MathErr &amp;e)\n{\n// handle other math errors\n}\ncatche(...)\n{\n// handle all other exceptions\n}\n</code></pre> <ul> <li>\u5f02\u5e38\u5e94\u7531\u7a84\u5230\u5bbd\u8fdb\u884c\u5904\u7406\uff0c\u5373\u5148\u5904\u7406\u5b50\u7c7b\u5f02\u5e38\uff0c\u518d\u5904\u7406\u7236\u7c7b\u5f02\u5e38\uff0c\u6700\u540e\u5904\u7406\u6240\u6709\u5f02\u5e38</li> </ul> </li> <li> <p>Exception and new</p> <ul> <li>new does NOT return 0 on failure</li> <li>new raises a bad_alloc exception on failure</li> </ul> <pre><code>void func()\n{\ntry\n{\nwhile(1)\n{\nchar *p = new char[10000000];\n}\ncatch(bad_alloc &amp;e)\n{\ncerr &lt;&lt; \"out of memory\" &lt;&lt; endl;\n}\n}\n}\n</code></pre> </li> </ul> \u8865\u5145 <p></p> <ul> <li> <p>Exception specifications</p> <ul> <li>Declare which exceptions a function might throw</li> <li>Part of function prototypes</li> </ul> <pre><code>void func() throw (OverflowErr)\n{\n...\n}\n</code></pre> <ul> <li>Not checked at compile time</li> <li>At run time, if an exception not in the list propagates out, the <code>unexpected</code> exception is raised</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec09/#failure-in-ctors-dtors","title":"Failure in Ctors &amp; Dtors","text":""},{"location":"Course/OOP/Lec09/#failure-in-ctors","title":"Failure in Ctors","text":"<ul> <li>No return value is possible</li> <li>Use an \u201cuninitialized\u201d flag</li> <li>Defer work to an Init() function</li> <li> <p>Better to throw an exception</p> </li> <li> <p>If a constructor can\u2019t complete, throw an exception</p> <ul> <li>Dtors for objects whose ctor didn\u2019t complete won\u2019t be called</li> <li>Clean up allocated resources before throwing</li> </ul> </li> </ul> Suggest - Two stages construction <ul> <li>Do normal work in ctor<ul> <li>Initialize all member objects</li> <li>Initialize all primitive members</li> <li>Initialize all pointers to 0</li> <li>NEVER request any resources<ul> <li>File / Network connection / Memory</li> </ul> </li> </ul> </li> <li>Do additional work in Init() function<ul> <li>Request resources</li> <li>Do any other work that might fail</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec09/#failure-in-dtors","title":"Failure in Dtors","text":"<p>Destructors are called when: * Normal call: object exists from scope * Durong exceptions: stack unwinding invokes dtors on objects as scope is existed</p> <ul> <li>Throwing an exception in a dtor that is itself being called as the result of an exception will invoke <code>std::terminate()</code><ul> <li>Allowing exceptions to escape from dtors should be avoided</li> </ul> </li> </ul> catch <ul> <li><code>catch</code> exceptions by reference or pointer</li> <li><code>catch(BUG *e)</code> \u2014 we need <code>delete e</code> in the handler</li> <li><code>catch(BUG &amp;e)</code> \u2014 we need care when to destruct <code>e</code></li> </ul>"},{"location":"Course/OOP/Lec10/","title":"Smart Pointers | \u667a\u80fd\u6307\u9488","text":"<p>Abstract</p> <ul> <li><code>Templates</code>, <code>Inheritance</code>, <code>Reference Counting</code> \u5408\u8d77\u6765\u5b9e\u73b0 <code>Smart Pointers</code></li> <li><code>Reference Counting</code> \u662f\u6709\u591a\u5c11\u4e2a\u6307\u9488\u6307\u5411\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u6307\u9488\u6307\u5411\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5c31 <code>delete</code> \u8fd9\u4e2a\u5bf9\u8c61</li> </ul> Smart Pointer \u7684\u6765\u6e90 <p>C++ Strategies and Tactics, Robert B. Murray, 1993</p> <p>Goals</p> <ul> <li>Introduce the code for maintaining reference counts<ul> <li>A reference count is a count of the number of times an object is shared</li> <li>Pointer manipulations have to maintain the count</li> </ul> </li> <li>Class UCObject(Use-counted object) holds the count</li> <li>UCPointer is a smart pointer to a UCObject<ul> <li>A smart pointer is an object defined by a class</li> <li>Implemented using a template</li> <li>Overloads operator-&gt;  and  unary operator*</li> </ul> </li> </ul>"},{"location":"Course/OOP/Lec10/#reference-counting","title":"Reference counting","text":"<ul> <li>Each shared object has a counter</li> <li>Initial value is 0</li> <li> <p>Whenever a pointer is assigned <code>p = q</code></p> <ul> <li>Have to do the following</li> </ul> <pre><code>p-&gt;decrement(); // p's count will decrease \np = q;\nq-&gt;increment(); // q's count will increase\n</code></pre> </li> </ul> <p>StringRep</p> <pre><code>#include \"UCObject.hpp\"\n#include &lt;cstring&gt;\nclass StringRep:public UCObject\n{\npublic:\nStringRep(const char *s)\n{\nif(s)\n{\nint len = strlen(s) + 1;\nm_pChars = new char(len);\nstrcpy(m_pChars, s);\n}\nelse\n{\nm_pChars = new char[1];\n*m_pChars = '\\0';\n}\n}\n~StringRep()\n{\ndelete[] m_pChars;  // \u5f15\u7528\u8ba1\u6570\u662f\u7236\u7c7b\u8981\u505a\u7684\u4e8b\u60c5\n}\nStringRep(const StringRep &amp;sr)\n{\nint len sr.length();\nm_pChars = new char[len + 1];\nstrcpy(m_pChars, sr.m_pChars);\n}\nint length() const\n{\nreturn strlen(m_pChars);\n}\nint equal(const StringRep &amp;sp) const\n{\nreturn (strcmp(m_pChars, sp.m_pChars) == 0);\n}\nprivate:\nchar *m_pChars;\n// reference semantics -- no assignment op!\nvoid operator=(const StringRep &amp;){} // \u4e0d\u5141\u8bb8\u76f4\u63a5\u8d4b\u503c\uff0c\u56e0\u4e5f\u6ca1\u6709\u8d4b\u503c\u7684\u5fc5\u8981\n};\n</code></pre> <p>String</p> <pre><code>#include \"UCPointer.hpp\"\n#include \"StringRep.hpp\"\nclass String\n{\npublic:\n}\n</code></pre>"},{"location":"Course/OOP/Lec11/","title":"Class Design","text":"<p>TODO</p>"},{"location":"Course/OOP/Lec12/","title":"Streams &amp; \u7ee7\u627f\u6784\u9020\u51fd\u6570","text":"<p>TODO</p>"},{"location":"Course/System2/","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u2161","text":"<p>Abstract</p> <p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u2161 \u662f ZJU \u8ba1\u7b97\u673a\u7cfb\u7edf\u7cfb\u5217\u8bfe\u7a0b\u4e4b\u4e00\uff0c\u5305\u62ec\u8ba1\u7ec4\u540e\u534a\u90e8\u5206\u548c\u64cd\u4f5c\u7cfb\u7edf\u524d\u534a\u90e8\u5206\u5185\u5bb9</p> \u671f\u672b\u8865\u5929 <ul> <li> \u8ba1\u7ec4\u671f\u672b.pdf</li> <li> OS \u671f\u672b.pdf</li> </ul> <p>\u53ea\u505a\u5b66\u4e60\u4ea4\u6d41\u4f7f\u7528\uff0c\u7981\u6b62\u88ab\u7528\u4e8e\u5546\u4e1a\u5316\u7528\u9014</p> <p>To Be Continued</p>"},{"location":"Course/System2/Lec01_Introduction/","title":"Introduction","text":"<ul> <li>Introduction<ul> <li>Interrupts and Traps</li> <li>Interrupt Handling</li> <li>Interrupt-drive I/O Cycle</li> <li>I/O: from System Call to Devices, and Back</li> <li>Direct Memory Access | DMA</li> <li>Storage Structure</li> <li>Storage Hierarchy<ul> <li>Performance of Storages</li> </ul> </li> <li>Caching</li> <li>MUltiprocessor Systems<ul> <li>Symmetric Multiprocessing Architecture</li> <li>NUMA</li> <li>Clustered Systems</li> <li>Distributed Systems</li> <li>Special-Purpose Systems</li> <li>Dual-mode operation**</li> <li>Transition between Modes</li> <li>Timer</li> <li>Process | \u8fdb\u7a0b<ul> <li>Resource Management: Process Management</li> <li>Process Management Activities</li> </ul> </li> <li>Thread | \u7ebf\u7a0b<ul> <li>From Process to Thread</li> </ul> </li> <li>Resource Management: Memory Management | \u5185\u5b58\u7ba1\u7406</li> <li>Resource Management: File Systems | \u6587\u4ef6\u7cfb\u7edf</li> <li>Resource Management: I/O System Management</li> <li>Separate Policy and Mechanism</li> <li>Virtualization</li> </ul> </li> <li>Three pieces\u4e2d\u7684Introduction<ul> <li>What happens when a program runs?</li> <li>All about Virtualization</li> <li>Virtualizing The CPU</li> <li>Virtualizing Memory</li> <li>Concurrency | \u5e76\u53d1</li> <li>I/O</li> </ul> </li> </ul> </li> </ul> <p>Introduction\u57fa\u672c\u662f\u7cfb\u7edf\u2161\u4e2d\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u90e8\u5206\u8bfe\u4e0a\u8981\u8bb2\u7684\u5185\u5bb9</p>"},{"location":"Course/System2/Lec01_Introduction/#interrupts-and-traps","title":"Interrupts and Traps","text":"<ul> <li>Interrupt transfers control to the interrupt service routine </li> <li> <p>interrupt vector: a table containing addresses of all the service routines</p> </li> <li> <p>incoming interrupts are disabled while serving another interrupt to prevent a lost interrupt</p> </li> <li> <p>interrupt handler must save the (interrupted) execution states</p> </li> <li> <p>A trap is a software-generated interrupt, caused either by an error or a user request</p> </li> </ul> <p>error-&gt;\u6bd4\u5982\u9664\u6cd5\u6307\u4ee4\u88ab\u9664\u6570\u662f0\uff0cuser request-&gt;\u7528\u6237\u663e\u5f0f\u4ea7\u751f\u7684trap\u6bd4\u5982\u7cfb\u7edf\u8c03\u7528\uff0csvc\u6307\u4ee4\u7b49</p> <ul> <li> <p>an interrupt is asynchronous; a trap is synchronous</p> </li> <li> <p>e.g., system call, divided-by-zero exception, general protection exception\u2026</p> </li> <li> <p>Operating systems are usually interrupt-driven(\u6709\u5b9a\u65f6\u5668\u4e2d\u65ad\uff0c\u76f8\u5e94I/O\u4e2d\u65ad\u7b49\u7b49)</p> </li> </ul> <p>\u7528\u6237\u6001\u7684\u7a0b\u5e8f\u4e0d\u5141\u8bb8\u76f4\u63a5\u64cd\u63a7\u78c1\u76d8\u63a7\u5236\u5668\uff0c\u4f46\u53c8\u9700\u8981\u8bfb\u53d6\u5176\u4e2d\u7684\u6587\u4ef6\uff0c\u4f1a\u901a\u8fc7\u8fd0\u884c\u5728\u7279\u6743\u6001\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u64cd\u4f5c\uff08\u7cfb\u7edf\u8c03\u7528\uff09</p>"},{"location":"Course/System2/Lec01_Introduction/#interrupt-handling","title":"Interrupt Handling","text":"<ul> <li> <p>Operating system preserves the execution state of the CPU</p> </li> <li> <p>save registers and the program counter (PC)</p> <p>\u4fdd\u5b58\u4e0a\u4e0b\u6587\u2014\u2014\u5bc4\u5b58\u5668\u548cPC\uff08\u4fdd\u5b58\u5230\u5185\u5b58\uff09</p> </li> <li> <p>OS determines which device caused the interrupt</p> </li> </ul> <ol> <li> <p>polling </p> <p>polling\u65b9\u5f0f\u7684\u4e2d\u65ad\uff0c\u4e0d\u8bba\u4ec0\u4e48\u7c7b\u578b\u4e2d\u65ad\u90fd\u4f1a\u5747\u4e3a**\u8df3\u8f6c\u5230\u4e00\u4e2a\u7edf\u4e00\u7684\u5165\u53e3**\uff0c\u7136\u540e\u7531\u8f6f\u4ef6\u53bb\u67e5\u8be2\u5bc4\u5b58\u5668\u4ece\u800c\u77e5\u9053\u4e2d\u65ad\u7684\u6765\u6e90</p> </li> <li> <p>vectored interrupt system</p> <p>\u786c\u4ef6\u5df2\u7ecf\u56fa\u5b9a\u597d\uff08\u533a\u5206\u597d\u4e2d\u65ad\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u8f6f\u4ef6\u518d\u53bb\u67e5\u8be2\uff09\uff0c\u4f1a**\u76f4\u63a5\u8df3\u8f6c\u5230\u5bf9\u5e94\u5730\u5740**</p> </li> </ol> <ul> <li>OS handles the interrupt by calling the device\u2019s driver\uff08\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff09</li> </ul> <p>\u5b8f\u5185\u6838\u7684\u91cd\u8981\u7ec4\u4ef6\u3002\u800c\u5bf9\u4e8e\u5fae\u5185\u6838\uff0c\u5f80\u5f80\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u653e\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u8303\u56f4\u5916\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u5e38\u5c06\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u7684\u5927\u90e8\u5206\u4ee3\u7801\u79fb\u5230\u7528\u6237\u6001\u3002</p> <ul> <li>OS restores the CPU execution to the saved state</li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#interrupt-drive-io-cycle","title":"Interrupt-drive I/O Cycle","text":"<p>to be continued</p> <p></p> <ul> <li><code>device driver initiates I/O</code>\u662f\u901a\u8fc7<code>MMIO</code>|<code>Memory Map I/O</code>\u7684\u65b9\u5f0f\uff0c\u5b9e\u9645\u662f\u901a\u8fc7<code>STORE</code>\u6307\u4ee4\u53bb\u64cd\u4f5c\u5916\u8bbe\u7684\u4e2d\u65ad\u63a7\u5236\u5668\u7684\u5730\u5740\uff1b</li> <li>\u56e0\u4e3ainitiates I/O\uff0c\u5199\u78c1\u76d8\u662f\u5f88\u6162\u7684\u8fc7\u7a0b\uff0cCPU\u4e0d\u4f1a\u4e00\u76f4\u7b49\u5230I/O\u8bf7\u6c42\u5b8c\u6210\uff0c\u5f53\u78c1\u76d8\u5199\u5b8c\u540e\u4f1a\u6709\u56fe\u4e2d<code>4</code>\u4ee5Interrupt\u7684\u5f62\u5f0f\u544a\u8bc9CPU\uff08\u4e2d\u65ad\u63a7\u5236\u5668\u786c\u8fde\u7ebf\u7684\u65b9\u5f0f\uff09</li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#io-from-system-call-to-devices-and-back","title":"I/O: from System Call to Devices, and Back","text":"<ul> <li>A program uses a system call to access system resources</li> <li>e.g., files, network</li> <li> <p>Operating system converts it to device access and issues I/O requests</p> </li> <li> <p>I/O requests are sent to the device driver, then to the controller</p> </li> <li> <p>e.g., read disk blocks, send/receive packets\u2026</p> </li> <li> <p>OS puts the program to wait (synchronous I/O) or returns to it without waiting (asynchronous I/O)</p> </li> <li> <p>OS may switches to another program when the requester is waiting</p> <p>\u5373\u4f7f\u662f\u540c\u6b65I/O, CPU\u4e5f\u4e0d\u662f\u76f2\u76ee\u7b49\u5f85\u72b6\u6001\u3002\u67d0\u4e00\u8fdb\u7a0b\u963b\u585e\u65f6\uff0cCPU\u53ef\u4ee5\u8c03\u5ea6\u53e6\u4e00\u8fdb\u7a0b</p> </li> <li> <p>I/O completes and the controller interrupts the OS</p> </li> <li> <p>OS processes the I/O, and then wakes up the program (synchronous I/O) or send its a signal (asynchronous I/O)</p> </li> </ul> <p>\u4e00\u79cd\u81ea\u4e0a\u800c\u4e0b\uff0c\u4e00\u79cd\u81ea\u4e0b\u800c\u4e0a</p>"},{"location":"Course/System2/Lec01_Introduction/#direct-memory-access-dma","title":"Direct Memory Access | DMA","text":"<ul> <li>DMA is used for high-speed I/O devices able to transmit information at close to memory speeds </li> <li> <p>e.g., Ethernet, hard disk, cd rom\u2026</p> </li> <li> <p>Device driver sends an I/O descriptor the controller</p> </li> <li> <p>I/O descriptor: operation type (e.g., send/receive), memory address\u2026</p> </li> <li> <p>The controller transfers blocks of data between its local buffer and main memory without CPU intervention(\u63d0\u9ad8\u6548\u7387)</p> </li> </ul> <p>CPU\u4f1a\u544a\u8bc9\u663e\u5361\u9700\u8981\u7684\u6570\u636e\u8d77\u59cb\u5730\u5740\u5728\u54ea\uff0c\u6709\u591a\u957f\uff0c\u968f\u540e\u7531DMA\u642c\u8fd0\u6570\u636e\u3002\u642c\u8fd0\u7ed3\u675f\u4f1a\u901a\u8fc7\u786c\u4e2d\u65ad\u7684\u65b9\u5f0f\u544a\u8bc9CPU</p> <ul> <li>only one interrupt is generated when whole I/O request completes</li> </ul> <p>\u78c1\u76d8\u63a7\u5236\u5668\u5206\u4e3a\u5e38\u89c1\u7684HDD\u548cSSD</p>"},{"location":"Course/System2/Lec01_Introduction/#storage-structure","title":"Storage Structure","text":"<ul> <li>Main memory: the only large storage that CPU can directly access</li> <li> <p>random access, and typically volatile</p> </li> <li> <p>Secondary storage: large nonvolatile storage capacity</p> </li> <li> <p>Magnetic disks are most common second-storage devices (HDD)\uff08\u7cfb\u7edf\u2162\uff09</p> <ul> <li>rigid metal or glass platters covered with magnetic recording material </li> </ul> </li> <li> <p>disk surface is logically divided into tracks and sectors</p> </li> <li> <p>disk controller determines the interaction between OS and the device</p> </li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#storage-hierarchy","title":"Storage Hierarchy","text":"<ul> <li>Storage systems can be organized in hierarchy</li> <li>speed</li> <li>cost</li> <li>volatility</li> </ul> <ul> <li>Caching: copying information into faster storage system</li> <li>main memory can be viewed as a cache for secondary storage</li> <li>CPU has a cache for main memory</li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#performance-of-storages","title":"Performance of Storages","text":"Level 1 2 3 4 Name register cache main memory disk storage Typical size &lt; 1 KB &gt; 16 MB &gt; 16 GB &gt; 100 GB Implementation technology custom memory with multiple ports, CMOS on-chip or off-chip CMOS SRAM CMOS DRAM magnetic disk Access time(ns) 0.25-0.5 0.5-25 80-250 5,000.000 Bandwidth(MB/sec) 20,000-100,000 5000-10,000 1000-5000 20-150 Managed by compiler hardware operating system operating system Backed by cache main memory disk CD or tape"},{"location":"Course/System2/Lec01_Introduction/#caching","title":"Caching","text":"<ul> <li>Caching is an important principle, performed at many levels</li> <li>e.g., in hardware, operating system, user program\u2026</li> <li>Caching: data in use copied from slower to faster storage temporarily</li> <li> <p>faster storage (cache) is checked first to determine if data is there</p> </li> <li> <p>if it is, data is used directly from the cache (fast)</p> </li> <li> <p>if not, data is first copied to cache and used there</p> </li> <li>Cache is usually smaller than storage being cached</li> <li>Cache management is an important design problem</li> <li>e.g., cache size and replacement policy</li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#multiprocessor-systems","title":"MUltiprocessor Systems","text":"<ul> <li> <p>Most old systems have one single general-purpose processor</p> </li> <li> <p>e.g., smartphone, PC, server, mainframe</p> </li> <li> <p>most systems also have special-purpose processors as well</p> </li> <li> <p>Multiprocessor systems have grown in use and importance</p> </li> <li> <p>also known as parallel systems, tightly-coupled systems</p> </li> <li> <p>advantages: increased throughput, economy of scale, increased reliability \u2013 graceful degradation or fault tolerance</p> </li> <li> <p>two types: asymmetric multiprocessing and symmetric multiprocessing (SMP)</p> </li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#symmetric-multiprocessing-architecture","title":"Symmetric Multiprocessing Architecture","text":"<p>\u5404CPU\u6709\u540c\u7b49\u5730\u4f4d</p> <p></p>"},{"location":"Course/System2/Lec01_Introduction/#numa","title":"NUMA","text":"<ul> <li>Non-Uniform Memory Access System</li> <li>Access local memory is fast, scale well</li> </ul> <p>\u6bcf\u4e2aCPU\u6709\u81ea\u5df1\u7684memory\uff0c\u4f46\u6240\u6709\u7684memory\u662f\u7edf\u4e00\u7f16\u5236\u7684\uff0c\u5373CPU\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709memory</p> <p></p>"},{"location":"Course/System2/Lec01_Introduction/#clustered-systems","title":"Clustered Systems","text":"<ul> <li>Multiple systems work together through high-speed network</li> <li> <p>usually sharing storage via a storage-area network (SAN)</p> </li> <li> <p>Clusters provide a high-availability service that can survive failures</p> </li> <li>asymmetric clustering has one machine in hot-standby mode</li> <li> <p>symmetric clustering has multiple nodes running applications, monitoring each other</p> </li> <li> <p>Some clusters are designed for high-performance computing (HPC)</p> </li> <li>applications must be written to use parallelization</li> </ul> <p></p>"},{"location":"Course/System2/Lec01_Introduction/#distributed-systems","title":"Distributed Systems","text":"<ul> <li> <p>A collection of separate, possibly heterogeneous, systems inter-connected through networks</p> </li> <li> <p>Network OS allows systems to exchange messages</p> </li> <li> <p>A distributed system creates the illusion of a single system</p> </li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#special-purpose-systems","title":"Special-Purpose Systems","text":"<ul> <li>Real-time embedded systems most prevalent form of computers</li> <li>vary considerably</li> <li>use special purpose (limited purpose) real-time OS</li> </ul> <p>\u8f6f\u5b9e\u65f6\uff1a\u4e0d\u4e25\u683c\u5728\u56fa\u5b9a\u65f6\u95f4\u5b8c\u6210\uff0c\u786c\u5b9e\u65f6\uff08\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u65e0\u5d4c\u5957\uff09\uff1a\u4e25\u683c\u6309\u7167\u8981\u6c42\u5728\u56fa\u5b9a\u65f6\u95f4\u5b8c\u6210\uff08\u4e0d\u591a\u4e0d\u5c11\uff09</p> <ul> <li>Multimedia systems</li> <li> <p>streams of data must be delivered according to time restrictions</p> </li> <li> <p>Handheld systems</p> </li> <li> <p>e.g., PDAs, smart phones</p> </li> <li> <p>limited CPU (?), memory(?), and power</p> </li> <li> <p>used to use reduced feature OS (?)</p> </li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#dual-mode-operation","title":"Dual-mode operation**","text":"<ul> <li>Operating system is usually interrupt-driven </li> <li> <p>Efficiency, regain control (timer interrupt)</p> </li> <li> <p>Dual-mode operation allows OS to protect itself and other system components</p> </li> <li> <p>user mode and kernel mode (or other names)</p> </li> <li> <p>a mode bit distinguishes when CPU is running user code or kernel code</p> </li> <li> <p>some instructions designated as privileged, only executable in kernel</p> </li> <li> <p>system call changes mode to kernel, return from call resets it to user</p> </li> </ul> <ol> <li> <p>\u5206\u4e3a\u4e24\u4e2a\u6a21\u5f0f\u662f\u4e3a\u4e86\u9694\u79bb\uff0c\u9632\u6b62\u7528\u6237\u6001\u7a0b\u5e8f\u53bb\u5e72\u6270\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u6570\u636e\u6216\u6570\u636e\u7ed3\u6784\u3002</p> </li> <li> <p>\u5e38\u7528MMU\u90e8\u4ef6\uff08Memory Management Unit | \u5185\u5b58\u7ba1\u7406\u5355\u5143\uff09\u6765\u6307\u5b9a\u5f53CPU\u8fd0\u884c\u5728\u7279\u6743\u6001\u65f6\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u5728\u7528\u6237\u6001\u4e0b\u53ea\u80fd\u8bbf\u95ee\u6709\u9650\u7a7a\u95f4\u8fbe\u5230\u4e8c\u8005\u7684\u9694\u79bb</p> </li> <li>\u90e8\u5206\u6307\u4ee4\u5fc5\u987b\u5728\u7279\u6743\u6001\u4e0b\u8fd0\u884c\uff0c\u6bd4\u5982\u5173\u95ed\u4e2d\u65ad\uff0c\u6253\u5f00\u4e2d\u65ad\u3001\u914d\u7f6eMMU\u7684\u6307\u4ee4</li> </ol>"},{"location":"Course/System2/Lec01_Introduction/#transition-between-modes","title":"Transition between Modes","text":"<ul> <li>System calls, exception, interrupts cause transitions between kernel/user modes</li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#timer","title":"Timer","text":"<ul> <li> <p>Timer used to prevent infinite loop or process hogging resources</p> </li> <li> <p>to enable a timer, set the hardware to interrupt after some period </p> </li> <li> <p>OS sets up a timer before scheduling process to regain control</p> <ul> <li> <p>the timer for scheduling is usually periodical(e.g., 250HZ)</p> </li> <li> <p>tickless kernel: on-demand timer interrupts(Linux)</p> </li> </ul> </li> </ul> <p>\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u6700\u5c0f\u5355\u5143\uff0c\u7ebf\u7a0b\u662f\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u5143</p>"},{"location":"Course/System2/Lec01_Introduction/#process","title":"Process | \u8fdb\u7a0b","text":"<p>Process is the unit of resource allocation</p>"},{"location":"Course/System2/Lec01_Introduction/#resource-management-process-management","title":"Resource Management: Process Management","text":"<ul> <li> <p>A process is a program in execution</p> </li> <li> <p>program is a passive entity, process is an active entity</p> </li> <li> <p>a system has many processes running concurrently</p> </li> </ul> <p>\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u662f\u9694\u79bb\u7684\uff0c\u5373\u4f7f\u662f\u540c\u4e00\u4e2aprogram\u52a0\u8f7d\u7684\u8fdb\u7a0b</p> <ul> <li> <p>Process needs resources to accomplish its task</p> </li> <li> <p>OS reclaims all reusable resources upon process termination</p> </li> <li> <p>e.g., CPU, memory, I/O, files, initialization data</p> </li> <li> <p>\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u6700\u5c0f\u5355\u5143\uff0c\u7ebf\u7a0b\u662f\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u5143</p> </li> </ul> <p>\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4f1a\u7ba1\u7406\u5206\u914d\u7ed9\u6bcf\u4e00\u4e2a\u5185\u6838\u7684CPU\u8d44\u6e90\u3001memory\u8d44\u6e90\u3001I/O\u8d44\u6e90\u2026\u2026\u662f\u901a\u8fc7\u5206\u65f6\u590d\u7528\u7684\u65b9\u5f0f\uff0c\u65f6\u95f4\u7247\u8f6e\u8f6c\uff0c\u6bcf\u4e00\u4e2aprocess\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u5c31\u5f00\u59cb\u6839\u636e\u4f18\u5148\u7ea7\u8c03\u5ea6</p>"},{"location":"Course/System2/Lec01_Introduction/#process-management-activities","title":"Process Management Activities","text":"<ul> <li> <p>Process creation and termination | \u521b\u5efa\u548c\u4e2d\u6b62</p> </li> <li> <p>Processes suspension and resumption | \u6682\u505c\u548c\u6062\u590d</p> </li> <li> <p>Process synchronization primitives | \u540c\u6b65</p> </li> <li> <p>Process communication primitives | \u901a\u4fe1</p> </li> <li> <p>Deadlock handling | \u6b7b\u9501</p> </li> </ul> <p>\u5728\u786c\u4ef6\u5c42\u9762\uff0c\u4e0d\u540c\u7684<code>cpu core</code>\u4e0a\u6709\u4e0d\u540c\u7684<code>register set | \u5bc4\u5b58\u5668\u96c6\u5408</code>\uff1b</p> <p>\u540c\u65f6\uff0c\u4e0d\u540c<code>cpu core</code>\u4e0a\u4e2d\u65ad\u4e5f\u662f\u5355\u72ec\u7684\uff0c\u5373\u6bcf\u4e2acore\u90fd\u53ef\u4ee5\u54cd\u5e94\u4efb\u4f55\u6743\u9650\u5185\u7684\u4e2d\u65ad\u3002</p>          \u8003 \u8bd5 &amp; \u8003 \u7814 \u91cd \u70b9\uff1a\u8fdb \u7a0b \u72b6 \u6001 \u7684 \u5207 \u6362               \u8be6\u7ec6\u72b6\u6001\u5207\u6362\u540e\u8bae      <p></p>"},{"location":"Course/System2/Lec01_Introduction/#thread","title":"Thread | \u7ebf\u7a0b","text":""},{"location":"Course/System2/Lec01_Introduction/#from-process-to-thread","title":"From Process to Thread","text":"<ul> <li> <p>Single-threaded process has one program counter </p> </li> <li> <p>program counter specifies location of next instruction to execute</p> </li> <li> <p>processor executes instructions sequentially, one at a time, until completion</p> </li> </ul> <p>\u7ebf\u7a0b\u4e4b\u95f4\u662f\u4e0d\u9694\u79bb\u7684</p> <ul> <li> <p>Multi-threaded process has one program counter per thread</p> </li> <li> <p>Quiz: What are the benefits of using thread instead of process?</p> </li> </ul> <p>\u4e0d\u540c\u7684\u8fdb\u7a0b\u95f4\u8981\u5171\u4eab\u6570\u636e\uff0c\u5982\u679c\u662f\u7ebf\u7a0b\u95f4\u5171\u4eab\uff0c\u90a3\u6570\u636e\u4f1a\u5f88\u5e9e\u5927\uff1b</p> <p>\u5f15\u5165\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u53ef\u4ee5\u88ab\u8c03\u5ea6\uff0c\u53ea\u9700\u8981load/store\u518d\u5b9e\u73b0\u540c\u6b65\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5171\u4eab\u3002</p> <ul> <li>\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u4e86memory\u3001global data\u3001heap\uff1b\u4e0d\u5171\u4eabstack</li> <li>\u6bcf\u4e2a\u7ebf\u7a0b\u6709\u81ea\u5df1\u7684\u6808\u548cPC</li> <li>\u7ebf\u7a0b\u548c\u7ebf\u7a0b\u7684\u6808\u4e0d\u662f\u9694\u79bb\u7684\uff0c\u662f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230</li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#resource-management-memory-management","title":"Resource Management: Memory Management | \u5185\u5b58\u7ba1\u7406","text":"<ul> <li> <p>Memory is the main storage directly accessible to CPU </p> </li> <li> <p>data needs to be kept in memory before and after processing</p> </li> <li> <p>all instructions should be in memory in order to execute</p> </li> <li> <p>Memory management determines what is in memory to optimize CPU utilization and response time, provides a virtual view of memory for programmer</p> </li> <li> <p>Memory management activities:</p> </li> <li> <p>keeping track of which parts of memory are being used and by whom</p> </li> <li> <p>deciding which processes and data to move into and out of memory</p> </li> <li> <p>allocating and deallocating memory space as needed</p> </li> </ul> <p>\u7ba1\u7406CPU\uff0c\u7ba1\u7406Memory\uff0c\u505a\u597d\u540c\u6b65\u5360\u53bb\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u5927\u90e8\u5206\u5de5\u4f5c</p>"},{"location":"Course/System2/Lec01_Introduction/#resource-management-file-systems","title":"Resource Management: File Systems | \u6587\u4ef6\u7cfb\u7edf","text":"<ul> <li> <p>\u4ecb\u7ecd\u8f83\u5c11,\u7cfb\u7edf\u2162</p> </li> <li> <p>\u5c06\u5e73\u65f6\u6240\u4f7f\u7528\u7684\u53ef\u89c6\u5316\u7684\u6587\u4ef6\u8def\u5f84\u6620\u5c04\u5230\u7269\u7406\u5b58\u50a8\u4ecb\u8d28\u4e0a</p> </li> </ul> <ul> <li> <p>OS provides a uniform, logical view of data storage</p> </li> <li> <p>file is a logical storage unit that abstracts physical properties</p> <ul> <li> <p>files are usually organized into directories(\u76ee\u5f55)</p> </li> <li> <p>access control determines who can access the file</p> </li> </ul> </li> <li> <p>File system management activities:</p> </li> <li> <p>creating and deleting files and directories</p> </li> <li> <p>primitives to manipulate files and directories</p> </li> <li> <p>mapping files onto secondary storage</p> </li> <li> <p>backup files onto stable (non-volatile) storage media</p> </li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#resource-management-io-system-management","title":"Resource Management: I/O System Management","text":"<p>\u5e2e\u52a9\u7528\u6237\u6001\u7a0b\u5e8f\u548c\u5916\u8bbe\u6253\u4ea4\u9053</p> <ul> <li> <p>I/O subsystem hides peculiarities of hardware devices from the user</p> </li> <li> <p>I/O subsystem is responsible for:</p> </li> <li> <p>manage I/O memory</p> <ul> <li> <p>buffering: to store data temporarily while it is being transferred</p> </li> <li> <p>caching: to store parts of data in faster storage for performance</p> </li> <li> <p>spooling: the overlapping of output of one job with input of other jobs</p> </li> </ul> </li> <li> <p>OS May provide general device-driver interfaces(\u6bcf\u4e00\u7c7b\u8bbe\u5907\u90fd\u6709\u5bf9\u5e94\u7684\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f)</p> </li> <li> <p>good for programmers: object-oriented design pattern</p> </li> <li> <p>bad from the security perspective: function pointers are heavily used</p> </li> </ul> <p></p>"},{"location":"Course/System2/Lec01_Introduction/#separate-policy-and-mechanism","title":"Separate Policy and Mechanism","text":"<ul> <li>Mechanism(\u673a\u5236): how question about a system | \u600e\u4e48\u5b9e\u73b0</li> <li>How does an operating system performs a context switch</li> </ul> <p>\u4e0d\u540c\u7684\u8c03\u5ea6\u5668\u5b9e\u73b0\u4e0d\u540c\u7684Policy</p> <ul> <li>Policy(\u7b56\u7565): which question </li> <li> <p>Which process should the process to be switched</p> </li> <li> <p>Any other examples about mechanism &amp; policy?</p> </li> <li> <p>Advantages &amp; Disadvantages</p> </li> <li>Advantages of separation:<ul> <li>\u589e\u52a0\u6574\u4e2a\u7684\u7075\u6d3b\u6027.</li> </ul> </li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#virtualization","title":"Virtualization","text":"<ul> <li>Abstract the hardware of a single computer (CPU/Memory/IO \u2026) into different environments</li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#three-piecesintroduction","title":"Three pieces\u4e2d\u7684Introduction","text":""},{"location":"Course/System2/Lec01_Introduction/#what-happens-when-a-program-runs","title":"What happens when a program runs?","text":"<ul> <li>Execute instructions (obviously)</li> <li> <p>fetch, decode, and execute</p> </li> <li> <p>Others things are happening in the backend</p> </li> <li> <p>make the program to run</p> </li> <li> <p>allow many programs to use/share memory</p> </li> <li> <p>allow may programs to interact with devices</p> </li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#all-about-virtualization","title":"All about Virtualization","text":"<ul> <li> <p>Virtualization</p> </li> <li> <p>OS transforms the physical resources into easy-to-use virtual form</p> </li> <li> <p>Interaction: system calls - interfaces between program and OS</p> </li> <li> <p>Managing: resources manager</p> </li> </ul>"},{"location":"Course/System2/Lec01_Introduction/#virtualizing-the-cpu","title":"Virtualizing The CPU","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/time.h&gt;\n#include &lt;assert.h&gt;\n#include \"common.h\"\nint main(int argc, char *argv[])\n{\nif(argc != 2)\n{\nfprintf(stderr, \"usage: cpu &lt;string&gt;\\n\");\nexit(1);\n}\nchar *str = argv[1];\nwhile(1)\n{\nSpin(1);\nprintf(\"%s\\n\", str);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System2/Lec01_Introduction/#virtualizing-memory","title":"Virtualizing Memory","text":"<pre><code>#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include \"common.h\"\nint main(int argc, char *argv[])\n{\nint *p = malloc(sizeof(int));\nassert(p != NULL);\nprintf(\"(%d) memory address of p: %08x\\n\", getpid(), (unsigned) p);\n/* getpid\u7cfb\u7edf\u8c03\u7528,\u6253\u5370\u5f53\u524d\u8fd0\u884c\u7a0b\u5e8f\u5bf9\u5e94\u7684\u8fdb\u7a0b\u53f7 */\n*p = 0;\nwhile(1)\n{\nSpin(1);\n*p = *p + 1;\nprintf(\"(%d) p: %d\\n\", getpid(), *p);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System2/Lec01_Introduction/#concurrency","title":"Concurrency | \u5e76\u53d1","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include\"common.h\"\nvolatile int counter = 0;\nint loops;\nvoid *worker(void *arg) {\nint i;\nfor(i = 0; i &lt; loops; i++) {\ncounter++;\n}\nreturn NULL;\n}\nint main(int argc, char *argv[])\n{\nif(argc != 2)\n{\nfprintf(stderr, \"usage: threads &lt;value&gt;\\n\");\nexit(1);\n}\nloops = atoi(argv[1]);\npthread_t p1, p2;\nprintf(\"Initial value : %d\\n\", counter);\nPthread_create(&amp;p1, NULL, worker, NULL);\nPthread_create(&amp;p2, NULL, worker, NULL);\nPthread_join(p1, NULL);\nPthread_join(p2, NULL);\nprintf(\"Final value : %d\\n\", counter);\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System2/Lec01_Introduction/#io","title":"I/O","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/types.h&gt;\nint main(int argc, char *argv[])\n{\nint fd = open(\"/tmp/file\", O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU);\nassert(fd &gt; -1);\nintrc = write(fd, \"hello world\\n\", 13);\nassert(rc == 13);\nclose(fd);\nreturn 0;\n}\n</code></pre>"},{"location":"Course/System3/","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u2162","text":"<p>Abstract</p> <p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u2161 \u662f ZJU \u8ba1\u7b97\u673a\u7cfb\u7edf\u7cfb\u5217\u8bfe\u7a0b\u4e4b\u4e00\uff0c\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf\u540e\u534a\u90e8\u5206\u548c\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u5185\u5bb9</p> <p>To Be Continued</p>"},{"location":"Course/System3/Lec04/","title":"Lec04","text":""},{"location":"Course/System3/Lec04/#three-classes-of-computers-with-different-concerns-in-memory-hierarchy","title":"Three classes of computers with different concerns in memory hierarchy","text":"<ul> <li>Desktop computers:<ul> <li>Are primarily running one application for single user</li> <li>Are concerned more with average latency from the memory hierarchy</li> </ul> </li> <li>Server computers<ul> <li>May typically have hundreds of users running potentially dozens of applications simultaneously</li> <li>Are concerned about memory bandwith</li> </ul> </li> <li>Embedded computers<ul> <li>Real-time applications<ul> <li>worst-case performance vs Best case performance</li> </ul> </li> <li>Are concerned more about power and battery life<ul> <li>Hardware vs Software</li> </ul> </li> <li>Running single app &amp; use simple OS<ul> <li>The protection role of the memory hierarchy is often diminished</li> </ul> </li> <li>Main memory is very small<ul> <li>often no disk storage</li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/System3/Lec04/#enhance-speed-of-memory","title":"Enhance speed of memory","text":"<ul> <li>Component character of hardware:<ul> <li>Smaller hardware is faster and more expensive</li> <li>Bigger memories are lower and cheaper</li> </ul> </li> </ul> <p>The goal: * There are speed of smallest memory and capacity of biggest memory * To provide cost almost as low as the cheapest level of memory and speed almost as fast as the fastest level</p>"},{"location":"Course/System3/Lec04/#the-method-enhance-speed-of-memory","title":"The method enhance speed of memory","text":"<ul> <li>By taking advantage of the principle of locality:<ul> <li>most programs do not access all code or data uniformly</li> <li>Temporal locality(Locality in Time):<ul> <li>If an item is referenced, the same item will tend to be referenced again soon</li> <li>Keep most recently accessed data items closer to the processor</li> </ul> </li> <li>Spatial locality(Locality in Space):<ul> <li>If an item is referenced, items nearby will tend to be referenced soon</li> <li>Move recently accessed groups of contiguous words(block) closer to the processor</li> </ul> </li> </ul> </li> </ul> <p>\u540e\u7eed\u7684\u6240\u6709\u4f18\u5316\u90fd\u57fa\u4e8e Locality in Time &amp; Locality in Space</p> <ul> <li>The method<ul> <li>Hierarchies bases on memories of different speeds and size</li> <li>The more closely CPU the level is, the faster the one is</li> <li>The more closely CPU the level is, the smaller the one is</li> <li>The more closely CPU the level is, the more expensive one is</li> </ul> </li> </ul>"},{"location":"Course/System3/Lec04/#memory-hierarchy-of-a-modern-computer-system","title":"Memory Hierarchy of a Modern Computer System","text":"<p>By taking advantage of the principle of locality: * Present the user with as much memory as is available in the cheapest technology * Provide access at the speed offered by the fastest technology  </p>"},{"location":"Course/System3/Lec04/#36-terms-of-cache","title":"36 terms of Cache","text":"36 terms of Cache Cache full associative write allocate Virtual memory dirty bit unified cache Memory stall cycles block block offset misses per instruction direct mapped write back Valid bit data cache locality Block address hit time address trace Write through cache miss set Instruction cache page fault miss rate random replacement index field cache hit Average memory access time page tag field n-way set associative no-write allocate miss penalty Least-recently used write buffer write stall"},{"location":"Course/System3/Lec04/#what-is-cache","title":"What is Cache","text":"<ul> <li>Small, fast storage used to improve average access time to slow memory</li> <li>In computer architecture, almost everything is a cache<ul> <li>Registers \u201ca cache\u201d on variables \u2013software managed</li> <li>First-level cache a cache on second-level cache</li> <li>Second-level cache a cache on memory</li> <li>Memory a cache on disk (virtual memory)</li> <li>TLB a cache on page table</li> <li>Branch-prediction a cache on prediction information ?</li> </ul> </li> </ul> Question <p>How do know if a data is in cache? Moreover, if it is, how do we find it?</p>"},{"location":"Course/System3/Lec04/#four-questions-for-cache-designers","title":"Four Questions for Cache Designers","text":"<ul> <li>Caching is a general concept used in processors, operating systems, file systems, and applications. There are Four Questions for Cache/Memory Hierarchy Designers<ul> <li>Q1 (Block placement):  Where can a block be placed in the upper level/mainmemory ? <ul> <li>Fully Associative, Set Associative, Direct Mapped</li> </ul> </li> <li>Q2 (Block identification): How is a block found if it is in the upper level/main memory ?<ul> <li>Tag/Block</li> </ul> </li> <li>Q3 (Block replacement): Which block should be replaced on a Cache/main memory miss?<ul> <li>Random, LRU, FIFO</li> </ul> </li> <li>Q4 (Write strategy): What happens on a write?<ul> <li>Write Back or Write Through (with Write Buffer)</li> </ul> </li> </ul> </li> </ul>"},{"location":"Course/System3/Lec04/#q1-block-placement","title":"Q1: Block placement","text":"<ul> <li>Direct Mapped<ul> <li>Block can only go in one place in the cache (Usually address MOD Number of blocks in chche)</li> </ul> </li> <li>Fully Associative<ul> <li>Block can go anywhere in the cache</li> </ul> </li> <li>Set Associative<ul> <li>Block can go in one of a set of places in the cache</li> <li>A set is a group of blocks in the cache (Block address MOD Number of sets in the cache)</li> <li>If sets have n blocks, then the cache is n-way set associative</li> </ul> </li> </ul>"},{"location":"Crash%20Computer%20Science/Lec01/","title":"Bollean Logic &amp; Logic Gates","text":""},{"location":"Triviality/CMake/","title":"CMake","text":"<p>Abstract</p> <ul> <li>\u4e4b\u524d\u53ea\u4e86\u89e3\u8fc7\u4e00\u70b9\u70b9 Makefile\u3002 \u7531\u4e8e\u8981\u7528\u5b83\u6765\u90e8\u7f72\u81ea\u5df1 VSCode \u7684\u9879\u76ee\u7b49\uff0c\u4e8e\u662f\u6d45\u6d45\u8bb0\u5f55\u4e00\u4e0b\u5b66 CMake \u7684\u8fc7\u7a0b</li> <li>\u7531\u4e8e\u5b66\u4e60\u65f6\u95f4\u6bb5\uff0c\u7b14\u8bb0\u4e0d\u4f1a\u5f88\u7cfb\u7edf\uff0c\u4e3b\u8981\u9488\u5bf9\u53ef\u4ee5\u6210\u529f\u94fe\u63a5\u81ea\u5df1\u7684\u9879\u76ee</li> </ul> <p>To Be Continued</p>"},{"location":"Triviality/CMake/Lec01/","title":"\u5b89\u88c5 &amp; \u914d\u7f6e &amp; \u6700\u7b80\u5355\u7684\u8bd5\u7f16\u8bd1","text":"<p>Abstract</p> <p>\u82ef\u4eba\u4f7f\u7528\u7684\u662f Windows + bash + VSCode</p>"},{"location":"Triviality/CMake/Lec01/#_2","title":"\u5b89\u88c5","text":"<ul> <li>\u9700\u8981\u5b89\u88c5 CMake\u3001MinGW <p>\u5177\u4f53\u5b89\u88c5\u6559\u7a0b\u4e0d\u518d\u8d58\u8ff0</p> </li> </ul>"},{"location":"Triviality/CMake/Lec01/#_3","title":"\u914d\u7f6e","text":"<ul> <li>\u5c06 CMake \u548c MinGW \u914d\u7f6e\u5230\u7cfb\u7edf\u8def\u5f84</li> <li>\u5728 <code>bash</code> \u4e2d\u4f7f\u7528 <code>gcc --version</code> \u548c <code>cmake --version</code> \u68c0\u9a8c\u662f\u5426\u914d\u7f6e\u5230\u7cfb\u7edf\u8def\u5f84<ul> <li>\u5f53\u51fa\u73b0\u7248\u672c\u4fe1\u606f\u7684\u65f6\u5019\u5373\u914d\u7f6e\u6210\u529f</li> </ul> </li> <li>VSCode \u914d\u7f6e<ul> <li>\u5b89\u88c5\u4e00\u4e9b\u63d2\u4ef6 \u2014\u2014 <code>CMake</code> &amp; <code>CMake Tools</code></li> <li>\u5728 VSCode \u4e2d <code>ctrl+shift+p</code> \u8f93\u5165 <code>&gt; CMake: \u914d\u7f6e</code>\uff0c \u4f1a\u51fa\u73b0\u4e0b\u5217\u7f16\u8bd1\u5de5\u5177\u94fe\u9009\u62e9\u6846 (\u82e5\u672a\u51fa\u73b0\u53ef\u80fd\u662f\u672a\u914d\u7f6e\u7cfb\u7edf\u8def\u5f84 or VSCode \u91cd\u542f\u8bd5\u8bd5) </li> </ul> </li> </ul>"},{"location":"Triviality/CMake/Lec01/#_4","title":"\u8bd5\u7f16\u8bd1","text":"<ul> <li> <p>\u5728\u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a <code>main.cpp</code> \u548c <code>CMakeLists.txt</code></p> <ol> <li>Internet \u91cc\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u548c\u4e4b\u524d\u4e00\u6837 <code>&gt; CMake: \u914d\u7f6e</code> \u9009\u62e9\u7f16\u8bd1\u5de5\u5177\u94fe\uff0c\u968f\u540e\u4f1a\u81ea\u52a8\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2a <code>build</code> \u6587\u4ef6\u5939\uff0c\u8f93\u5165 <code>cmake ..</code> (\u82e5\u7535\u8111\u5b89\u88c5\u4e86 VS)</li> </ol> <p>\u8e29\u5751</p> <ul> <li>\u53ef\u80fd\u662f\u6211\u7684\u6709\u5f88\u591a\u5de5\u4f5c\u533a\u7684\u539f\u56e0\uff0c\u5728\u6211\u7684\u7535\u8111\u4e2d\u8fd9\u79cd\u65b9\u6cd5\u6709\u65f6\u4e0d\u6210\u529f\u3002\u6211\u4fbf\u91c7\u7528\u4e0b\u4e00\u79cd\u65b9\u6cd5\u3002</li> <li>\u6ce8\u610f: \u56e0\u4e3a windows \u4e2d cmake \u9ed8\u8ba4\u4f7f\u7528 nmake \u7a0b\u5e8f (\u6240\u4ee5\u8f93\u5165 <code>cmake ..</code> \u65f6\u4f1a\u63d0\u793a\u627e\u4e0d\u5230 nmake), \u56e0\u6b64\u9700\u8981\u6307\u660e cmake \u8981\u751f\u6210 MinGW, make \u4f7f\u7528\u7684 makefile \u6587\u4ef6: <code>cmake -G \"MinGW Makefiles ..\"</code></li> <li>\u5982\u679c\u6b64\u65f6\u51fa\u73b0\u95ee\u9898 </li> </ul> <pre><code>CMake Error: Error: generator : MinGW Makefiles\nDoes not match the generator used **previously: NMake** Makefiles\nEither remove the CMakeCache.txt file and CMakeFiles directory or choose a different binary directory.\n</code></pre> <ul> <li>\u539f\u56e0: cmake \u4f1a\u5728\u4e0a\u4e00\u6b21\u6267\u884c\u6587\u4ef6\u7684\u57fa\u7840\u4e0a\u76f4\u63a5\u6267\u884c\uff0c\u4f46\u4e0a\u6b21\u4f7f\u7528\u7684\u662f nmake \u6240\u4ee5\u4f1a\u51fa\u9519\u3002\u5c06 build \u5168\u90e8\u5220\u9664\u518d\u6267\u884c\u5c31\u53ef\u4ee5\u4e86</li> </ul> <ol> <li> <p>\u7b2c\u4e8c\u79cd\u529e\u6cd5\uff0c\u53ef\u4ee5\u5728 <code>bash</code> \u4e2d </p> <pre><code>$ mkdir build\n$ cd build\n$ cmake -G\"MinGW Makefiles\" ..\n</code></pre> </li> </ol> </li> <li> <p>\u6267\u884c\u540e\uff0c\u9879\u76ee\u4f1a\u751f\u6210\u5728 build \u6587\u4ef6\u5939\u4e2d\uff0c\u4f7f\u7528 <code>make</code> \u5373\u53ef\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u968f\u540e\u6267\u884c\u5373\u53ef</p> \u8e29\u5751 again <ul> <li>\u4f7f\u7528 MinGW \u4e00\u822c\u4f1a\u663e\u793a\u6ca1\u6709 make, \u539f\u56e0\u662f <code>MinGW/bin</code> \u4e2d\u6267\u884c\u6587\u4ef6\u540d\u4e0d\u662f <code>make</code> \u800c\u662f <code>mingw32-make</code> (maybe)</li> <li>\u603b\u4e4b\u8981\u4e48\u7528 <code>mingw32-make</code> \u4ee3\u66ff <code>make</code> \u6307\u4ee4 or \u62f7\u8d1d\u4e00\u4e2a <code>mingw32-make</code> \u5e76\u91cd\u547d\u540d\u4e3a <code>make</code></li> </ul> </li> </ul> Tips <ul> <li>\u4e0a\u8ff0\u5efa build \u6587\u4ef6\u5939\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u4f7f\u7528 build \u4f1a\u4f7f\u9879\u76ee\u66f4\u6709\u5e8f\uff1b</li> <li>\u4e5f\u53ef\u4e5f\u76f4\u63a5\u4f7f\u7528 <code>cmake -G\"MinGW Makefiles\" .</code> \u4e4b\u524d\u7684 <code>..</code> \u610f\u601d\u662f\u4e0a\u4e00\u7ea7\u76ee\u5f55\u4e2d\u7684 <code>CMakeLists.txt</code></li> </ul>"},{"location":"Triviality/CMake/Lec02/","title":"CMake Note","text":"<p><code>CMakeLists.txt</code></p>"},{"location":"Triviality/CMake/Lec02/#_1","title":"\u5355\u4e2a\u6e90\u6587\u4ef6","text":"<p>\u53ea\u6709\u4e00\u4e2a\u6e90\u6587\u4ef6 <code>main.c</code></p> <pre><code># CMake \u6700\u4f4e\u7248\u672c\u53f7\u8981\u6c42\ncmake_minimum_required (VERSION 2.6)\n# \u9879\u76ee\u4fe1\u606f\nproject (Example1)\n# \u6307\u5b9a\u751f\u6210\u76ee\u6807\nadd_exectutable(Example main.c)\n</code></pre> <ul> <li>CMake \u4e2d\u7684\u547d\u4ee4\u662f\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\uff0c\u547d\u4ee4\u7531\u547d\u4ee4\u540d\u79f0\u3001\u5c0f\u62ec\u53f7\u548c\u53c2\u6570\u7ec4\u6210 (\u53c2\u6570\u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u8fdb\u884c\u95f4\u9694)</li> <li>\u5bf9\u4e8e\u4e0a\u8ff0 CMakeLists.txt<ul> <li><code>cmake_minimum_required</code> : \u662f\u6307\u5b9a\u8fd0\u884c\u6240\u9700\u7684 CMake \u7684\u6700\u4f4e\u7248\u672c</li> <li><code>project</code> : \u53c2\u6570\u503c <code>Example1</code> \uff0c\u8868\u793a\u9879\u76ee\u7684\u540d\u79f0\u662f <code>Example1</code></li> <li><code>add_executable</code> : \u8868\u793a\u5c06 main.c \u6e90\u6587\u4ef6\u7f16\u8bd1\u6210\u4e00\u4e2a\u540d\u4e3a <code>Example</code> \u7684\u53ef\u6267\u884c\u6587\u4ef6</li> </ul> </li> <li>\u7f16\u8bd1\u9879\u76ee<ul> <li>\u5728\u5f53\u524d\u76ee\u5f55\u6267\u884c <code>cmake .</code> \u5f97\u5230 <code>Makefile</code> \u540e\u4f7f\u7528 <code>make</code> \u547d\u4ee4\u5f97\u5230 <code>Example1</code> \u53ef\u6267\u884c\u6587\u4ef6</li> </ul> </li> </ul>"},{"location":"Triviality/CMake/Lec02/#_2","title":"\u591a\u4e2a\u6e90\u6587\u4ef6","text":"<ol> <li> <p>\u540c\u4e00\u76ee\u5f55\uff0c\u591a\u4e2a\u6e90\u6587\u4ef6 (Assume \u6b64\u65f6\u6e90\u4ee3\u7801\u6240\u5728\u76ee\u5f55\u4e3a <code>Example2</code>)</p> <ul> <li> <p>\u5047\u8bbe\u5de5\u7a0b\u76ee\u5f55\u4e3a\uff1a</p> <pre><code>Example2\n|\n+--- main.c\n|\n+--- Function.c\n|\n+--- Function.h\n</code></pre> </li> <li> <p>\u6b64\u65f6 <code>CMakeLists.txt</code> \u4fee\u6539\u4e3a</p> <pre><code># CMake \u6700\u4f4e\u7248\u672c\u53f7\u8981\u6c42\ncmake_minimum_required (VERSION 2.6)\n# \u9879\u76ee\u4fe1\u606f\nproject (Example2)\n# \u6307\u5b9a\u751f\u6210\u76ee\u6807\nadd_exectutable(Example main.c Function.c)\n</code></pre> </li> <li> <p>\u4f46\u82e5\u5c06\u6240\u6709\u7684\u6e90\u6587\u4ef6\u90fd\u6309\u7167\u4e0a\u8ff0\u5f62\u5f0f\u52a0\u5165\u4f1a\u5f88\u9ebb\u70e6 \u2014\u2014&gt; \u53ef\u4ee5\u4f7f\u7528 <code>aux_source_directory</code> \u547d\u4ee4\uff0c\u8be5\u547d\u4ee4\u4f1a\u67e5\u627e\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6e90\u6587\u4ef6\u7136\u540e\u5c06\u7ed3\u679c\u5b58\u8fdb\u6307\u5b9a\u53d8\u91cf\u540d (<code>aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</code>)</p> </li> <li> <p>\u6b64\u65f6 <code>CMakeLists.txt</code> \u4fee\u6539\u4e3a</p> <pre><code># CMake \u6700\u4f4e\u7248\u672c\u53f7\u8981\u6c42\ncmake_minimum_required (VERSION 2.6)\n# \u9879\u76ee\u4fe1\u606f\nproject (Example2)\n# \u67e5\u627e\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6e90\u6587\u4ef6\u5e76\u5c06\u540d\u79f0\u4fdd\u5b58\u5230 DIR_SRCS \u53d8\u91cf\naux_source_directory(. DIR_SRCS)\n# \u6307\u5b9a\u751f\u6210\u76ee\u6807\nadd_exectutable(Example $(DIR_SRCS))\n</code></pre> </li> </ul> Problem <ul> <li>\u5728\u5b9e\u64cd\u4e2d\u53d1\u73b0\u7684\u95ee\u9898 \u2014\u2014 \u53d8\u91cf\u65e0\u6cd5\u4f7f\u7528</li> <li>\u4f8b\u5982\u4e0a\u8ff0 <code>DIR_SRCS</code> \u53d8\u91cf\u65e0\u6cd5\u4f7f\u7528\u4ece\u800c\u62a5\u9519\uff0c\u76ee\u524d\u8fd8\u672a\u53bb\u89e3\u51b3 (\u91c7\u7528\u6587\u4ef6\u540d\u5c31\u80fd\u6210\u529f\u7f16\u8bd1)</li> </ul> </li> <li> <p>\u591a\u4e2a\u76ee\u5f55\uff0c\u591a\u4e2a\u6e90\u6587\u4ef6 (\u6b64\u65f6\u6e90\u4ee3\u7801\u6240\u5728\u76ee\u5f55\u662f <code>Example3</code>)</p> <ul> <li> <p>\u5de5\u7a0b\u76ee\u5f55\u5982\u4e0b\uff1a</p> <pre><code>Example3\n|\n+--- main.c\n|\n+--- math/\n    |\n+--- Function.c\n    |\n+--- FUnction.h\n</code></pre> <ul> <li>\u6b64\u65f6\u9700\u8981\u5206\u522b\u5728\u9879\u76ee\u6839\u76ee\u5f55 <code>Example3</code> \u548c <code>math</code> \u76ee\u5f55\u4e2d\u5404\u7f16\u5199\u4e00\u4e2a <code>CMakeLists.txt</code>\u3002 \u4e3a\u65b9\u4fbf\u53ef\u4ee5\u5148\u5c06 <code>math</code> \u4e2d\u7684\u6587\u4ef6\u7f16\u8bd1\u6210\u9759\u6001\u5e93\u518d\u7531 <code>main</code> \u51fd\u6570\u8c03\u7528</li> <li> <p>\u6839\u76ee\u5f55\u4e2d\u7684 <code>CMakeLists.txt</code></p> <pre><code>```makefile\n# CMake \u6700\u4f4e\u7248\u672c\u53f7\u8981\u6c42\ncmake_minimum_required (VERSION 2.6)\n# \u9879\u76ee\u4fe1\u606f\nproject (Example3)\n# \u67e5\u627e\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6e90\u6587\u4ef6\u5e76\u5c06\u540d\u79f0\u4fdd\u5b58\u5230 DIR_SRCS \u53d8\u91cf\naux_source_directory(. DIR_SRCS)\n# \u6dfb\u52a0 math \u5b50\u76ee\u5f55\nadd_subdirectory(math)\n# \u6307\u5b9a\u751f\u6210\u76ee\u6807\nadd_exectutable(Example $(DIR_SRCS))\n# \u6dfb\u52a0\u94fe\u63a5\u5e93\ntarget_link_libraries(Example Functions)\n```\n</code></pre> <ul> <li><code>add_subdirectory(math)</code> \u6307\u660e\u672c\u9879\u76ee\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55 <code>math</code> \uff0c\u6b64\u65f6 <code>math</code> \u4e2d\u7684 <code>CMakeLists.txt</code> \u548c\u6e90\u4ee3\u7801\u4e5f\u4f1a\u88ab\u5904\u7406</li> <li><code>target_link_libraries</code> \u6307\u660e\u53ef\u6267\u884c\u6587\u4ef6 <code>main</code> \u9700\u8981\u94fe\u63a5\u4e00\u4e2a\u540d\u4e3a <code>Functions</code> \u7684\u94fe\u63a5\u5e93</li> </ul> </li> <li> <p>\u5b50\u76ee\u5f55\u4e0b\u7684 <code>CMakeLists.txt</code></p> <pre><code>```makefile\n# \u67e5\u627e\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6e90\u6587\u4ef6\u5e76\u5c06\u540d\u79f0\u4fdd\u5b58\u5230 DIR_LIB_SRCS \u53d8\u91cf\naux_source_directory(. DIR_LIB_SRCS)\n# \u751f\u6210\u94fe\u63a5\u5e93\nadd_library (Functions $(DIR_LIB_SRCS))\n```\n</code></pre> <ul> <li><code>add_library</code> \u5c06 <code>math</code> \u76ee\u5f55\u4e2d\u7684\u6e90\u6587\u4ef6\u7f16\u8bd1\u6210\u9759\u6001\u94fe\u63a5\u5e93</li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"Triviality/CMake/Lec02/#_3","title":"\u81ea\u5b9a\u4e49\u7f16\u8bd1\u9009\u9879","text":"<p>\u6b64\u65f6\u6e90\u4ee3\u7801\u6240\u5728\u76ee\u5f55\u662f <code>Example4</code></p> <p>To Be Continued</p>"},{"location":"Triviality/GitHub/","title":"Perface","text":"<p>Abstract</p> <ul> <li>\u4e00\u4e2a\u9762\u5411\u5f00\u6e90\u53ca\u79c1\u6709\u8f6f\u4ef6\u9879\u76ee\u7684\u6258\u7ba1\u5e73\u53f0(\u53ea\u652f\u6301 Git \u4f5c\u4e3a\u552f\u4e00\u7684\u7248\u672c\u5e93\u683c\u5f0f\u8fdb\u884c\u6258\u7ba1) </li> <li>\u4e3a\u89c4\u8303\u4f7f\u7528, \u66f4\u597d\u548c\u522b\u4eba\u534f\u4f5c\u9879\u76ee\u7279\u6765\u7cfb\u7edf\u4ed4\u7ec6\u770b\u4e00\u904d\u6280\u672f\u6587\u6863</li> </ul>"},{"location":"Triviality/GitHub/Le1/","title":"Quickstart | \u6280\u672f\u6587\u6863\u9605\u8bfb","text":""},{"location":"Triviality/GitHub/Le1/#hello-world","title":"Hello World","text":"<ol> <li>Creating a repository</li> <li>Creating a branch<ol> <li>\u901a\u8fc7\u521b\u5efa\u5206\u652f\u540c\u65f6\u62e5\u6709 \u4e0d\u540c\u7248\u672c\u7684\u5b58\u50a8\u5e93 </li> <li>\u9ed8\u8ba4\u5206\u652f master , \u4ece master \u521b\u5efa\u7684\u65b0\u5206\u652f\u662f\u5176\u526f\u672c\u6216\u5feb\u7167\u3002\u82e5\u534f\u4f5c\u8005\u5bf9 master \u5206\u652f\u8fdb\u884c\u4e86\u66f4\u65b0, \u4f60\u53ef\u62c9\u53d6\u8fd9\u4e9b\u66f4\u65b0</li> </ol> </li> <li>Making and committing changes<ol> <li>\u521b\u5efa\u65b0\u5206\u652f\u540e, GitHub \u4f1a\u5c06\u4f60\u8f6c\u5230\u5176\u65b0\u5206\u652f\u4ee3\u7801\u9875</li> <li>\u5728\u65b0\u5206\u652f\u4e0b commit \u66f4\u6539\u540e, \u8fd9\u4e9b\u66f4\u6539\u4ec5\u9002\u7528\u4e8e\u5f53\u524d\u64cd\u4f5c\u5206\u652f</li> </ol> </li> <li>Opening a pull request<ol> <li>\u5728\u65b0\u5206\u652f commit \u540e, \u53ef\u6253\u5f00 pull request (GitHub \u4e0a\u534f\u4f5c\u7684\u6838\u5fc3)</li> <li>pull request \u53ef\u663e\u793a\u4e24\u4e2a\u5206\u652f\u5185\u5bb9\u7684\u5dee\u5f02(\u53ea\u8981\u8fdb\u884c\u63d0\u4ea4, \u4fbf\u53ef pull request \u5e76\u5f00\u59cb\u8ba8\u8bba)</li> <li>\u5728 pull request \u4e2d\u4f7f\u7528 @mention \u529f\u80fd, \u53ef\u5411\u7279\u5b9a\u56e2\u961f\u6216\u4eba\u5458\u8bf7\u6c42 comment</li> </ol> </li> <li>Merging your pull request<ol> <li>pull request \u540e, \u5c06\u65b0\u5206\u652f\u7684\u66f4\u6539\u518d\u5408\u5e76\u5230 master  </li> <li>\u6709\u65f6, pull request \u53ef\u80fd\u4f1a\u5f15\u5165\u4e0e master \u4e0a\u73b0\u6709\u4ee3\u7801\u51b2\u7a81\u7684\u4ee3\u7801\u66f4\u6539\u3002\u5982\u679c\u5b58\u5728\u4efb\u4f55\u51b2\u7a81, GitHub \u5c06\u63d0\u9192\u60a8\u6709\u5173\u51b2\u7a81\u4ee3\u7801\u7684\u4fe1\u606f\uff0c\u5e76\u9632\u6b62\u5408\u5e76\uff0c\u76f4\u5230\u51b2\u7a81\u89e3\u51b3\u4e3a\u6b62\u3002\u60a8\u53ef\u4ee5\u8fdb\u884c\u89e3\u51b3\u51b2\u7a81\u7684\u63d0\u4ea4\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u62c9\u53d6\u8bf7\u6c42\u4e2d\u7684\u6ce8\u91ca\u4e0e\u56e2\u961f\u6210\u5458\u8ba8\u8bba\u51b2\u7a81</li> <li>\u63a5\u4e0b\u6765\u53ef\u5b89\u5168\u5220\u9664\u65b0\u5efa\u5206\u652f, \u82e5\u8981\u5bf9\u9879\u76ee\u8fdb\u884c\u66f4\u591a\u66f4\u6539, \u53ef\u968f\u65f6\u521b\u65b0\u65b0\u5206\u652f\u5e76\u91cd\u590d\u6b64\u8fc7\u7a0b(\u534f\u4f5c\u91cd\u8981\u4e00\u73af)</li> </ol> </li> </ol>"},{"location":"Triviality/GitHub/Le1/#set-up-git","title":"Set up Git","text":"<p>Quote</p> <p>At the heart of GitHub is an open source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer.</p>"},{"location":"Triviality/GitHub/Le1/#using-git","title":"Using Git","text":"<ul> <li>\u914d\u7f6e <p>\u5b98\u65b9\u6587\u6863 </p> </li> </ul>"},{"location":"Triviality/GitHub/Le1/#setting-up-git","title":"Setting up Git","text":"<ul> <li>\u4e0b\u8f7d\u5e76\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684 Git <p>Git</p> </li> </ul>"},{"location":"Triviality/GitHub/Le1/#git","title":"\u5728 Git \u4e2d\u8bbe\u7f6e\u7528\u6237\u540d","text":"<ol> <li>\u5173\u4e8e Git \u7528\u6237\u540d<ol> <li>\u4f7f\u7528 <code>git config</code> \u547d\u4ee4\u66f4\u6539\u4e0e Git \u63d0\u4ea4\u5173\u8054\u7684\u540d\u79f0  <p>\u4f7f\u7528 <code>git config</code> \u66f4\u6539\u4e0e Git \u63d0\u4ea4\u5173\u8054\u7684\u540d\u79f0\u4ec5\u5f71\u54cd\u672a\u6765\u7684\u63d0\u4ea4\uff0c\u800c\u4e0d\u4f1a\u66f4\u6539\u7528\u4e8e\u8fc7\u53bb\u63d0\u4ea4\u7684\u540d\u79f0</p> </li> </ol> </li> <li>\u4e3a\u8ba1\u7b97\u673a\u4e0a\u7684\u6bcf\u4e2a\u5b58\u50a8\u5e93\u8bbe\u7f6e Git \u7528\u6237\u540d<ol> <li>\u6253\u5f00 \u7ec8\u7aef(Mac/Linux) || Git Bash(Windows)</li> <li>\u8bbe\u7f6e Git \u7528\u6237\u540d:  <p>$ git config \u2013global user.name \u201cMoLan\u201d</p> </li> <li>\u786e\u8ba4\u6b63\u786e\u8bbe\u7f6e\u4e86\u7528\u6237\u540d:  <p>$ git config \u2013global user.name  MoLan</p> </li> </ol> </li> <li>\u4e3a\u4e00\u4e2a\u4ed3\u5e93\u8bbe\u7f6e Git \u7528\u6237\u540d<ol> <li>\u6253\u5f00 \u7ec8\u7aef(Mac/Linux) || Git Bash(Windows)</li> <li>\u5c06\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u66f4\u6539\u4e3a\u8981\u914d\u7f6e\u4e0e Git \u63d0\u4ea4\u5173\u8054\u7684\u540d\u79f0\u7684\u672c\u5730\u4ed3\u5e93</li> <li>\u8bbe\u7f6e Git \u7528\u6237\u540d:   <p>$ git config user.name \u201cMoLan\u201d</p> </li> <li>\u786e\u8ba4:   <p>$ git config user.name  MoLan</p> </li> </ol> </li> </ol>"},{"location":"Triviality/GitHub/Le1/#git_1","title":"\u5728 Git \u4e2d\u8bbe\u7f6e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740","text":"<ul> <li>\u5173\u4e8e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740<ul> <li>\u82e5\u60f3\u5c06\u4e2a\u4eba\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u8bbe\u4e3a\u79c1\u5bc6, \u53ef\u4f7f\u7528 GitHub \u7684 <code>noreply</code> \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u4f5c\u4e3a\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u8981\u5c06 <code>noreply</code> \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7528\u4e8e\u4ece\u547d\u4ee4\u884c\u63a8\u9001\u7684\u63d0\u4ea4\uff0c\u8bf7\u5728 Git \u4e2d\u8bbe\u7f6e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u65f6\u4f7f\u7528\u8be5\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \u8981\u5c06 <code>noreply</code> \u5730\u5740\u7528\u4e8e\u57fa\u4e8e Web \u7684 Git \u64cd\u4f5c\uff0c\u8bf7\u5728 GitHub \u4e0a\u8bbe\u7f6e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u5e76\u9009\u62e9 \u201cKeep my email address private\u201d</li> </ul> </li> </ul> <p>Note</p> <p>2017 \u5e74 7 \u6708 18 \u65e5\u540e\u6ce8\u518c\u8d26\u6237\u7684, \u6765\u81ea GitHub \u7684 <code>noreply</code> \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u662f <code>USERNAME@user.noreply.github.com</code> \u3002\u53ef\u901a\u8fc7\u5728\u7535\u5b50\u90ae\u4ef6\u8bbe\u7f6e\u4e2d\u9009\u62e9(\u6216\u91cd\u65b0\u9009\u62e9) \u201cKeep my email address private\u201d , \u4e3a GitHub \u83b7\u53d6\u57fa\u4e8e ID \u7684 <code>noreply</code> \u7535\u5b50\u90ae\u4ef6\u5730\u5740 </p> <ul> <li>\u5728 GitHub \u4e0a\u8bbe\u7f6e\u63d0\u4ea4\u7535\u5b50\u90ae\u4ef6\u5730\u5740<ul> <li>\u82e5\u5c1a\u672a\u542f\u7528\u7535\u5b50\u90ae\u4ef6\u9690\u79c1\u4fdd\u62a4, \u5219\u5728 GitHub \u4e0a\u7f16\u8f91\u3001\u5220\u9664\u6216\u521b\u5efa\u6587\u4ef6\u6216\u8005\u5408\u5e76\u62c9\u53d6\u8bf7\u6c42\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u4f5c\u8005\u66f4\u6539\u63d0\u4ea4\u5230\u54ea\u4e2a\u7ecf\u9a8c\u8bc1\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \u5982\u679c\u542f\u7528\u4e86\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u9690\u79c1\uff0c\u5219\u4e0d\u80fd\u66f4\u6539\u63d0\u4ea4\u4f5c\u8005\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f <code>&lt;username&gt;@users.noreply.github.com</code> 1. \u5728 GitHub Settings \u6dfb\u52a0\u7535\u5b50\u90ae\u4ef6\u5730\u5740 2. \u9a8c\u8bc1\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002<ol> <li>\u5728 \u201cPrimary email address\u201d \u5217\u8868\u4e2d\u9009\u62e9\u8981\u4e0e\u57fa\u4e8e Web \u7684 Git \u64cd\u4f5c\u5173\u8054\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740 </li> <li>\u82e5\u8981\u5728\u6267\u884c\u57fa\u4e8e web \u7684 Git \u64cd\u4f5c\u65f6\u5bf9\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u4fdd\u5bc6, \u5355\u51fb \u201cKeep my email addresses private\u201d </li> </ol> </li> </ul> </li> <li>\u4e3a\u8ba1\u7b97\u673a\u4e0a\u7684\u6bcf\u4e2a\u4ed3\u5e93\u8bbe\u7f6e\u7535\u5b50\u90ae\u4ef6\u5730\u5740<ol> <li>\u6253\u5f00 \u7ec8\u7aef(Mac/Linux) || Git Bash(Windows)</li> <li>\u5728 Git \u4e2d\u8bbe\u7f6e\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u53ef\u4ee5\u4f7f\u7528 GitHub \u63d0\u4f9b\u7684 noreply \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6216\u5176\u4f59\u7535\u5b50\u90ae\u4ef6\u5730\u5740 <p>$ git config \u2013global user.email \u201cYOUR_EMAIL\u201d</p> </li> <li>\u786e\u8ba4\u5728 Git \u4e2d\u6b63\u786e\u8bbe\u7f6e\u4e86\u7535\u5b50\u90ae\u4ef6\u5730\u5740:  <p>$ git config \u2013global user.email email@example.com</p> </li> <li>\u5c06\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6dfb\u52a0\u5230 GitHub \u4e0a\u7684\u8d26\u6237\uff0c\u4ee5\u4fbf\u63d0\u4ea4\u5f52\u5c5e\u4e8e\u4f60\u5e76\u663e\u793a\u5728\u4f60\u7684\u8d21\u732e\u56fe\u4e2d</li> </ol> </li> <li>\u4e3a\u4e00\u4e2a\u4ed3\u5e93\u8bbe\u7f6e\u7535\u5b50\u90ae\u4ef6\u5730\u5740<ol> <li>\u6253\u5f00 \u7ec8\u7aef(Mac/Linux) || Git Bash(Windows)</li> <li>\u5c06\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u66f4\u6539\u4e3a\u60a8\u60f3\u8981\u5728\u5176\u4e2d\u914d\u7f6e\u4e0e Git \u63d0\u4ea4\u5173\u8054\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u672c\u5730\u4ed3\u5e93</li> <li>\u5728 Git \u4e2d\u8bbe\u7f6e\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u53ef\u4ee5\u4f7f\u7528 GitHub \u63d0\u4f9b\u7684 noreply \u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6216\u5176\u4f59\u7535\u5b50\u90ae\u4ef6\u5730\u5740 <p>$ git config user.email \u201cYOUR_EMAIL\u201d</p> </li> <li>\u786e\u8ba4\u5728 Git \u4e2d\u6b63\u786e\u8bbe\u7f6e\u4e86\u7535\u5b50\u90ae\u4ef6\u5730\u5740:  <p>$ git config user.email email@example.com</p> </li> <li>\u5c06\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6dfb\u52a0\u5230 GitHub \u4e0a\u7684\u8d26\u6237\uff0c\u4ee5\u4fbf\u63d0\u4ea4\u5f52\u5c5e\u4e8e\u4f60\u5e76\u663e\u793a\u5728\u4f60\u7684\u8d21\u732e\u56fe\u4e2d</li> </ol> </li> </ul>"},{"location":"Triviality/GitHub/Le1/#authenticating-with-github-from-git","title":"Authenticating with GitHub from Git","text":"<ul> <li>\u4ece Git\u8fde\u63a5\u5230 GitHub \u5b58\u50a8\u5e93\u65f6\uff0c\u9700\u8981\u4f7f\u7528 HTTPS \u6216 SSH \u5411 GitHub \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1</li> </ul>"},{"location":"Triviality/GitHub/Le1/#https","title":"\u901a\u8fc7 HTTPS \u8fde\u63a5","text":"<ul> <li>\u82e5\u4f7f\u7528 HTTPS \u514b\u9686\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u51ed\u636e\u5e2e\u52a9\u7a0b\u5e8f\u5728 Git \u4e2d\u7f13\u5b58 GitHub \u51ed\u636e</li> </ul>"},{"location":"Triviality/GitHub/Le1/#create-a-repo","title":"Create a repo","text":""},{"location":"Triviality/GitHub/Le1/#fork-a-repo","title":"Fork a repo","text":""},{"location":"Triviality/GitHub/Le1/#github-flow","title":"GitHub flow","text":""},{"location":"Triviality/GitHub/Le1/#contributing-to-projects","title":"Contributing to projects","text":""},{"location":"Triviality/GitHub/Le1/#be-social","title":"Be social","text":""},{"location":"Triviality/GitHub/Le1/#communicating-on-github","title":"Communicating on GitHub","text":""},{"location":"Triviality/GitHub/Le1/#github-glossary","title":"GitHub glossary","text":""},{"location":"Triviality/GitHub/Le1/#git-cheatsheet","title":"Git cheatsheet","text":""},{"location":"Triviality/GitHub/Le1/#learning-resources","title":"Learning resources","text":"<p>To Be Continued</p>"},{"location":"Triviality/GitHub/Le3/","title":"Getting started with Git","text":""},{"location":"Triviality/GitHub/Le3/#set-your-username","title":"Set your username","text":""},{"location":"Triviality/GitHub/Le3/#caching-credentials","title":"Caching credentials","text":""},{"location":"Triviality/GitHub/Le3/#git-passordwords","title":"Git passordwords","text":""},{"location":"Triviality/GitHub/Le3/#macos-keychain-credentials","title":"macOS Keychain credentials","text":""},{"location":"Triviality/GitHub/Le3/#git-workflows","title":"Git workflows","text":""},{"location":"Triviality/GitHub/Le3/#about-remote-repositories","title":"About remote repositories","text":"<p>\u5173\u4e8e\u8fdc\u7a0b\u4ed3\u5e93</p> <ul> <li>\u8fdc\u7a0b URL \u662f Git \u4e00\u79cd\u6307\u793a\u201c\u60a8\u7684\u4ee3\u7801\u5b58\u50a8\u4f4d\u7f6e\u201d\u7684\u7edd\u4f73\u65b9\u5f0f </li> <li>\u53ea\u80fd\u63a8\u9001\u4e24\u7c7b URL \u5730\u5740:  <ul> <li>HTTPS URL (\u4f8b\u5982 <code>https://github.com/user/repo.git</code>)</li> <li>SSH URL   (\u4f8b\u5982 <code>git@github.com:user/repo.git</code>)</li> </ul> </li> <li>Git \u5c06\u8fdc\u7a0b URL \u4e0e\u540d\u79f0\u76f8\u5173\u8054\uff0c\u9ed8\u8ba4\u8fdc\u7a0b\u901a\u5e38\u547d\u4e3a <code>origin</code></li> </ul>"},{"location":"Triviality/GitHub/Le3/#_1","title":"\u521b\u5efa\u8fdc\u7a0b\u4ed3\u5e93","text":"<p>\u53ef\u4ee5\u4f7f\u7528 <code>git remote add</code> \u547d\u4ee4\u5c06\u8fdc\u7a0b URL \u4e0e\u540d\u79f0\u5339\u914d</p> <p>Example</p> <p>git remote add origin  <p>\u5c06 origin \u4e0e <code>REMOTE_URL</code> \u5173\u8054</p>"},{"location":"Triviality/GitHub/Le3/#manage-remote-repositories","title":"Manage remote repositories","text":""},{"location":"Triviality/GitHub/Le3/#_2","title":"\u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93","text":"<ul> <li>\u4f7f\u7528 <code>git remote add</code> \u5728\u7ec8\u7aef\u5b58\u50a8\u5b58\u50a8\u5e93\u7684\u76ee\u5f55\u4e2d\u65b0\u589e\u8fdc\u7a0b</li> <li><code>git remote add</code> \u91c7\u7528\u4e24\u4e2a\u53c2\u6570:<ul> <li>\u8fdc\u7a0b\u540d\u79f0 (\u5982 <code>origin</code>)</li> <li>\u8fdc\u7a0b URL (\u5982 <code>https://github.com/user/repo.git</code>)</li> </ul> </li> </ul> Example <pre><code>$ git remote add origin https://github.com/USER/REPO.git\n# Set a new remote\n$ git remote -v\n# Verify new remote\n&gt; origin  https://github.com/USER/REPO.git (fetch)\n&gt; origin  https://github.com/USER/REPO.git (push)\n</code></pre> Troubleshooting: Remote origin already exists <p>\u6b64\u9519\u8bef\u6d88\u606f\u8868\u793a\u5c1d\u8bd5\u6dfb\u52a0\u7684\u8fdc\u7a0b\u4e0e\u672c\u5730\u4ed3\u5e93\u8fdc\u7a0b\u540d\u79f0\u76f8\u540c <pre><code>$ git remote add origin https://github.com/octocat/Spoon-Knife.git\n&gt; fatal: remote origin already exists.\n</code></pre>  \u4e09\u79cd\u89e3\u51b3\u65b9\u6cd5:        1. \u5bf9\u65b0\u8fdc\u7a0b\u4f7f\u7528\u4e0d\u540c\u540d\u79f0       2. \u5728\u6dfb\u52a0\u65b0\u8fdc\u7a0b\u65f6\uff0c\u91cd\u547d\u540d\u73b0\u6709\u8fdc\u7a0b\u4ed3\u5e93       3. \u5728\u6dfb\u52a0\u65b0\u8fdc\u7a0b\u524d\uff0c\u5220\u9664\u73b0\u6709\u8fdc\u7a0b\u4ed3\u5e93</p>"},{"location":"Triviality/GitHub/Le3/#url","title":"\u66f4\u6539\u8fdc\u7a0b\u4ed3\u5e93 URL","text":"<ul> <li><code>git remote set-url</code> \u547d\u4ee4\u66f4\u6539\u73b0\u6709\u8fdc\u7a0b\u4ed3\u5e93 URL</li> <li>\u8be5\u547d\u4ee4\u91c7\u7528\u4e24\u4e2a\u53c2\u6570: <ul> <li>\u73b0\u6709\u8fdc\u7a0b\u4ed3\u5e93\u540d\u79f0\u3002\u5982\uff0c<code>origin</code> \u00b7\u00b7\u00b7</li> <li>\u8fdc\u7a0b\u4ed3\u5e93\u7684\u65b0 URL\u3002\u5982:<ul> <li>\u82e5\u8981\u66f4\u65b0\u4e3a\u4f7f\u7528 HTTPS\uff0cURL \u5f62\u5982 <code>https://github.com/USERNAME/REPOSITORY.git</code></li> <li>\u82e5\u8981\u66f4\u65b0\u4e3a\u4f7f\u7528 SSH\uff0cURL \u5f62\u5982 <code>git@github.com:USERNAME/REPOSITORY.git</code></li> </ul> </li> </ul> </li> </ul> \u5c06\u8fdc\u7a0b URL \u4ece SSH \u5207\u6362\u5230 HTTPS\u5c06\u8fdc\u7a0b URL \u4ece HTTPS \u5207\u6362\u5230 SSH <ol> <li>\u6253\u5f00 Git Bash || \u7ec8\u7aef</li> <li>\u5c06\u5f53\u524d\u76ee\u5f55\u66f4\u6539\u4e3a\u672c\u5730\u4ed3\u5e93</li> <li>\u5217\u51fa\u73b0\u6709\u4ed3\u5e93 <pre><code>$ git remote -v\n&gt; origin  git@github.com:USERNAME/REPOSITORY.git (fetch)\n&gt; origin  git@github.com:USERNAME/REPOSITORY.git (push)\n</code></pre></li> <li>\u4f7f\u7528 <code>git remote set-url</code> \u547d\u4ee4\u5c06\u8fdc\u7a0b URL \u4eceSSH \u66f4\u6539\u4e3a HTTPS <pre><code>$ git remote set-url origin https://github.com/USERNAME/REPOSITORY.git\n</code></pre></li> <li>\u9a8c\u8bc1 <pre><code>$ git remote -v\n# Verify new remote URL\n&gt; origin  https://github.com/USERNAME/REPOSITORY.git (fetch)\n&gt; origin  https://github.com/USERNAME/REPOSITORY.git (push)\n</code></pre> <p>\u4e0b\u6b21\u5c06 <code>git fetch</code>\u3001<code>git pull</code>\u3001<code>git push</code>\u6267\u884c\u5230\u8fdc\u7a0b\u5b58\u50a8\u5e93\u65f6\uff0c\u7cfb\u7edf\u5c06\u8981\u6c42\u63d0\u4f9b GitHub \u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u53ef\u4ee5\u4f7f\u7528 GitHub \u51ed\u636e\u5e2e\u52a9\u7a0b\u5e8f\uff0c\u4ee5\u4fbf Git \u6bcf\u6b21\u4e0e GitHub \u901a\u4fe1\u65f6\u90fd\u4f1a\u8bb0\u4f4f\u4f60\u7684 GitHub \u7528\u6237\u540d\u548c personal access token</p> </li> </ol> <ol> <li>\u6253\u5f00 Git Bash || \u7ec8\u7aef</li> <li>\u5c06\u5f53\u524d\u76ee\u5f55\u66f4\u6539\u4e3a\u672c\u5730\u4ed3\u5e93</li> <li>\u5217\u51fa\u73b0\u6709\u4ed3\u5e93 <pre><code>$ git remote -v\n&gt; origin  https://github.com/USERNAME/REPOSITORY.git (fetch)\n&gt; origin  https://github.com/USERNAME/REPOSITORY.git (push)\n</code></pre></li> <li>\u4f7f\u7528 <code>git remote set-url</code> \u547d\u4ee4\u5c06\u8fdc\u7a0b URL \u4ece HTTPS \u66f4\u6539\u4e3a SSH <pre><code>$ git remote set-url origin git@github.com:USERNAME/REPOSITORY.git\n</code></pre></li> <li>\u9a8c\u8bc1 <pre><code>$ git remote -v\n# Verify new remote URL\n&gt; origin  git@github.com: USERNAME/REPOSITORY.git (fetch)\n&gt; origin  git@github.com: USERNAME/REPOSITORY.git (push)\n</code></pre> <p>\u4e0b\u6b21\u5c06 <code>git fetch</code>\u3001<code>git pull</code>\u3001<code>git push</code>\u6267\u884c\u5230\u8fdc\u7a0b\u5b58\u50a8\u5e93\u65f6\uff0c\u7cfb\u7edf\u5c06\u8981\u6c42\u63d0\u4f9b GitHub \u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u53ef\u4ee5\u4f7f\u7528 GitHub \u51ed\u636e\u5e2e\u52a9\u7a0b\u5e8f\uff0c\u4ee5\u4fbf Git \u6bcf\u6b21\u4e0e GitHub \u901a\u4fe1\u65f6\u90fd\u4f1a\u8bb0\u4f4f\u4f60\u7684 GitHub \u7528\u6237\u540d\u548c personal access token</p> </li> </ol>"},{"location":"Triviality/GitHub/Le3/#_3","title":"\u91cd\u547d\u540d\u8fdc\u7a0b\u4ed3\u5e93","text":"<ul> <li>\u4f7f\u7528 <code>git remote rename</code> \u547d\u4ee4\u91cd\u547d\u540d\u73b0\u6709\u8fdc\u7a0b</li> <li><code>git remote rename</code> \u547d\u4ee4\u91c7\u7528\u4e24\u4e2a\u53c2\u6570:<ul> <li>\u73b0\u6709\u8fdc\u7a0b\u540d\u79f0\uff08\u5982 origin\uff09</li> <li>\u8fdc\u7a0b\u7684\u65b0\u540d\u79f0\uff08\u5982 destination\uff09</li> </ul> </li> </ul>"},{"location":"Triviality/GitHub/Le3/#_4","title":"\u5220\u9664\u8fdc\u7a0b\u4ed3\u5e93","text":"<ul> <li>\u4f7f\u7528 <code>git remote rm</code> \u547d\u4ee4\u4ece\u5b58\u50a8\u5e93\u4e2d\u5220\u9664\u8fdc\u7a0b URL\u3002</li> <li>\u8be5\u547d\u4ee4\u91c7\u7528\u4e00\u4e2a\u53c2\u6570\uff1a<ul> <li>\u8fdc\u7a0b\u540d\u79f0\uff08\u4f8b\u5982 destination\uff09</li> </ul> </li> </ul> <p>\u4ece\u5b58\u50a8\u5e93\u4e2d\u5220\u9664\u8fdc\u7a0b URL \u53ea\u4f1a\u53d6\u6d88\u672c\u5730\u548c\u8fdc\u7a0b\u5b58\u50a8\u5e93\u7684\u94fe\u63a5\u3002 \u5b83\u4e0d\u4f1a\u5220\u9664\u8fdc\u7a0b\u5b58\u50a8\u5e93</p>"},{"location":"Triviality/GitHub/Le3/#associate-text-editors","title":"Associate text editors","text":""},{"location":"Triviality/GitHub/Le3/#handle-line-endings","title":"Handle line endings","text":""},{"location":"Triviality/GitHub/Le3/#ignoring-files","title":"Ignoring files","text":""},{"location":"Triviality/Makefile/","title":"Index","text":"<p>Example</p> <pre><code>C_SRC       = $(sort $(wildcard *.c))\nOBJ         = $(patsubst %.c,%.o,$(C_SRC))\nfile = main.o\nall:$(OBJ)\n%.o:%.c\n${GCC} ${CFLAG} -c $&lt;\nclean:\n$(shell rm *.o 2&gt;/dev/null)\n</code></pre>"},{"location":"Triviality/Markdown/","title":"Perface","text":"<p>Note</p> <p>\u4e00\u4e9b\u7b80\u5355\u7684markdown\u8bed\u6cd5(\u90e8\u5206\u8bed\u6cd5\u5728\u4e0d\u540cmarkdown\u7f16\u8bd1\u5668\u4e0a\u6709\u5dee\u522b)</p>"},{"location":"Triviality/Markdown/markdown/","title":"\u90e8\u5206Markdown\u8bed\u6cd5","text":""},{"location":"Triviality/Markdown/markdown/#_1","title":"\u5173\u4e8e\u6807\u9898","text":"<ol> <li>\u4e00\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>#</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u4e8c\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>##</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u4e09\u7ea7\u6807\u63d0 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>###</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u56db\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>####</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u4e94\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>#####</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> <li>\u516d\u7ea7\u6807\u9898 \u4f7f\u7528\u547d\u4ee4\uff1a\u2019<code>######</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2018</li> </ol>"},{"location":"Triviality/Markdown/markdown/#_2","title":"\u52a0\u7c97\u3001\u503e\u659c\u3001\u4e0b\u5212\u7ebf\u3001\u5220\u9664\u7ebf\u3001\u6807\u8bb0\u6587\u672c","text":"<ol> <li>\u52a0\u7c97 \u7684\u547d\u4ee4\uff1a\u2019<code>**</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>**</code>\u2018(\u8f93\u5165\u4e4b\u540e\u6572\u7a7a\u683c\u5373\u53ef\u5c06\u4e24\u4e2a<code>**</code>\u4e4b\u95f4\u7684\u5185\u5bb9\u52a0\u7c97) or \u2018<code>__</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>__</code>\u2018\uff08\u4e24\u4e2a\u4e0b\u5212\u7ebf\uff09\uff0c\u4e24\u4e2a<code>**</code>\u4e4b\u95f4\u65e0\u7a7a\u683c \uff0c\u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e<code>Ctrl</code>+<code>B</code></li> <li>\u503e\u659c \u7684\u547d\u4ee4\uff1a\u2019<code>*</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>*</code>\u2018\uff08\u540c\u6837\u9700\u8981\u5728\u7ed3\u675f\u65f6\u6572\u51fb\u7a7a\u683c\uff09or\u2019 <code>_</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>_</code>\u2018\uff08\u4e00\u4e2a\u4e0b\u5212\u7ebf\uff09\uff0c\u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e<code>Ctrl</code>+<code>I</code></li> <li>\u4e0b\u5212\u7ebf  \uff1a\u2019<code>&lt;u&gt;</code>\u2019+\u2019<code>\u5185\u5bb9</code>\u2019+\u2019<code>&lt;/u&gt;</code>\u2018\uff0c\u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e<code>Ctrl</code>+<code>U</code></li> <li>\u5220\u9664\u7ebf\uff1a\u2019<code>~~</code>\u2018 + \u5185\u5bb9 + \u2018<code>~~</code>\u2019\uff0c\u6216\u8005\u4f7f\u7528\u5feb\u6377\u952e<code>Shift</code>+<code>Ctrl</code> + <code>X</code></li> <li>\u6807\u8bb0 \uff1a\u2018<code>==</code>\u2019 + \u2018<code>\u5185\u5bb9</code>\u2019+\u2018<code>==</code>\u2019\uff08\u66f4\u597d\u7528\u4e00\u70b9\uff09\uff0c\u6216\u8005\u4f7f\u7528<code>Alt</code> + <code>Ctrl</code> + <code>H</code>\uff08\u6211\u7684\u4e0d\u597d\u7528\uff09</li> </ol>"},{"location":"Triviality/Markdown/markdown/#_3","title":"\u5206\u5272\u7ebf","text":"<pre><code>\u4f7f\u7528`*** `+ `Enter` \u6216\u8005 `---` + `Enter`\u5c31\u53ef\u4ee5\u4e86\n</code></pre>"},{"location":"Triviality/Markdown/markdown/#_4","title":"\u5f15\u7528","text":"<pre><code>\u5728\u884c\u9996\u4f7f\u7528 ' `\u300b`'or ' `&gt;`' + '`\u7a7a\u683c`'\n</code></pre> <p>\u5f88\u591a<code>markdown</code>\u7f16\u8f91\u5668\u53ea\u652f\u6301 <code>&gt;</code></p>"},{"location":"Triviality/Markdown/markdown/#_5","title":"\u5217\u8868","text":"<ol> <li>\u6709\u5e8f\u5217\u8868\u2192\u4f7f\u7528\u2019<code>\u6570\u5b57</code>\u2019+\u2019<code>.</code>\u2019+\u2019<code>\u7a7a\u683c</code>\u2018 \u6216\u8005 \u4f7f\u7528\u5feb\u6377\u952e<code>Shift</code> + <code>Ctrl</code>+<code>7</code></li> <li>\u65e0\u5e8f\u5217\u8868\u2192\u4f7f\u7528\u2019<code>+</code>\u2018or \u2018<code>-</code>\u2018or \u2018<code>*</code>\u2019+\u2019<code>\u7a7a\u683c</code>\u2018 \u6216\u8005 \u4f7f\u7528\u5feb\u6377\u952e<code>Shift</code> + <code>Ctrl</code> + <code>8</code></li> <li>\u793a\u4f8b\u5982\u4e0b\uff1a</li> <li>(\u5728\u4fdd\u7559\u5217\u8868\u8fde\u7eed\u6027\u7684\u540c\u65f6\u5728\u5217\u8868\u4e2d\u6dfb\u52a0\u53e6\u4e00\u4e2a\u5143\u7d20\uff0c\u8bf7\u5c06\u8be5\u5143\u7d20\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\u6216\u4e00\u4e2a\u5236\u8868\u7b26) - \u4e00\u7ea7\u65e0\u5e8f\u5217\u8868\u5728\u4f7f\u7528<code>Tab</code>\u952e\u53ef\u4ee5\u8fdb\u5165\u4e0b\u4e00\u7ea7\uff0c\u5982\u4e0b\u7a7a\u5fc3\u5706\u5708\u4e3a<code>*</code>+<code>space</code>+<code>tab</code></li> </ol>"},{"location":"Triviality/Markdown/markdown/#code","title":"Code","text":"<ol> <li>\u884c\u5185\u4ee3\u7801\uff1a \u5728\u6587\u5b57\u5757\u4e24\u8fb9\u52a0\u4e0a ` </li> <li>\u4ee3\u7801\u5757</li> </ol> <p>Example</p> <p>bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>    ``` py title=\"bubble_sort.py\"\n    def bubble_sort(items):\n        for i in range(len(items)):\n            for j in range(len(items) - 1 - i):\n                if items[j] &gt; items[j + 1]:\n                    items[j], items[j + 1] = items[j + 1], items[j]\n    ```\n</code></pre></p>"},{"location":"Triviality/Markdown/markdown/#_6","title":"\u56fe\u7247\u76f8\u5173","text":"<ul> <li>\u63d2\u5165\u56fe\u7247\u683c\u5f0f <code>![\u56fe\u7247\u63cf\u8ff0](\u94fe\u63a5)</code></li> <li>\u5c45\u4e2d \u2014 <code>![\u56fe\u7247\u63cf\u8ff0](\u94fe\u63a5#pic_center)</code> or \u4f7f\u7528 html \u8bed\u6cd5</li> <li>\u8bbe\u7f6e\u56fe\u7247\u5927\u5c0f \u2014 \u8c03\u6574\u5bbd\u9ad8: <code>![\u56fe\u7247\u63cf\u8ff0](\u94fe\u63a5 =100x100)</code> </li> </ul> <p>\u867d\u7136\u4f46\u662f\uff0c\u8fd8\u662f\u5efa\u8bae\u76f4\u63a5\u7528 html , \u5982 <code>&lt;img src=\"\u94fe\u63a5\" width=\"100\" height=\"100\" alt=\"\u56fe\u7247\u63cf\u8ff0\" align=center /&gt;</code> Typora \u4e0a\u8ff0 html \u4ee3\u7801\u8c8c\u4f3c\u4e0d\u8d77\u4f5c\u7528\uff0c\u672c\u4eba\u4f7f\u7528 <code>&lt;center&gt;&lt;img src=\"\"/&gt;&lt;/center&gt;</code></p>"},{"location":"Triviality/Markdown/markdown/#_7","title":"\u6570\u5b66\u516c\u5f0f&amp;\u7b26\u53f7","text":"<p>\u5747\u4f7f\u7528<code>$</code>+<code>\u4ee3\u7801</code>+<code>$</code>+<code>\u7a7a\u683c</code>\u53ef\u4ee5\u6253\u51fa\uff0c\u4f8b\u5982 <code>$\\alpha$</code></p> <p>\u539f\u5730\u5740</p> <p>Markdown</p>"},{"location":"Triviality/The%20Missing%20Semester/","title":"perface","text":"<p>Note</p> <p>The Misssing Semester of CS Education \u662fMIT\u63a8\u51fa\u7684CS\u8bfe\u7a0b\uff0c\u4e3b\u8981\u8bb2\u8ff0\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5f88\u57fa\u7840\u4e14\u91cd\u8981\u4f46\u4e0d\u4f1a\u51fa\u73b0\u5728CS\u4e3b\u6d41\u8bfe\u7a0b\u4e2d\u7684\u4e00\u4e9b\u77e5\u8bc6\u3002</p> Quote <p>Youtube Bilibili</p>"},{"location":"Triviality/The%20Missing%20Semester/Vim/","title":"Vim","text":""},{"location":"Triviality/The%20Missing%20Semester/Vim/#_1","title":"\u8be5\u5b66\u54ea\u4e2a\u7f16\u8f91\u5668\uff1f","text":"<ul> <li>Visual Studio Code\u662f\u76ee\u524d\u6700\u6d41\u884c\u7684\u4ee3\u7801\u7f16\u8f91\u5668\u3002\u800cVim \u5219\u662f\u6700\u6d41\u884c\u7684\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u7f16\u8f91\u5668\u3002</li> <li>REPL\u53ea\u4ea4\u4e92\u5f0f\u7684\u7f16\u7a0b\u73af\u5883\uff0c\u4e5f\u80fd\u6307\u4ee3\u547d\u4ee4\u884c\u7684\u6a21\u5f0f</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#vim_1","title":"Vim\u7684\u54f2\u5b66","text":"<ul> <li>\u5728\u7f16\u7a0b\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u628a\u5927\u91cf\u65f6\u95f4\u82b1\u5728\u9605\u8bfb/\u7f16\u8f91\u800c\u4e0d\u662f\u5728\u5199\u4ee3\u7801\u4e0a\u3002\u6240\u4ee5\uff0cVim \u662f\u4e00\u4e2a\u591a\u6a21\u6001\u7f16\u8f91\u5668\uff1a\u5b83\u5bf9\u4e8e\u63d2\u5165\u6587\u5b57\u548c\u64cd\u7eb5\u6587\u5b57\u6709\u4e0d\u540c\u7684\u6a21\u5f0f\u3002Vim \u662f\u53ef\u7f16\u7a0b\u7684\uff08\u53ef\u4ee5\u4f7f\u7528 Vimscript \u6216\u8005\u50cf Python \u4e00\u6837\u7684\u5176\u4ed6\u7a0b\u5e8f\u8bed\u8a00\uff09\uff0cVim \u7684\u63a5\u53e3\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u7a0b\u5e8f\u8bed\u8a00\uff1a\u952e\u5165\u64cd\u4f5c\uff08\u4ee5\u53ca\u5176\u52a9\u8bb0\u540d\uff09 \u662f\u547d\u4ee4\uff0c\u8fd9\u4e9b\u547d\u4ee4\u4e5f\u662f\u53ef\u7ec4\u5408\u7684\u3002Vim \u907f\u514d\u4e86\u4f7f\u7528\u9f20\u6807\uff0c\u56e0\u4e3a\u90a3\u6837\u592a\u6162\u4e86\uff1bVim \u751a\u81f3\u907f\u514d\u7528\u4e0a\u4e0b\u5de6\u53f3\u952e\u56e0\u4e3a\u90a3\u6837\u9700\u8981\u592a\u591a\u7684\u624b\u6307\u79fb\u52a8\u3002</li> <li>\u8fd9\u6837\u7684\u8bbe\u8ba1\u54f2\u5b66\u4f7f\u5f97 Vim \u6210\u4e3a\u4e86\u4e00\u4e2a\u80fd\u8ddf\u4e0a\u4f60\u601d\u7ef4\u901f\u5ea6\u7684\u7f16\u8f91\u5668</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_2","title":"\u547d\u4ee4","text":"<ul> <li>\u9ed8\u8ba4Normal\u6a21\u5f0f\uff0cNormal\u6a21\u5f0f\u4e0b\u6309 i \u5c06\u8fdb\u5165Insert\u6a21\u5f0f\uff0c\u800c\u5728Insert\u6a21\u5f0f\u4e0b\u6309Esc\u53ef\u4ee5\u8fd4\u56deNormal\u6a21\u5f0f <p>\u6309\u952e\u4e66\u5199\uff1a\u4f8b\u5982\u5982\u679c\u662f\u5355\u72ec\u7684\u6309\u952e i \uff0c\u90a3\u4e48\u76f4\u63a5\u5199 i \u5c31\u53ef\u4ee5\u4e86\uff0c \u5982\u679c\u662fCtrl + V\u8fd9\u79cd\u6309\u952e\u7ec4\u5408\uff0c\u6709\u4e0b\u9762\u51e0\u79cd\u8868\u793a\u65b9\u6cd5       1. <code>^V</code>\uff1a\u4e00\u4e2a\u201c\u8131\u5b57\u7b26\u53f7\u201d\u540e\u9762\u8ddf\u7740\u63a7\u5236\u7528\u5b57\u7b26\uff08\u8fd9\u91cc\u7684\u63a7\u5236\u7528\u5b57\u7b26\u6307\u90a3\u4e2aV\uff0c\u4e5f\u5c31\u662f\u7ec4\u5408\u952e\u4e2d \u7684\u53e6\u4e00\u4e2a\u952e\uff09       2. <code>Ctrl - V</code>        3. <code>&lt; C - V&gt;</code> </p> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_3","title":"\u5404\u79cd\u6a21\u5f0f","text":"<ol> <li> <p>Normal\u6a21\u5f0f\uff08\u6b63\u5e38\uff09\u2014\u2014&gt;\u662f\u7528\u6765\u79fb\u52a8\u5149\u6807\u3001\u9605\u8bfb\u4e1c\u897f\u4ee5\u53ca\u5728\u6587\u4ef6\u95f4\u5207\u6362\u7684</p> <p><code>x</code> \u53ef\u4ee5\u5220\u9664\u5b57\u7b26</p> </li> <li> <p>Insert\u6a21\u5f0f\uff08\u63d2\u5165\uff09\u2014\u2014&gt;\u6309\u4e0b <code>i</code> \u952e\u8fdb\u5165\uff0c\u7528\u6765\u8f93\u5165\u7684</p> <p>\u56e0\u6b64\u5728\u8fd9\u4e2a\u6a21\u5f0f\u4e0b\u4f60\u7684\u6309\u952e\u5927\u591a\u4f1a\u76f4\u63a5\u8fdb\u5165buffer</p> </li> <li> <p>Replace\u6a21\u5f0f\uff08\u66ff\u6362\uff09\u2014\u2014&gt;\u6309\u4e0b <code>R</code> \u8fdb\u5165\uff0c\u4e0d\u50cf\u63d2\u5165\u6a21\u5f0f\u4f1a\u628a\u5b57\u7b26\u5f80\u540e\u79fb\uff0c\u66ff\u6362\u6a21\u5f0f\u4f1a\u76f4\u63a5\u8986\u76d6\u6389\u6587\u672c</p> </li> <li>Visual\u6a21\u5f0f\uff08\u53ef\u89c6\u5316\uff09<ol> <li>Visual\uff08\u4e00\u822c\uff09\u2014\u2014&gt;\u6309\u4e0b <code>v</code> \u952e\u8fdb\u5165\uff0c</li> <li>Visual Line\uff08\u884c\uff09\u2014\u2014&gt;\u6309\u4e0b <code>Shift + v</code> \u8fdb\u5165\uff0c</li> <li>Visual Block\uff08\u5757\uff09\u2014\u2014&gt; \u6309\u4e0b <code>Ctrl + v</code> \u8fdb\u5165\uff0c</li> </ol> </li> <li>Command\u6a21\u5f0f\uff08\u547d\u4ee4\u884c\uff09\u2014\u2014&gt;\u6309\u4e0b <code>:</code> \u5c31\u53ef\u4ee5\u8fdb\u5165\uff0c</li> </ol> Note <ul> <li>\u5728\u4e0d\u540c\u64cd\u4f5c\u6a21\u5f0f\u4e0b\uff0c\u952e\u76d8\u6572\u51fb\u7684\u542b\u4e49\u4e5f\u4e0d\u540c\uff0c\u6bd4\u5982\uff0c<code>x</code> \u5728\u63d2\u5165\u6a21\u5f0f\u4f1a\u63d2\u5165\u5b57\u6bcd <code>x</code>\uff0c\u4f46\u662f\u5728\u6b63\u5e38\u6a21\u5f0f \u4f1a\u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u5b57\u6bcd\uff0c\u5728\u53ef\u89c6\u6a21\u5f0f\u4e0b\u5219\u4f1a\u5220\u9664\u9009\u4e2d\u6587\u5757\u3002</li> <li>\u5728\u9ed8\u8ba4\u8bbe\u7f6e\u4e0b\uff0cVim\u4f1a\u5728\u5de6\u4e0b\u89d2\u663e\u793a\u5f53\u524d\u7684\u6a21\u5f0f\u3002 Vim\u542f\u52a8\u65f6\u7684\u9ed8\u8ba4\u6a21\u5f0f\u662f\u6b63\u5e38\u6a21\u5f0f\u3002\u901a\u5e38\u4f60\u4f1a\u628a\u5927\u90e8\u5206 \u65f6\u95f4\u82b1\u5728\u6b63\u5e38\u6a21\u5f0f\u548c\u63d2\u5165\u6a21\u5f0f\u3002</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_4","title":"\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"Triviality/The%20Missing%20Semester/Vim/#_5","title":"\u63d2\u5165\u6587\u672c","text":"<p>\u5728\u6b63\u5e38\u6a21\u5f0f\u4e0b\uff0c\u952e\u5165 <code>i</code> \u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002\u73b0\u5728 Vim \u8ddf\u5f88\u591a\u5176\u4ed6\u7684\u7f16\u8f91\u5668\u4e00\u6837\uff0c\u76f4\u5230\u4f60\u952e\u5165 \u8fd4\u56de\u6b63\u5e38\u6a21\u5f0f\u3002 \u4f60\u53ea\u9700\u8981\u638c\u63e1\u8fd9\u4e00\u70b9\u548c\u4e0a\u9762\u4ecb\u7ecd\u7684\u6240\u6709\u57fa\u7840\u77e5\u8bc6\u5c31\u53ef\u4ee5\u4f7f\u7528 Vim \u6765\u7f16\u8f91\u6587\u4ef6\u4e86 \uff08\u867d\u7136\u5982\u679c\u4f60\u4e00\u76f4\u505c\u7559\u5728\u63d2\u5165\u6a21\u5f0f\u5185\u4e0d\u4e00\u5b9a\u9ad8\u6548\uff09\u3002"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_6","title":"\u7f13\u5b58\u3001\u6807\u7b7e\u9875\u3001\u7a97\u53e3","text":"<ul> <li>Vim \u4f1a\u7ef4\u62a4\u4e00\u7cfb\u5217\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u79f0\u4e3a\u201c\u7f13\u5b58\u201d\u3002\u4e00\u4e2a Vim \u4f1a\u8bdd\u5305\u542b\u4e00\u7cfb\u5217\u6807\u7b7e\u9875\uff0c\u6bcf\u4e2a\u6807\u7b7e\u9875\u5305\u542b \u4e00\u7cfb\u5217\u7a97\u53e3\uff08\u5206\u9694\u9762\u677f\uff09\u3002\u6bcf\u4e2a\u7a97\u53e3\u663e\u793a\u4e00\u4e2a\u7f13\u5b58\u3002\u8ddf\u7f51\u9875\u6d4f\u89c8\u5668\u7b49\u5176\u4ed6\u4f60\u719f\u6089\u7684\u7a0b\u5e8f\u4e0d\u4e00\u6837\u7684\u662f\uff0c \u7f13\u5b58\u548c\u7a97\u53e3\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff1b\u7a97\u53e3\u53ea\u662f\u89c6\u89d2\u3002\u4e00\u4e2a\u7f13\u5b58\u53ef\u4ee5\u5728\u591a\u4e2a\u7a97\u53e3\u6253\u5f00\uff0c\u751a\u81f3\u5728\u540c\u4e00\u4e2a\u6807\u7b7e\u9875\u5185\u7684\u591a\u4e2a\u7a97\u53e3\u6253\u5f00\u3002\u8fd9\u4e2a\u529f\u80fd\u5176\u5b9e\u5f88\u597d\u7528\uff0c\u6bd4\u5982\u5728\u67e5\u770b\u540c\u4e00\u4e2a\u6587\u4ef6\u7684\u4e0d\u540c\u90e8\u5206\u7684\u65f6\u5019\u3002</li> <li>Vim \u9ed8\u8ba4\u6253\u5f00\u4e00\u4e2a\u6807\u7b7e\u9875\uff0c\u8fd9\u4e2a\u6807\u7b7e\u4e5f\u5305\u542b\u4e00\u4e2a\u7a97\u53e3\u3002<ul> <li>\uff1atabnew (\u6587\u4ef6\u540d)\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u7a97\u53e3\u6253\u5f00\u6587\u4ef6\uff0c Normal\u6a21\u5f0f\u4e0b gt \u53ef\u4ee5\u5728\u7a97\u53e3\u4e4b\u95f4\u5207\u6362\u3002</li> <li>\u6b64\u65f6\u6211\u4eec\u8f93\u5165 <code>:q</code> \u4e0d\u4f1a\u5b8c\u5168\u9000\u51faVim\u53ea\u4f1a\u5173\u95ed\u5f53\u524d\u7a97\u53e3\uff0c\u53ea\u6709\u6ca1\u6709\u7a97\u53e3\u7684\u65f6\u5019\u624d\u4f1a\u9000\u51faVim</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#vim_2","title":"\u547d\u4ee4\u884c\u4e0b\u7684vim\u547d\u4ee4","text":"<ul> <li>\u5728\u6b63\u5e38\u6a21\u5f0f\u4e0b\u952e\u5165 : \u8fdb\u5165\u547d\u4ee4\u884c\u6a21\u5f0f\u3002 \u5728\u952e\u5165 : \u540e\uff0c\u4f60\u7684\u5149\u6807\u4f1a\u7acb\u5373\u8df3\u5230\u5c4f\u5e55\u4e0b\u65b9\u7684\u547d\u4ee4\u884c\u3002 \u8fd9\u4e2a\u6a21\u5f0f\u6709\u5f88\u591a\u529f\u80fd\uff0c\u5305\u62ec\u6253\u5f00\uff0c\u4fdd\u5b58\uff0c\u5173\u95ed\u6587\u4ef6\uff0c\u4ee5\u53ca \u9000\u51fa Vim\u3002<ul> <li><code>:q</code> \u9000\u51fa\uff08\u5173\u95ed\u7a97\u53e3\uff09</li> <li><code>:w</code> \u4fdd\u5b58\uff08\u5199\uff09</li> <li><code>:wq</code> \u4fdd\u5b58\u7136\u540e\u9000\u51fa</li> <li><code>:qa</code> \u4f1a\u5173\u95ed\u6240\u6709\u7a97\u53e3</li> <li><code>:e</code> {\u6587\u4ef6\u540d} \u6253\u5f00\u8981\u7f16\u8f91\u7684\u6587\u4ef6</li> <li><code>:ls</code> \u663e\u793a\u6253\u5f00\u7684\u7f13\u5b58</li> <li><code>:help</code> {\u6807\u9898} \u6253\u5f00\u5e2e\u52a9\u6587\u6863<ul> <li><code>:help :w</code> \u6253\u5f00 <code>:w</code> \u547d\u4ee4\uff08Command\u6a21\u5f0f\uff09\u7684\u5e2e\u52a9\u6587\u6863</li> <li><code>:help w</code> \u6253\u5f00 <code>w</code> \u79fb\u52a8\uff08Normal\u6a21\u5f0f\uff09\u7684\u5e2e\u52a9\u6587\u6863</li> </ul> </li> <li>Normal\u6a21\u5f0f\u4e0b\u8f93\u5165 <code>s</code> \u4f1a\u5220\u9664\u5b57\u7b26\u5e76\u8fdb\u5165Insert\u6a21\u5f0f</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#vim_3","title":"Vim\u7684\u63a5\u53e3\u5176\u5b9e\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00","text":"<ul> <li>Vim \u6700\u91cd\u8981\u7684\u8bbe\u8ba1\u601d\u60f3\u662f Vim \u7684\u754c\u9762\u672c\u8eab\u662f\u4e00\u4e2a\u7a0b\u5e8f\u8bed\u8a00\u3002\u952e\u5165\u64cd\u4f5c \uff08\u4ee5\u53ca\u4ed6\u4eec\u7684\u52a9\u8bb0\u540d\uff09 \u672c\u8eab\u662f\u547d\u4ee4\uff0c \u8fd9\u4e9b\u547d\u4ee4\u53ef\u4ee5\u7ec4\u5408\u4f7f\u7528\u3002 \u8fd9\u4f7f\u5f97\u79fb\u52a8\u548c\u7f16\u8f91\u66f4\u52a0\u9ad8\u6548\uff0c\u7279\u522b\u662f\u4e00\u65e6\u5f62\u6210\u808c\u8089\u8bb0\u5fc6\u3002</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_7","title":"\u79fb\u52a8","text":"<ul> <li>\u591a\u6570\u65f6\u5019\u4f60\u4f1a\u5728\u6b63\u5e38\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528\u79fb\u52a8\u547d\u4ee4\u5728\u7f13\u5b58\u4e2d\u5bfc\u822a\u3002\u5728 Vim \u91cc\u9762\u79fb\u52a8\u4e5f\u88ab\u79f0\u4e3a \u201c\u540d\u8bcd\u201d\uff0c \u56e0\u4e3a\u5b83\u4eec\u6307\u5411\u6587\u5b57\u5757\u3002<ul> <li>\u57fa\u672c\u79fb\u52a8: <code>hjkl</code> \uff08\u5de6\uff0c \u4e0b\uff0c \u4e0a\uff0c \u53f3\uff09</li> <li>\u8bcd\uff1a <code>w</code> \uff08\u4e0b\u4e00\u4e2a\u8bcd\uff09\uff0c <code>b</code> \uff08\u8bcd\u521d\uff09\uff0c <code>e</code> \uff08\u8bcd\u5c3e\uff09</li> <li>\u884c\uff1a <code>0</code> \uff08\u884c\u521d\uff09\uff0c <code>^</code> \uff08\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\uff09\uff0c <code>$</code> \uff08\u884c\u5c3e\uff09</li> <li>\u5c4f\u5e55\uff1a <code>H</code> \uff08\u5c4f\u5e55\u9996\u884c\uff09\uff0c <code>M</code> \uff08\u5c4f\u5e55\u4e2d\u95f4\uff09\uff0c <code>L</code> \uff08\u5c4f\u5e55\u5e95\u90e8\uff09</li> <li>\u7ffb\u9875\uff1a <code>Ctrl-u</code> \uff08\u4e0a\u7ffb\uff09\uff0c <code>Ctrl-d</code> \uff08\u4e0b\u7ffb\uff09</li> <li>\u6587\u4ef6\uff1a <code>gg</code> \uff08\u6587\u4ef6\u5934\uff09\uff0c <code>G</code> \uff08\u6587\u4ef6\u5c3e\uff09</li> <li>\u884c\u6570\uff1a :<code>{\u884c\u6570}&lt;CR&gt;</code> \u6216\u8005 <code>{\u884c\u6570}G</code> ({\u884c\u6570}\u4e3a\u884c\u6570)</li> <li>\u6742\u9879\uff1a <code>%</code> \uff08\u627e\u5230\u914d\u5bf9\uff0c\u6bd4\u5982\u62ec\u53f7\u6216\u8005 /* */ \u4e4b\u7c7b\u7684\u6ce8\u91ca\u5bf9\uff09</li> <li>\u67e5\u627e\uff1a <code>f</code> {\u5b57\u7b26}\uff0c <code>t</code> {\u5b57\u7b26}\uff0c <code>F</code> {\u5b57\u7b26}\uff0c <code>T</code> {\u5b57\u7b26}</li> <li>\u67e5\u627e/\u5230 \u5411\u524d/\u5411\u540e \u5728\u672c\u884c\u7684{\u5b57\u7b26}</li> <li><code>, / ;</code> \u7528\u4e8e\u5bfc\u822a\u5339\u914d</li> <li>\u641c\u7d22: <code>/{\u6b63\u5219\u8868\u8fbe\u5f0f}</code>, <code>n</code> / <code>N</code> \u7528\u4e8e\u5bfc\u822a\u5339\u914d</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_8","title":"\u9009\u62e9","text":"<ul> <li>\u53ef\u89c6\u5316\u6a21\u5f0f:<ul> <li>\u53ef\u89c6\u5316\uff1a<code>v</code></li> <li>\u53ef\u89c6\u5316\u884c\uff1a <code>V</code></li> <li>\u53ef\u89c6\u5316\u5757\uff1a<code>Ctrl+v</code></li> </ul> </li> <li>\u53ef\u4ee5\u7528\u79fb\u52a8\u547d\u4ee4\u6765\u9009\u4e2d\u3002</li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_9","title":"\u7f16\u8f91","text":"<ul> <li>\u6240\u6709\u4f60\u9700\u8981\u7528\u9f20\u6807\u505a\u7684\u4e8b\uff0c \u4f60\u73b0\u5728\u90fd\u53ef\u4ee5\u7528\u952e\u76d8\uff1a\u91c7\u7528\u7f16\u8f91\u547d\u4ee4\u548c\u79fb\u52a8\u547d\u4ee4\u7684\u7ec4\u5408\u6765\u5b8c\u6210\u3002 \u8fd9\u5c31\u662f Vim \u7684\u754c\u9762\u5f00\u59cb\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u7a0b\u5e8f\u8bed\u8a00\u7684\u65f6\u5019\u3002Vim \u7684\u7f16\u8f91\u547d\u4ee4\u4e5f\u88ab\u79f0\u4e3a \u201c\u52a8\u8bcd\u201d\uff0c \u56e0\u4e3a\u52a8\u8bcd\u53ef\u4ee5\u65bd\u52a8\u4e8e\u540d\u8bcd\u3002<ul> <li><code>i</code> \u8fdb\u5165\u63d2\u5165\u6a21\u5f0f</li> <li>\u4f46\u662f\u5bf9\u4e8e\u64cd\u7eb5/\u7f16\u8f91\u6587\u672c\uff0c\u4e0d\u5355\u60f3\u7528\u9000\u683c\u952e\u5b8c\u6210</li> <li><code>O</code> / <code>o</code> \u5728\u4e4b\u4e0a/\u4e4b\u4e0b\u63d2\u5165\u884c</li> <li><code>d</code> \u5220\u9664 {\u79fb\u52a8\u547d\u4ee4}</li> <li>\u4f8b\u5982\uff0c <code>dw</code> \u5220\u9664\u8bcd, <code>d$</code> \u5220\u9664\u5230\u884c\u5c3e, <code>d0</code> \u5220\u9664\u5230\u884c\u5934\u3002</li> <li><code>c</code> \u6539\u53d8 {\u79fb\u52a8\u547d\u4ee4}</li> <li>\u4f8b\u5982\uff0c <code>cw</code> \u6539\u53d8\u8bcd</li> <li>\u6bd4\u5982 <code>d</code> \u518d <code>i</code></li> <li><code>x</code> \u5220\u9664\u5b57\u7b26\uff08\u7b49\u540c\u4e8e <code>dl</code>\uff09</li> <li><code>s</code> \u66ff\u6362\u5b57\u7b26\uff08\u7b49\u540c\u4e8e <code>xi</code>\uff09</li> <li>\u53ef\u89c6\u5316\u6a21\u5f0f + \u64cd\u4f5c</li> <li>\u9009\u4e2d\u6587\u5b57, <code>d</code> \u5220\u9664 \u6216\u8005 <code>c</code> \u6539\u53d8</li> <li><code>u</code> \u64a4\u9500, <code>&lt;C-r&gt;</code> \u91cd\u505a</li> <li><code>y</code> \u590d\u5236 / <code>yank</code> \uff08\u5176\u4ed6\u4e00\u4e9b\u547d\u4ee4\u6bd4\u5982 <code>d</code> \u4e5f\u4f1a\u590d\u5236\uff09</li> <li><code>p</code> \u7c98\u8d34</li> <li>\u66f4\u591a\u503c\u5f97\u5b66\u4e60\u7684: \u6bd4\u5982 <code>~</code> \u6539\u53d8\u5b57\u7b26\u7684\u5927\u5c0f\u5199</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_10","title":"\u8ba1\u6570","text":"<ul> <li>\u4f60\u53ef\u4ee5\u7528\u4e00\u4e2a\u8ba1\u6570\u6765\u7ed3\u5408\u201c\u540d\u8bcd\u201d\u548c\u201c\u52a8\u8bcd\u201d\uff0c\u8fd9\u4f1a\u6267\u884c\u6307\u5b9a\u64cd\u4f5c\u82e5\u5e72\u6b21\u3002<ul> <li><code>3w</code> \u5411\u524d\u79fb\u52a8\u4e09\u4e2a\u8bcd</li> <li><code>5j</code> \u5411\u4e0b\u79fb\u52a85\u884c</li> <li><code>7dw</code> \u5220\u96647\u4e2a\u8bcd</li> </ul> </li> </ul>"},{"location":"Triviality/The%20Missing%20Semester/Vim/#_11","title":"\u4fee\u9970\u8bed","text":"<ul> <li>\u4f60\u53ef\u4ee5\u7528\u4fee\u9970\u8bed\u6539\u53d8\u201c\u540d\u8bcd\u201d\u7684\u610f\u4e49\u3002\u4fee\u9970\u8bed\u6709 i\uff0c\u8868\u793a\u201c\u5185\u90e8\u201d\u6216\u8005\u201c\u5728\u5185\u201c\uff0c\u548c a\uff0c \u8868\u793a\u201d\u5468\u56f4\u201c\u3002<ul> <li><code>ci(</code> \u6539\u53d8\u5f53\u524d\u62ec\u53f7\u5185\u7684\u5185\u5bb9</li> <li><code>ci[</code> \u6539\u53d8\u5f53\u524d\u65b9\u62ec\u53f7\u5185\u7684\u5185\u5bb9</li> <li><code>da'</code> \u5220\u9664\u4e00\u4e2a\u5355\u5f15\u53f7\u5b57\u7b26\u4e32\uff0c \u5305\u62ec\u5468\u56f4\u7684\u5355\u5f15\u53f7</li> </ul> </li> </ul>"}]}